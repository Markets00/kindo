ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 1.
Hexadecimal [16-Bits]



                     0020     1 std_acc = 32 	;; standard acceleration per frame
                              2 
                              3 .area _DATA
                              4 .area _CODE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 2.
Hexadecimal [16-Bits]



                              5 .include "utility.h.s"
                              1 ;; ====================================
                              2 ;; ====================================
                              3 ;; INCLUDED CPCTELERA FUNCTIONS
                              4 ;; ====================================
                              5 ;; ====================================
                              6 .globl cpct_waitVSYNC_asm
                              7 .globl cpct_drawSolidBox_asm
                              8 .globl cpct_getScreenPtr_asm
                              9 .globl cpct_scanKeyboard_asm
                             10 .globl cpct_isKeyPressed_asm
                             11 .globl cpct_disableFirmware_asm
                             12 .globl cpct_setVideoMode_asm
                             13 .globl cpct_setPalette_asm
                             14 .globl cpct_memcpy_asm
                             15 .globl negateHL
                             16 .globl cpct_setVideoMemoryPage_asm
                             17 .globl cpct_akp_musicPlay_asm
                             18 .globl cpct_akp_stop_asm
                             19 .globl cpct_drawSprite_asm
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 3.
Hexadecimal [16-Bits]



                              6 .include "entity.h.s"
                              1 ;; ====================================
                              2 ;; ====================================
                              3 ;; ENTITY PUBLIC FUNCTIONS
                              4 ;; ====================================
                              5 ;; ====================================
                              6 .globl entityDraw
                              7 .globl entityErase
                              8 .globl entityCheckCollision
                              9 .globl entityUpdatePhysics
                             10 .globl entityUpdatePosition
                             11 
                             12 .macro defineEntity name, x,y, h, w, vx, vy, ax, ay, normal, state, sprite, id
                             13 	name'_data::
                             14 		name'_x:	.dw x		;; X coordinate			(16 bits)
                             15 		name'_y:	.dw y		;; Y coordinate			(16 bits)
                             16 		name'_h:	.db h		;; Height			(8 bits)
                             17 		name'_w:	.db w		;; Width			(8 bits)
                             18 		name'_vx:	.dw vx		;; Velocity at X axis 		(16 bits)
                             19 		name'_vy:	.dw vy		;; Velocity at Y axis		(16 bits)
                             20 		name'_ax:	.dw ax		;; Acceleration at X axis	(16 bits)
                             21 		name'_ay:	.dw ay		;; Acceleration at Y axis	(16 bits)
                             22 		name'_normal:	.dw normal	;; Normal force			(16 bits)
                             23 		name'_last_x:	.db x		;; Last x rendered		(8 bits)
                             24 		name'_erase_x:	.db x		;; x rendered at same buffer	(8 bits)
                             25 		name'_last_y:	.db y		;; Last y rendered		(8 bits)
                             26 		name'_erase_y:	.db y		;; y rendered at same buffer	(8 bits)
                             27 		name'_state:	.db state	;; Entity enabled/disabled	(8 bits)
                             28 		name'_sprite:	.dw sprite	;; Entity sprite		(16 bits)
                             29 		name'_id:	.db id		;; Numeric ID			(8 bits)
                             30 .endm
                             31 
                             32 
                             33 ;; ====================================
                             34 ;; ====================================
                             35 ;; ENTITY PUBLIC DATA
                             36 ;; ====================================
                             37 ;; ====================================
                     0000    38 .equ Ent_x_I, 		0	;; X coordinate, integer part
                     0001    39 .equ Ent_x_F, 		1	;; X coordinate, fractional part
                     0002    40 .equ Ent_y_I, 		2	;; Y coordinate, integer part
                     0003    41 .equ Ent_y_F, 		3	;; Y coordinate, fractional part
                     0004    42 .equ Ent_h, 		4	;; Height
                     0005    43 .equ Ent_w, 		5	;; Width
                     0006    44 .equ Ent_vx_I,		6	;; Velocity at X axis, integer part
                     0007    45 .equ Ent_vx_F,		7	;; Velocity at X axis, fractional part
                     0008    46 .equ Ent_vy_I,		8	;; Velocity at Y axis, integer part
                     0009    47 .equ Ent_vy_F,		9	;; Velocity at Y axis, fractional part
                     000A    48 .equ Ent_ax_I,		10	;; Acceleration at X axis, integer part
                     000B    49 .equ Ent_ax_F,		11	;; Acceleration at X axis, fractional part
                     000C    50 .equ Ent_ay_I,		12	;; Acceleration at Y axis, integer part
                     000D    51 .equ Ent_ay_F,		13	;; Acceleration at Y axis, fractional part
                     000E    52 .equ Ent_N_I,		14	;; Normal force, integer part
                     000F    53 .equ Ent_N_F,		15	;; Normal force, fractional part
                     0010    54 .equ Ent_last_x,	16	;; Last x rendered
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 4.
Hexadecimal [16-Bits]



                     0011    55 .equ Ent_erase_x,	17	;; x rendered at same buffer
                     0012    56 .equ Ent_last_y,	18	;; Last y rendered
                     0013    57 .equ Ent_erase_y,	19	;; y rendered at same buffer
                     0014    58 .equ Ent_state,		20	;; Entity enabled/disabled
                     0015    59 .equ Ent_sprite_H, 	21	;; Pointer to sprite, high part
                     0016    60 .equ Ent_sprite_L, 	22	;; Pointer to sprite, low part
                     0017    61 .equ Ent_id, 		23	;; Numeric ID
                             62 				;; Frisbee 	0
                             63 				;; Player1 	1
                             64 				;; Enemy1	2
                             65 
                     0003    66 .equ MAX_VEL_X, 3 
                     FFFFFFFD    67 .equ MIN_VEL_X, -3
                     0003    68 .equ MAX_VEL_Y, 3
                     FFFFFFFD    69 .equ MIN_VEL_Y, -3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 5.
Hexadecimal [16-Bits]



                              7 .include "frisbee.h.s"
                              1 ;; =========================
                              2 ;; =========================
                              3 ;; FRISBEE PUBLIC FUNCTIONS
                              4 ;; =========================
                              5 ;; =========================
                              6 .globl frisbee_erase
                              7 .globl frisbee_update
                              8 .globl frisbee_draw
                              9 .globl frisbee_data
                             10 .globl frisbee_setOff
                             11 .globl frisbee_setEffect
                             12 .globl frisbee_setVelocities
                             13 .globl frisbee_checkGoal
                             14 
                             15 .globl _sprite_frisbee_1_0
                             16 .globl _sprite_frisbee_1_1
                             17 	
                     0018    18 .equ Frisbee_effect_I, 24
                     0019    19 .equ Frisbee_effect_F, 25
                     0008    20 .equ std_eff, 0x0008
                     FFF8    21 .equ std_N_eff, 0xFFF8
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 6.
Hexadecimal [16-Bits]



                              8 .include "game.h.s"
                              1 ;; ====================================
                              2 ;; ====================================
                              3 ;; GAME PUBLIC FUNCTIONS
                              4 ;; ====================================
                              5 ;; ====================================
                              6 .globl gameStart
                              7 .globl getVideoPtr
                              8 .globl incTeam1Points
                              9 .globl incTeam2Points
                             10 .globl player_data
                             11 .globl enemy_data
                             12 .globl player_2_data
                             13 .globl enemy_2_data
                             14 .globl play_music	;; alomejor son privados
                             15 .globl stop_music	;; alomejor son privados
                             16 .globl game_data
                             17 
                             18 ;; ====================================
                             19 ;; ====================================
                             20 ;; GAME PUBLIC DATA
                             21 ;; ====================================
                             22 ;; ====================================
                     0050    23 .equ RIGHT_LIMIT,	80
                     0000    24 .equ LEFT_LIMIT,	0
                     0014    25 .equ TOP_LIMIT,	 	20
                     00C8    26 .equ BOTTOM_LIMIT,	200
                     0028    27 .equ CENTER_LIMIT,	40
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 7.
Hexadecimal [16-Bits]



                              9 .include "keyboard/keyboard.s"
                              1 ;;-----------------------------LICENSE NOTICE------------------------------------
                              2 ;;  This file is part of CPCtelera: An Amstrad CPC Game Engine 
                              3 ;;  Copyright (C) 2014 ronaldo / Fremos / Cheesetea / ByteRealms (@FranGallegoBR)
                              4 ;;
                              5 ;;  This program is free software: you can redistribute it and/or modify
                              6 ;;  it under the terms of the GNU Lesser General Public License as published by
                              7 ;;  the Free Software Foundation, either version 3 of the License, or
                              8 ;;  (at your option) any later version.
                              9 ;;
                             10 ;;  This program is distributed in the hope that it will be useful,
                             11 ;;  but WITHOUT ANY WARRANTY; without even the implied warranty of
                             12 ;;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                             13 ;;  GNU Lesser General Public License for more details.
                             14 ;;
                             15 ;;  You should have received a copy of the GNU Lesser General Public License
                             16 ;;  along with this program.  If not, see <http://www.gnu.org/licenses/>.
                             17 ;;-------------------------------------------------------------------------------
                             18 .module cpct_keyboard
                             19 
                             20 ;; bndry directive does not work when linking previously compiled files
                             21 ;.bndry 16
                             22 ;;   16-byte aligned in memory to let functions use 8-bit maths for pointing
                             23 ;;   (alignment not working on user linking)
                             24 
   0000                      25 _cpct_keyboardStatusBuffer:: .ds 10
                             26 
                             27 ;;
                             28 ;; Assembly constant definitions for keyboard mapping
                             29 ;;
                             30 
                             31 ;; Matrix Line 0x00
                     0100    32 .equ Key_CursorUp     ,#0x0100  ;; Bit 0 (01h) => | 0000 0001 |
                     0200    33 .equ Key_CursorRight  ,#0x0200  ;; Bit 1 (02h) => | 0000 0010 |
                     0400    34 .equ Key_CursorDown   ,#0x0400  ;; Bit 2 (04h) => | 0000 0100 |
                     0800    35 .equ Key_F9           ,#0x0800  ;; Bit 3 (08h) => | 0000 1000 |
                     1000    36 .equ Key_F6           ,#0x1000  ;; Bit 4 (10h) => | 0001 0000 |
                     2000    37 .equ Key_F3           ,#0x2000  ;; Bit 5 (20h) => | 0010 0000 |
                     4000    38 .equ Key_Enter        ,#0x4000  ;; Bit 6 (40h) => | 0100 0000 |
                     8000    39 .equ Key_FDot         ,#0x8000  ;; Bit 7 (80h) => | 1000 0000 |
                             40 ;; Matrix Line 0x01
                     0101    41 .equ Key_CursorLeft   ,#0x0101
                     0201    42 .equ Key_Copy         ,#0x0201
                     0401    43 .equ Key_F7           ,#0x0401
                     0801    44 .equ Key_F8           ,#0x0801
                     1001    45 .equ Key_F5           ,#0x1001
                     2001    46 .equ Key_F1           ,#0x2001
                     4001    47 .equ Key_F2           ,#0x4001
                     8001    48 .equ Key_F0           ,#0x8001
                             49 ;; Matrix Line 0x02
                     0102    50 .equ Key_Clr          ,#0x0102
                     0202    51 .equ Key_OpenBracket  ,#0x0202
                     0402    52 .equ Key_Return       ,#0x0402
                     0802    53 .equ Key_CloseBracket ,#0x0802
                     1002    54 .equ Key_F4           ,#0x1002
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 8.
Hexadecimal [16-Bits]



                     2002    55 .equ Key_Shift        ,#0x2002
                     4002    56 .equ Key_BackSlash    ,#0x4002
                     8002    57 .equ Key_Control      ,#0x8002
                             58 ;; Matrix Line 0x03
                     0103    59 .equ Key_Caret        ,#0x0103
                     0203    60 .equ Key_Hyphen       ,#0x0203
                     0403    61 .equ Key_At           ,#0x0403
                     0803    62 .equ Key_P            ,#0x0803
                     1003    63 .equ Key_SemiColon    ,#0x1003
                     2003    64 .equ Key_Colon        ,#0x2003
                     4003    65 .equ Key_Slash        ,#0x4003
                     8003    66 .equ Key_Dot          ,#0x8003
                             67 ;; Matrix Line 0x04
                     0104    68 .equ Key_0            ,#0x0104
                     0204    69 .equ Key_9            ,#0x0204
                     0404    70 .equ Key_O            ,#0x0404
                     0804    71 .equ Key_I            ,#0x0804
                     1004    72 .equ Key_L            ,#0x1004
                     2004    73 .equ Key_K            ,#0x2004
                     4004    74 .equ Key_M            ,#0x4004
                     8004    75 .equ Key_Comma        ,#0x8004
                             76 ;; Matrix Line 0x05
                     0105    77 .equ Key_8            ,#0x0105
                     0205    78 .equ Key_7            ,#0x0205
                     0405    79 .equ Key_U            ,#0x0405
                     0805    80 .equ Key_Y            ,#0x0805
                     1005    81 .equ Key_H            ,#0x1005
                     2005    82 .equ Key_J            ,#0x2005
                     4005    83 .equ Key_N            ,#0x4005
                     8005    84 .equ Key_Space        ,#0x8005
                             85 ;; Matrix Line 0x06
                     0106    86 .equ Key_6            ,#0x0106
                     0106    87 .equ Joy1_Up          ,#0x0106
                     0206    88 .equ Key_5            ,#0x0206
                     0206    89 .equ Joy1_Down        ,#0x0206
                     0406    90 .equ Key_R            ,#0x0406
                     0406    91 .equ Joy1_Left        ,#0x0406
                     0806    92 .equ Key_T            ,#0x0806
                     0806    93 .equ Joy1_Right       ,#0x0806
                     1006    94 .equ Key_G            ,#0x1006
                     1006    95 .equ Joy1_Fire1       ,#0x1006
                     2006    96 .equ Key_F            ,#0x2006
                     2006    97 .equ Joy1_Fire2       ,#0x2006
                     4006    98 .equ Key_B            ,#0x4006
                     4006    99 .equ Joy1_Fire3       ,#0x4006
                     8006   100 .equ Key_V            ,#0x8006
                            101 ;; Matrix Line 0x07
                     0107   102 .equ Key_4            ,#0x0107
                     0207   103 .equ Key_3            ,#0x0207
                     0407   104 .equ Key_E            ,#0x0407
                     0807   105 .equ Key_W            ,#0x0807
                     1007   106 .equ Key_S            ,#0x1007
                     2007   107 .equ Key_D            ,#0x2007
                     4007   108 .equ Key_C            ,#0x4007
                     8007   109 .equ Key_X            ,#0x8007
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 9.
Hexadecimal [16-Bits]



                            110 ;; Matrix Line 0x08
                     0108   111 .equ Key_1            ,#0x0108
                     0208   112 .equ Key_2            ,#0x0208
                     0408   113 .equ Key_Esc          ,#0x0408
                     0808   114 .equ Key_Q            ,#0x0808
                     1008   115 .equ Key_Tab          ,#0x1008
                     2008   116 .equ Key_A            ,#0x2008
                     4008   117 .equ Key_CapsLock     ,#0x4008
                     8008   118 .equ Key_Z            ,#0x8008
                            119 ;; Matrix Line 0x09
                     0109   120 .equ Joy0_Up          ,#0x0109
                     0209   121 .equ Joy0_Down        ,#0x0209
                     0409   122 .equ Joy0_Left        ,#0x0409
                     0809   123 .equ Joy0_Right       ,#0x0809
                     1009   124 .equ Joy0_Fire1       ,#0x1009
                     2009   125 .equ Joy0_Fire2       ,#0x2009
                     4009   126 .equ Joy0_Fire3       ,#0x4009
                     8009   127 .equ Key_Del          ,#0x8009
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 10.
Hexadecimal [16-Bits]



                             10 .globl _moveIA
                             11 	
                             12 .globl _sprite_palette
                             13 .globl _sprite_robot_1_0
                             14 .globl _sprite_robot_1_1
                             15 .globl _sprite_robot_2_0
                             16 .globl _sprite_robot_2_1
                             17 
                             18 ;; ====================================
                             19 ;; ====================================
                             20 ;; PRIVATE DATA
                             21 ;; ====================================
                             22 ;; ====================================
                             23 	
                             24 ;; ====================================
                             25 ;; ====================================
                             26 ;; PUBLIC FUNCTIONS
                             27 ;; ====================================
                             28 ;; ====================================
   000A                      29 player_erase::
   000A DD 21 00 00   [14]   30 	ld 	ix, #player_data
   000E CD 00 00      [17]   31 	call 	entityErase		;; Erase player
   0011 DD 21 00 00   [14]   32 	ld 	ix, #enemy_data
   0015 CD 00 00      [17]   33 	call 	entityErase		;; Erase enemy
                             34 
   0018 C9            [10]   35 	ret
                             36 
                             37 ;; =========================================
                             38 ;; Actualiza el estado del player recibido
                             39 ;; 	en IX
                             40 ;; Entrada:
                             41 ;;	IX => Pointer to player data
                             42 ;; Modifica: AF, BC, DE, HL, IX
                             43 ;; =========================================
   0019                      44 player_update::
   0019 CD FA 00      [17]   45 	call checkUserInput
                             46 
   001C DD 7E 17      [19]   47 	ld	a, Ent_id(ix)
   001F FE 02         [ 7]   48 	cp	#2
   0021 28 09         [12]   49 	jr	z, check_IA		;; Ent_id == 2? check IA
   0023 FE 04         [ 7]   50 	cp	#4
   0025 28 05         [12]   51 	jr	z, check_IA		;; Ent_id == 4? check IA
                             52 		;; check input
   0027 CD FA 00      [17]   53 		call checkUserInput
   002A 18 03         [12]   54 		jr continue_updating
                             55 
   002C                      56 	check_IA:
   002C CD 6A 00      [17]   57 		call move_IA
                             58 
   002F                      59 	continue_updating:
                             60 
   002F CD 00 00      [17]   61 	call entityUpdatePhysics
   0032 CD 00 00      [17]   62 	call entityUpdatePosition
   0035 CD CF 00      [17]   63 	call checkCenterCrossing
                             64 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 11.
Hexadecimal [16-Bits]



   0038 C9            [10]   65 	ret
                             66 
                             67 ;; ====================================
                             68 ;; ====================================
                             69 ;; PRIVATE FUNCTIONS
                             70 ;; ====================================
                             71 ;; ====================================
                             72 
                             73 ;; =========================================
                             74 ;; Determina el siguiente estado de
                             75 ;;	la entidad
                             76 ;; Entrada:
                             77 ;; =========================================
   0039                      78 delta:
                             79 
                             80 
   0039                      81 update:
                             82 
                             83 ;; =========================================
                             84 ;; Invierte los datos para poder operarlos
                             85 ;;	en C
                             86 ;; Entrada:
                             87 ;;	IX <= Pointer to entity data
                             88 ;;	Modifica: BC
                             89 ;; =========================================
   0039                      90 invert_variables:
                             91 	;; Inverts X
   0039 DD 46 00      [19]   92 	ld	b,	Ent_x_I(ix)
   003C DD 4E 01      [19]   93 	ld	c,	Ent_x_F(ix)
   003F DD 71 00      [19]   94 	ld	Ent_x_I(ix), c
   0042 DD 70 01      [19]   95 	ld	Ent_x_F(ix), b
                             96 
                             97 	;; Inverts Y
   0045 DD 46 02      [19]   98 	ld	b,	Ent_y_I(ix)
   0048 DD 4E 03      [19]   99 	ld	c,	Ent_y_F(ix)
   004B DD 71 02      [19]  100 	ld	Ent_y_I(ix), c
   004E DD 70 03      [19]  101 	ld	Ent_y_F(ix), b
                            102 
                            103 	;; Inverts AX
   0051 DD 46 0A      [19]  104 	ld	b, Ent_ax_I(ix)		 
   0054 DD 4E 0B      [19]  105 	ld	c, Ent_ax_F(ix)		 
   0057 DD 71 0A      [19]  106 	ld	Ent_ax_I(ix), c		 
   005A DD 70 0B      [19]  107 	ld	Ent_ax_F(ix), b		
                            108 
                            109 	;; Inverts AY
   005D DD 46 0C      [19]  110 	ld	b, Ent_ay_I(ix)		 
   0060 DD 4E 0D      [19]  111 	ld	c, Ent_ay_F(ix)		 
   0063 DD 71 0C      [19]  112 	ld	Ent_ay_I(ix), c		 
   0066 DD 70 0D      [19]  113 	ld	Ent_ay_F(ix), b		
                            114 
                            115 	;; FALTARIA EFECTO, CUIDAO
                            116 
   0069 C9            [10]  117 	ret
                            118 
   006A                     119 move_IA:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 12.
Hexadecimal [16-Bits]



                            120 
   006A DD 21 00 00   [14]  121 	ld	ix, #frisbee_data
   006E DD E5         [15]  122 	push 	ix
   0070 CD 39 00      [17]  123 	call 	invert_variables
   0073 DD 21 00 00   [14]  124 	ld	ix, #player_data
   0077 DD E5         [15]  125 	push 	ix
   0079 CD 39 00      [17]  126 	call 	invert_variables
   007C DD 21 00 00   [14]  127 	ld	ix, #enemy_data
   0080 DD E5         [15]  128 	push 	ix
   0082 CD 39 00      [17]  129 	call 	invert_variables
   0085 CD 00 00      [17]  130 	call _moveIA			;; moveIA(TEntity* myself, TEntity* enemy, TEntity* frisbee)
                            131 	
   0088 DD E1         [14]  132 	pop 	ix
   008A DD E1         [14]  133 	pop 	ix
   008C DD E1         [14]  134 	pop 	ix
                            135 
   008E DD 21 00 00   [14]  136 	ld	ix, #frisbee_data
   0092 CD 39 00      [17]  137 	call 	invert_variables
   0095 DD 21 00 00   [14]  138 	ld	ix, #player_data
   0099 CD 39 00      [17]  139 	call 	invert_variables
   009C DD 21 00 00   [14]  140 	ld	ix, #enemy_data
   00A0 CD 39 00      [17]  141 	call 	invert_variables
                            142 
                            143 
   00A3 C9            [10]  144 	ret
                            145 	
                            146 ;; =========================================
                            147 ;; Comprueba si la entidad colisiona con 
                            148 ;; 	el frisbee
                            149 ;; Entrada:
                            150 ;; 	IX <= puntero al player a comparar
                            151 ;; 		con el frisbee
                            152 ;; Modifica: AF, B, HL, IX
                            153 ;; Devuelve:
                            154 ;; 	A <= 	0 si no hay colisión
                            155 ;; 		>1 si hay colisión
                            156 ;; =========================================
   00A4                     157 checkFrisbeeCollision:
   00A4 21 00 00      [10]  158 	ld 	hl, #frisbee_data	;; HL <= frisbee_data
   00A7 CD 00 00      [17]  159 	call 	entityCheckCollision 	;; A <= collison/no_collision
                            160 
   00AA C9            [10]  161 	ret
                            162 
                            163 
                            164 ;; ===============================================
                            165 ;; Acelera la entidad hacia la derecha, si puede
                            166 ;; Entrada:
                            167 ;; 	IX <= puntero a los datos de la entidad
                            168 ;; Modifica A, IX
                            169 ;; ===============================================
   00AB                     170 moveRight:
                            171 	;; push 	ix
                            172 	;; call 	checkFrisbeeCollision 	;; A == collision/no_collision
                            173 	;; pop 	ix
                            174 	;; cp 	#0			;; A == 0?
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 13.
Hexadecimal [16-Bits]



                            175 	;; jr	nz, collision_right 	;; checkFrisbeeCollision != 0?
                            176 
                            177 		;; no_collision
   00AB DD 36 0A 00   [19]  178 		ld 	Ent_ax_I(ix), #0
   00AF DD 36 0B 20   [19]  179 		ld 	Ent_ax_F(ix), #std_acc	;; Ent_ay <= 00(0)E2(30) (30)
                            180 
                            181 
   00B3 C9            [10]  182 		ret
                            183 
                            184 	;;collision_right:
                            185 	;;	call 	frisbee_setOff
                            186 	;;
                            187 	;;	ret
                            188 
                            189 ;; ===============================================
                            190 ;; Acelera la entidad hacia abajo, si puede
                            191 ;; Entrada:
                            192 ;; 	IX <= puntero a los datos de la entidad
                            193 ;; Modifica A, IX
                            194 ;; ===============================================
   00B4                     195 moveDown:
   00B4 DD 36 0C 00   [19]  196 	ld 	Ent_ay_I(ix), #0
   00B8 DD 36 0D 20   [19]  197 	ld 	Ent_ay_F(ix), #std_acc	;; Ent_ay <= 00(0)E2(30) (30)
                            198 
   00BC C9            [10]  199 	ret
                            200 
                            201 ;; ===============================================
                            202 ;; Acelera la entidad hacia la izquierda, si puede
                            203 ;; Entrada:
                            204 ;; 	IX <= puntero a los datos de la entidad
                            205 ;; Modifica A, IX
                            206 ;; ===============================================
   00BD                     207 moveLeft:
   00BD DD 36 0A FF   [19]  208 	ld 	Ent_ax_I(ix), #-1
   00C1 DD 36 0B E0   [19]  209 	ld 	Ent_ax_F(ix), #-std_acc	;; Ent_ax <= FF(-1)E2(-30) (-30)
                            210 
   00C5 C9            [10]  211 	ret
                            212 
                            213 ;; ===============================================
                            214 ;; Acelera la entidad hacia arriba, si puede
                            215 ;; Entrada:
                            216 ;; 	IX <= puntero a los datos de la entidad
                            217 ;; Modifica A, IX
                            218 ;; ===============================================
   00C6                     219 moveUp:
   00C6 DD 36 0C FF   [19]  220 	ld 	Ent_ay_I(ix), #-1
   00CA DD 36 0D E0   [19]  221 	ld 	Ent_ay_F(ix), #-std_acc	;; Ent_ay <= FF(-1)E2(-30) (-30)
                            222 
   00CE C9            [10]  223 	ret
                            224 
                            225 
                            226 ;; ===========================================
                            227 ;; Chequea si un jugador pasa del centro del
                            228 ;; 	campo y lo corrige en caso necesario
                            229 ;; Entrada:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 14.
Hexadecimal [16-Bits]



                            230 ;; 	IX <= pointer to entity data
                            231 ;; Modifica AF, BC, DE, HL
                            232 ;; ===========================================
   00CF                     233 checkCenterCrossing:
   00CF DD 7E 17      [19]  234 	ld 	a, Ent_id(ix)
   00D2 FE 01         [ 7]  235 	cp 	#1
   00D4 28 11         [12]  236 	jr	z, player_1
   00D6 FE 02         [ 7]  237 		cp	#2
   00D8 20 1F         [12]  238 		jr	nz, invalid_id
                            239 			;; player 2
   00DA 3E 28         [ 7]  240 			ld	a, #CENTER_LIMIT				;; A <= Ent_x, integer part
   00DC DD BE 00      [19]  241 			cp	Ent_x_I(ix)
   00DF 38 18         [12]  242 			jr	c, not_crossed				;; Ent_x <= CENTER_LIMIT? center crossed
                            243 				;; center limit crossed
   00E1 DD 36 00 28   [19]  244 				ld	Ent_x_I(ix), #CENTER_LIMIT
   00E5 18 12         [12]  245 				jr not_crossed
                            246 
   00E7                     247 	player_1:
   00E7 DD 7E 00      [19]  248 			ld	a, Ent_x_I(ix)				;; A <= Ent_x, integer part
   00EA DD 86 05      [19]  249 			add	a, Ent_w(ix)				;; A <= Ent_x + Ent_w
   00ED FE 28         [ 7]  250 			cp	#CENTER_LIMIT
   00EF 38 08         [12]  251 			jr	c, not_crossed				;; Ent_x + Ent_w > CENTER_LIMIT? center crossed
                            252 				;; center limit crossed
   00F1 3E 28         [ 7]  253 				ld	a, #CENTER_LIMIT
   00F3 DD 96 05      [19]  254 				sub	Ent_w(ix)			;; A <= CENTER_LIMIT - Ent_w
   00F6 DD 77 00      [19]  255 				ld	Ent_x_I(ix), a			;; Ent_x = CENTER_LIMIT - Ent_w
                            256 
   00F9                     257 	invalid_id:
   00F9                     258 	not_crossed:
   00F9 C9            [10]  259 	ret
                            260 
                            261 
                            262 ;; ====================================
                            263 ;; Lee la entrada del teclado
                            264 ;; Entrada:
                            265 ;; 	IX <= pointer to entity data
                            266 ;; Modifica AF, BC, DE, HL, IX
                            267 ;; ====================================
   00FA                     268 checkUserInput:
   00FA CD 00 00      [17]  269 	call cpct_scanKeyboard_asm						;;;;; TO DO DESACOPLAR ESTE CÓDIGO PARA QUE JUEGUEN 2 JUGADORES ;;;;;;;;;;
                            270 
   00FD DD 7E 17      [19]  271 	ld 	a, Ent_id(ix)
   0100 FE 01         [ 7]  272 	cp	#1
   0102 C2 3B 01      [10]  273 	jp	nz, player_2
                            274 		;; Player 1
   0105 21 07 20      [10]  275 		ld 	hl, #Key_D			;; HL = D Keycode
   0108 CD 00 00      [17]  276 		call 	cpct_isKeyPressed_asm 		;; A = True/False
   010B FE 00         [ 7]  277 		cp 	#0 				;; A == 0?
   010D 28 03         [12]  278 		jr 	z, d_not_pressed
                            279 			;; D is pressed
   010F CD AB 00      [17]  280 			call 	moveRight	
   0112                     281 		d_not_pressed:
                            282 
   0112 21 08 20      [10]  283 		ld 	hl, #Key_A			;; HL = A Keycode
   0115 CD 00 00      [17]  284 		call 	cpct_isKeyPressed_asm 		;; A = True/False
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 15.
Hexadecimal [16-Bits]



   0118 FE 00         [ 7]  285 		cp 	#0 				;; A == 0?
   011A 28 03         [12]  286 		jr 	z, a_not_pressed
                            287 			;; A is pressed	
   011C CD BD 00      [17]  288 			call 	moveLeft
   011F                     289 		a_not_pressed:
                            290 
   011F 21 07 08      [10]  291 		ld 	hl, #Key_W			;; HL = W Keycode
   0122 CD 00 00      [17]  292 		call 	cpct_isKeyPressed_asm 		;; A = True/False
   0125 FE 00         [ 7]  293 		cp 	#0 				;; A == 0?
   0127 28 03         [12]  294 		jr 	z, w_not_pressed
                            295 			;; W is pressed
   0129 CD C6 00      [17]  296 			call 	moveUp	
   012C                     297 		w_not_pressed:
                            298 
   012C 21 07 10      [10]  299 		ld 	hl, #Key_S			;; HL = S Keycode
   012F CD 00 00      [17]  300 		call 	cpct_isKeyPressed_asm 		;; A = True/False
   0132 FE 00         [ 7]  301 		cp 	#0 				;; A == 0?
   0134 28 03         [12]  302 		jr 	z, s_not_pressed
                            303 			;; S is pressed	
   0136 CD B4 00      [17]  304 			call 	moveDown
   0139                     305 		s_not_pressed:
   0139 18 34         [12]  306 		jr five_not_pressed
                            307 
   013B                     308 	player_2:
   013B 21 00 10      [10]  309 		ld 	hl, #Key_F6			;; HL = F6 Keycode
   013E CD 00 00      [17]  310 		call 	cpct_isKeyPressed_asm 		;; A = True/False
   0141 FE 00         [ 7]  311 		cp 	#0 				;; A == 0?
   0143 28 03         [12]  312 		jr 	z, six_not_pressed
                            313 			;; D is pressed
   0145 CD AB 00      [17]  314 			call 	moveRight	
   0148                     315 		six_not_pressed:
                            316 
   0148 21 02 10      [10]  317 		ld 	hl, #Key_F4			;; HL = F4 Keycode
   014B CD 00 00      [17]  318 		call 	cpct_isKeyPressed_asm 		;; A = True/False
   014E FE 00         [ 7]  319 		cp 	#0 				;; A == 0?
   0150 28 03         [12]  320 		jr 	z, four_not_pressed
                            321 			;; A is pressed	
   0152 CD BD 00      [17]  322 			call 	moveLeft
   0155                     323 		four_not_pressed:
                            324 
   0155 21 01 08      [10]  325 		ld 	hl, #Key_F8			;; HL = F8 Keycode
   0158 CD 00 00      [17]  326 		call 	cpct_isKeyPressed_asm 		;; A = True/False
   015B FE 00         [ 7]  327 		cp 	#0 				;; A == 0?
   015D 28 03         [12]  328 		jr 	z, eight_not_pressed
                            329 			;; W is pressed
   015F CD C6 00      [17]  330 			call 	moveUp	
   0162                     331 		eight_not_pressed:
                            332 
   0162 21 01 10      [10]  333 		ld 	hl, #Key_F5			;; HL = F5 Keycode
   0165 CD 00 00      [17]  334 		call 	cpct_isKeyPressed_asm 		;; A = True/False
   0168 FE 00         [ 7]  335 		cp 	#0 				;; A == 0?
   016A 28 03         [12]  336 		jr 	z, five_not_pressed
                            337 			;; S is pressed	
   016C CD B4 00      [17]  338 			call 	moveDown
   016F                     339 		five_not_pressed:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 16.
Hexadecimal [16-Bits]



                            340 
                            341 
                            342 
   016F CD 73 01      [17]  343 	call checkVandB
   0172 C9            [10]  344 	ret
                            345 
                            346 
                            347 ;; ====================================
                            348 ;; Funcion auxiliar para leer V y B
                            349 ;;	de la entrada por teclado
                            350 ;; Entrada:
                            351 ;; 	IX <= pointer to entity data
                            352 ;; Modifica AF, BC, DE, HL
                            353 ;; ====================================
   0173                     354 checkVandB:
   0173 DD E5         [15]  355 	push 	ix
   0175 CD A4 00      [17]  356 	call 	checkFrisbeeCollision 	;; A == collision/no_collision
   0178 DD E1         [14]  357 	pop 	ix
   017A FE 00         [ 7]  358 	cp 	#0			;; A == 0?
   017C CA 28 02      [10]  359 	jp	z, no_collision 	;; checkFrisbeeCollision == 0?
                            360 		;; There is collision
                            361 
   017F DD 7E 17      [19]  362 		ld 	a, Ent_id(ix)
   0182 FE 01         [ 7]  363 		cp	#1
   0184 20 54         [12]  364 		jr	nz, player_2_vorb
                            365 			;; Player 1
                            366 
   0186 21 06 80      [10]  367 			ld 	hl, #Key_V			;; HL = V Keycode
   0189 CD 00 00      [17]  368 			call 	cpct_isKeyPressed_asm 		;; A = True/False
   018C FE 00         [ 7]  369 			cp 	#0 				;; A == 0?
   018E 28 22         [12]  370 			jr 	z, v_not_pressed
                            371 				;; V is pressed	
   0190 21 06 40      [10]  372 				ld 	hl, #Key_B			;; HL = B Keycode
   0193 CD 00 00      [17]  373 				call 	cpct_isKeyPressed_asm 		;; A = True/False
   0196 FE 00         [ 7]  374 				cp 	#0 				;; A == 0?
   0198 28 0C         [12]  375 				jr 	z, just_v_pressed
                            376 					;; V and B are pressed
   019A 21 00 00      [10]  377 					ld 	hl, #0			;; HL <= standard effect
   019D DD E5         [15]  378 					push 	ix
   019F CD 00 00      [17]  379 					call frisbee_setEffect		;; efecto hacia abajo
   01A2 DD E1         [14]  380 					pop 	ix
   01A4 18 20         [12]  381 					jr vorb_pressed
   01A6                     382 				just_v_pressed:
   01A6 21 F8 FF      [10]  383 					ld 	hl, #std_N_eff		;; HL <= -standard effect
   01A9 DD E5         [15]  384 					push 	ix
   01AB CD 00 00      [17]  385 					call frisbee_setEffect		;; efecto hacia arriba
   01AE DD E1         [14]  386 					pop 	ix
   01B0 18 14         [12]  387 					jr 	vorb_pressed
   01B2                     388 			v_not_pressed:
                            389 
   01B2 21 06 40      [10]  390 				ld 	hl, #Key_B			;; HL = B Keycode
   01B5 CD 00 00      [17]  391 				call 	cpct_isKeyPressed_asm 		;; A = True/False
   01B8 FE 00         [ 7]  392 				cp 	#0 				;; A == 0?
   01BA 28 6C         [12]  393 				jr 	z, b_not_pressed
                            394 					;; B is pressed
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 17.
Hexadecimal [16-Bits]



   01BC 21 08 00      [10]  395 					ld 	hl, #std_eff		;; HL <= standard effect
   01BF DD E5         [15]  396 					push 	ix
   01C1 CD 00 00      [17]  397 					call frisbee_setEffect		;; efecto hacia abajo
   01C4 DD E1         [14]  398 					pop 	ix
                            399 
   01C6                     400 					vorb_pressed:
   01C6 DD 7E 17      [19]  401 					ld	a, Ent_id(ix)		;;
   01C9 DD 66 06      [19]  402 					ld	h, Ent_vx_I(ix)		;;
   01CC DD 6E 07      [19]  403 					ld	l, Ent_vx_F(ix)		;;
   01CF DD 56 08      [19]  404 					ld	d, Ent_vy_I(ix)		;;
   01D2 DD 5E 09      [19]  405 					ld	e, Ent_vy_F(ix)		;;
   01D5 CD 00 00      [17]  406 					call frisbee_setVelocities	;; transferimos las velocidades de la entidad al frisbee
                            407 
   01D8 18 4E         [12]  408 					jr o_not_pressed
   01DA                     409 	player_2_vorb:
                            410 
   01DA 21 04 08      [10]  411 			ld 	hl, #Key_I			;; HL = I Keycode
   01DD CD 00 00      [17]  412 			call 	cpct_isKeyPressed_asm 		;; A = True/False
   01E0 FE 00         [ 7]  413 			cp 	#0 				;; A == 0?
   01E2 28 1E         [12]  414 			jr 	z, i_not_pressed
                            415 				;; I is pressed	
   01E4 21 04 04      [10]  416 				ld 	hl, #Key_O			;; HL = O Keycode
   01E7 CD 00 00      [17]  417 				call 	cpct_isKeyPressed_asm 		;; A = True/False
   01EA FE 00         [ 7]  418 				cp 	#0 				;; A == 0?
   01EC 28 08         [12]  419 				jr 	z, just_i_pressed
                            420 					;; I and O are pressed
   01EE 21 00 00      [10]  421 					ld 	hl, #0			;; HL <= standard effect
   01F1 CD 00 00      [17]  422 					call frisbee_setEffect		;; efecto hacia abajo
   01F4 18 20         [12]  423 					jr ioro_pressed
   01F6                     424 				just_i_pressed:
   01F6 21 F8 FF      [10]  425 					ld 	hl, #std_N_eff		;; HL <= -standard effect
   01F9 DD E5         [15]  426 					push 	ix
   01FB CD 00 00      [17]  427 					call frisbee_setEffect		;; efecto hacia arriba
   01FE DD E1         [14]  428 					pop 	ix
   0200 18 14         [12]  429 					jr 	ioro_pressed
   0202                     430 			i_not_pressed:
                            431 
   0202 21 04 04      [10]  432 				ld 	hl, #Key_O			;; HL = O Keycode
   0205 CD 00 00      [17]  433 				call 	cpct_isKeyPressed_asm 		;; A = True/False
   0208 FE 00         [ 7]  434 				cp 	#0 				;; A == 0?
   020A 28 1C         [12]  435 				jr 	z, o_not_pressed
                            436 					;; O is pressed
   020C 21 08 00      [10]  437 					ld 	hl, #std_eff		;; HL <= standard effect
   020F DD E5         [15]  438 					push 	ix
   0211 CD 00 00      [17]  439 					call frisbee_setEffect		;; efecto hacia abajo
   0214 DD E1         [14]  440 					pop 	ix
                            441 
   0216                     442 					ioro_pressed:
   0216 DD 7E 17      [19]  443 					ld	a, Ent_id(ix)		;;
   0219 DD 66 06      [19]  444 					ld	h, Ent_vx_I(ix)		;;
   021C DD 6E 07      [19]  445 					ld	l, Ent_vx_F(ix)		;;
   021F DD 56 08      [19]  446 					ld	d, Ent_vy_I(ix)		;;
   0222 DD 5E 09      [19]  447 					ld	e, Ent_vy_F(ix)		;;
   0225 CD 00 00      [17]  448 					call frisbee_setVelocities	;; transferimos las velocidades de la entidad al frisbee
                            449 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 18.
Hexadecimal [16-Bits]



                            450 
   0228                     451 	no_collision:
   0228                     452 	b_not_pressed:
   0228                     453 	o_not_pressed:
   0228 C9            [10]  454 	ret
