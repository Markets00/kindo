                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.6.8 #9946 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module IA
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _moveIA
                             12 	.globl _fuzzificacion
                             13 	.globl _calcularb_direc
                             14 	.globl _calcule
                             15 	.globl _defuzzi
                             16 	.globl _calculateDom
                             17 	.globl _initAcel
                             18 	.globl _fmems
                             19 	.globl _vRulesy
                             20 	.globl _vRulesx
                             21 	.globl _aceleracion
                             22 	.globl _ruley2
                             23 	.globl _ruley1
                             24 	.globl _ruley
                             25 	.globl _rulex2
                             26 	.globl _rulex1
                             27 	.globl _rulex
                             28 	.globl _acelMed
                             29 	.globl _acelPo
                             30 	.globl _acelMu
                             31 	.globl _lejos
                             32 	.globl _medio
                             33 	.globl _cerca
                             34 ;--------------------------------------------------------
                             35 ; special function registers
                             36 ;--------------------------------------------------------
                             37 ;--------------------------------------------------------
                             38 ; ram data
                             39 ;--------------------------------------------------------
                             40 	.area _DATA
   0000                      41 _aceleracion::
   0000                      42 	.ds 6
                             43 ;--------------------------------------------------------
                             44 ; ram data
                             45 ;--------------------------------------------------------
                             46 	.area _INITIALIZED
   0000                      47 _vRulesx::
   0000                      48 	.ds 6
   0006                      49 _vRulesy::
   0006                      50 	.ds 6
   000C                      51 _fmems::
   000C                      52 	.ds 6
                             53 ;--------------------------------------------------------
                             54 ; absolute external ram data
                             55 ;--------------------------------------------------------
                             56 	.area _DABS (ABS)
                             57 ;--------------------------------------------------------
                             58 ; global & static initialisations
                             59 ;--------------------------------------------------------
                             60 	.area _HOME
                             61 	.area _GSINIT
                             62 	.area _GSFINAL
                             63 	.area _GSINIT
                             64 ;--------------------------------------------------------
                             65 ; Home
                             66 ;--------------------------------------------------------
                             67 	.area _HOME
                             68 	.area _HOME
                             69 ;--------------------------------------------------------
                             70 ; code
                             71 ;--------------------------------------------------------
                             72 	.area _CODE
                             73 ;src/IA.c:127: void initAcel(u8 nivel)
                             74 ;	---------------------------------
                             75 ; Function initAcel
                             76 ; ---------------------------------
   0000                      77 _initAcel::
   0000 DD E5         [15]   78 	push	ix
   0002 DD 21 00 00   [14]   79 	ld	ix,#0
   0006 DD 39         [15]   80 	add	ix,sp
   0008 21 F8 FF      [10]   81 	ld	hl, #-8
   000B 39            [11]   82 	add	hl, sp
   000C F9            [ 6]   83 	ld	sp, hl
                             84 ;src/IA.c:129: u8 i = 0;
   000D 1E 00         [ 7]   85 	ld	e, #0x00
                             86 ;src/IA.c:130: switch(nivel){
   000F DD 7E 04      [19]   87 	ld	a, 4 (ix)
   0012 B7            [ 4]   88 	or	a, a
   0013 28 09         [12]   89 	jr	Z,00101$
   0015 DD 7E 04      [19]   90 	ld	a, 4 (ix)
   0018 3D            [ 4]   91 	dec	a
   0019 28 59         [12]   92 	jr	Z,00105$
   001B C3rC8r00      [10]   93 	jp	00109$
                             94 ;src/IA.c:131: case 0:{ 
   001E                      95 00101$:
                             96 ;src/IA.c:132: u16 aux[3] = {0.06*SCALA, 0.08*SCALA, 0.09*SCALA};
   001E 21 00 00      [10]   97 	ld	hl, #0x0000
   0021 39            [11]   98 	add	hl, sp
   0022 DD 75 FE      [19]   99 	ld	-2 (ix), l
   0025 DD 74 FF      [19]  100 	ld	-1 (ix), h
   0028 36 0F         [10]  101 	ld	(hl), #0x0f
   002A 23            [ 6]  102 	inc	hl
   002B 36 00         [10]  103 	ld	(hl), #0x00
   002D DD 6E FE      [19]  104 	ld	l,-2 (ix)
   0030 DD 66 FF      [19]  105 	ld	h,-1 (ix)
   0033 23            [ 6]  106 	inc	hl
   0034 23            [ 6]  107 	inc	hl
   0035 36 14         [10]  108 	ld	(hl), #0x14
   0037 23            [ 6]  109 	inc	hl
   0038 36 00         [10]  110 	ld	(hl), #0x00
   003A DD 7E FE      [19]  111 	ld	a, -2 (ix)
   003D C6 04         [ 7]  112 	add	a, #0x04
   003F 6F            [ 4]  113 	ld	l, a
   0040 DD 7E FF      [19]  114 	ld	a, -1 (ix)
   0043 CE 00         [ 7]  115 	adc	a, #0x00
   0045 67            [ 4]  116 	ld	h, a
   0046 36 17         [10]  117 	ld	(hl), #0x17
   0048 23            [ 6]  118 	inc	hl
   0049 36 00         [10]  119 	ld	(hl), #0x00
                            120 ;src/IA.c:133: while(i<3)
   004B 01r00r00      [10]  121 	ld	bc, #_aceleracion+0
   004E 1E 00         [ 7]  122 	ld	e, #0x00
   0050                     123 00102$:
   0050 7B            [ 4]  124 	ld	a, e
   0051 D6 03         [ 7]  125 	sub	a, #0x03
   0053 30 1F         [12]  126 	jr	NC,00124$
                            127 ;src/IA.c:135: aceleracion[i] = aux[i];
   0055 6B            [ 4]  128 	ld	l, e
   0056 26 00         [ 7]  129 	ld	h, #0x00
   0058 29            [11]  130 	add	hl, hl
   0059 E5            [11]  131 	push	hl
   005A FD E1         [14]  132 	pop	iy
   005C FD 09         [15]  133 	add	iy, bc
   005E DD 7E FE      [19]  134 	ld	a, -2 (ix)
   0061 85            [ 4]  135 	add	a, l
   0062 6F            [ 4]  136 	ld	l, a
   0063 DD 7E FF      [19]  137 	ld	a, -1 (ix)
   0066 8C            [ 4]  138 	adc	a, h
   0067 67            [ 4]  139 	ld	h, a
   0068 7E            [ 7]  140 	ld	a, (hl)
   0069 23            [ 6]  141 	inc	hl
   006A 56            [ 7]  142 	ld	d, (hl)
   006B FD 77 00      [19]  143 	ld	0 (iy), a
   006E FD 72 01      [19]  144 	ld	1 (iy), d
                            145 ;src/IA.c:136: i++;
   0071 1C            [ 4]  146 	inc	e
   0072 18 DC         [12]  147 	jr	00102$
                            148 ;src/IA.c:139: case 1:{
   0074                     149 00124$:
   0074                     150 00105$:
                            151 ;src/IA.c:140: u16 aux[3] = {0.09*SCALA, 0.1*SCALA, 0.2*SCALA};
   0074 21 00 00      [10]  152 	ld	hl, #0x0000
   0077 39            [11]  153 	add	hl, sp
   0078 DD 75 FE      [19]  154 	ld	-2 (ix), l
   007B DD 74 FF      [19]  155 	ld	-1 (ix), h
   007E 36 17         [10]  156 	ld	(hl), #0x17
   0080 23            [ 6]  157 	inc	hl
   0081 36 00         [10]  158 	ld	(hl), #0x00
   0083 DD 6E FE      [19]  159 	ld	l,-2 (ix)
   0086 DD 66 FF      [19]  160 	ld	h,-1 (ix)
   0089 23            [ 6]  161 	inc	hl
   008A 23            [ 6]  162 	inc	hl
   008B 36 19         [10]  163 	ld	(hl), #0x19
   008D 23            [ 6]  164 	inc	hl
   008E 36 00         [10]  165 	ld	(hl), #0x00
   0090 DD 7E FE      [19]  166 	ld	a, -2 (ix)
   0093 C6 04         [ 7]  167 	add	a, #0x04
   0095 6F            [ 4]  168 	ld	l, a
   0096 DD 7E FF      [19]  169 	ld	a, -1 (ix)
   0099 CE 00         [ 7]  170 	adc	a, #0x00
   009B 67            [ 4]  171 	ld	h, a
   009C 36 33         [10]  172 	ld	(hl), #0x33
   009E 23            [ 6]  173 	inc	hl
   009F 36 00         [10]  174 	ld	(hl), #0x00
                            175 ;src/IA.c:141: while(i<3)
   00A1 01r00r00      [10]  176 	ld	bc, #_aceleracion+0
   00A4                     177 00106$:
   00A4 7B            [ 4]  178 	ld	a, e
   00A5 D6 03         [ 7]  179 	sub	a, #0x03
   00A7 30 1F         [12]  180 	jr	NC,00125$
                            181 ;src/IA.c:143: aceleracion[i] = aux[i];
   00A9 6B            [ 4]  182 	ld	l, e
   00AA 26 00         [ 7]  183 	ld	h, #0x00
   00AC 29            [11]  184 	add	hl, hl
   00AD E5            [11]  185 	push	hl
   00AE FD E1         [14]  186 	pop	iy
   00B0 FD 09         [15]  187 	add	iy, bc
   00B2 DD 7E FE      [19]  188 	ld	a, -2 (ix)
   00B5 85            [ 4]  189 	add	a, l
   00B6 6F            [ 4]  190 	ld	l, a
   00B7 DD 7E FF      [19]  191 	ld	a, -1 (ix)
   00BA 8C            [ 4]  192 	adc	a, h
   00BB 67            [ 4]  193 	ld	h, a
   00BC 7E            [ 7]  194 	ld	a, (hl)
   00BD 23            [ 6]  195 	inc	hl
   00BE 56            [ 7]  196 	ld	d, (hl)
   00BF FD 77 00      [19]  197 	ld	0 (iy), a
   00C2 FD 72 01      [19]  198 	ld	1 (iy), d
                            199 ;src/IA.c:144: i++;
   00C5 1C            [ 4]  200 	inc	e
   00C6 18 DC         [12]  201 	jr	00106$
                            202 ;src/IA.c:147: default:{
   00C8                     203 00125$:
   00C8                     204 00109$:
                            205 ;src/IA.c:148: u16 aux[3] = {0.1*SCALA, 0.2*SCALA, 0.3*SCALA};
   00C8 21 00 00      [10]  206 	ld	hl, #0x0000
   00CB 39            [11]  207 	add	hl, sp
   00CC 4D            [ 4]  208 	ld	c,l
   00CD 44            [ 4]  209 	ld	b,h
   00CE 36 19         [10]  210 	ld	(hl), #0x19
   00D0 23            [ 6]  211 	inc	hl
   00D1 36 00         [10]  212 	ld	(hl), #0x00
   00D3 69            [ 4]  213 	ld	l, c
   00D4 60            [ 4]  214 	ld	h, b
   00D5 23            [ 6]  215 	inc	hl
   00D6 23            [ 6]  216 	inc	hl
   00D7 36 33         [10]  217 	ld	(hl), #0x33
   00D9 23            [ 6]  218 	inc	hl
   00DA 36 00         [10]  219 	ld	(hl), #0x00
   00DC 21 04 00      [10]  220 	ld	hl, #0x0004
   00DF 09            [11]  221 	add	hl, bc
   00E0 36 4C         [10]  222 	ld	(hl), #0x4c
   00E2 23            [ 6]  223 	inc	hl
   00E3 36 00         [10]  224 	ld	(hl), #0x00
                            225 ;src/IA.c:149: while(i<3)
   00E5                     226 00110$:
   00E5 7B            [ 4]  227 	ld	a, e
   00E6 D6 03         [ 7]  228 	sub	a, #0x03
   00E8 30 1B         [12]  229 	jr	NC,00114$
                            230 ;src/IA.c:151: aceleracion[i] = aux[i]; 
   00EA 6B            [ 4]  231 	ld	l, e
   00EB 26 00         [ 7]  232 	ld	h, #0x00
   00ED 29            [11]  233 	add	hl, hl
   00EE FD 21r00r00   [14]  234 	ld	iy, #_aceleracion
   00F2 C5            [11]  235 	push	bc
   00F3 4D            [ 4]  236 	ld	c, l
   00F4 44            [ 4]  237 	ld	b, h
   00F5 FD 09         [15]  238 	add	iy, bc
   00F7 C1            [10]  239 	pop	bc
   00F8 09            [11]  240 	add	hl, bc
   00F9 7E            [ 7]  241 	ld	a, (hl)
   00FA 23            [ 6]  242 	inc	hl
   00FB 66            [ 7]  243 	ld	h, (hl)
   00FC FD 77 00      [19]  244 	ld	0 (iy), a
   00FF FD 74 01      [19]  245 	ld	1 (iy), h
                            246 ;src/IA.c:152: i++;
   0102 1C            [ 4]  247 	inc	e
   0103 18 E0         [12]  248 	jr	00110$
                            249 ;src/IA.c:155: }
   0105                     250 00114$:
   0105 DD F9         [10]  251 	ld	sp, ix
   0107 DD E1         [14]  252 	pop	ix
   0109 C9            [10]  253 	ret
   010A                     254 _cerca:
   010A 00 00               255 	.dw #0x0000
   010C 00 05               256 	.dw #0x0500
   010E 01                  257 	.db #0x01	; 1
   010F 00 0A               258 	.dw #0x0a00
   0111 00 0A               259 	.dw #0x0a00
   0113 00 0A               260 	.dw #0x0a00
   0115                     261 _medio:
   0115 00 00               262 	.dw #0x0000
   0117 00 14               263 	.dw #0x1400
   0119 00                  264 	.db #0x00	; 0
   011A 00 14               265 	.dw #0x1400
   011C 00 0A               266 	.dw #0x0a00
   011E 00 0F               267 	.dw #0x0f00
   0120                     268 _lejos:
   0120 00 00               269 	.dw #0x0000
   0122 00 6E               270 	.dw #0x6e00
   0124 02                  271 	.db #0x02	; 2
   0125 00 3C               272 	.dw #0x3c00
   0127 00 19               273 	.dw #0x1900
   0129 00 64               274 	.dw #0x6400
   012B                     275 _acelMu:
   012B 00 00               276 	.dw #0x0000
   012D 80 57               277 	.dw #0x5780
   012F 02                  278 	.db #0x02	; 2
   0130 00 4B               279 	.dw #0x4b00
   0132 00 19               280 	.dw #0x1900
   0134 00 19               281 	.dw #0x1900
   0136                     282 _acelPo:
   0136 00 00               283 	.dw #0x0000
   0138 80 0C               284 	.dw #0x0c80
   013A 01                  285 	.db #0x01	; 1
   013B 00 19               286 	.dw #0x1900
   013D 00 19               287 	.dw #0x1900
   013F 00 19               288 	.dw #0x1900
   0141                     289 _acelMed:
   0141 00 00               290 	.dw #0x0000
   0143 00 32               291 	.dw #0x3200
   0145 00                  292 	.db #0x00	; 0
   0146 00 32               293 	.dw #0x3200
   0148 00 19               294 	.dw #0x1900
   014A 00 19               295 	.dw #0x1900
   014C                     296 _rulex:
   014Cr0Ar01               297 	.dw _cerca
   014Er2Br01               298 	.dw _acelMu
   0150                     299 _rulex1:
   0150r15r01               300 	.dw _medio
   0152r41r01               301 	.dw _acelMed
   0154                     302 _rulex2:
   0154r20r01               303 	.dw _lejos
   0156r36r01               304 	.dw _acelPo
   0158                     305 _ruley:
   0158r0Ar01               306 	.dw _cerca
   015Ar2Br01               307 	.dw _acelMu
   015C                     308 _ruley1:
   015Cr15r01               309 	.dw _medio
   015Er41r01               310 	.dw _acelMed
   0160                     311 _ruley2:
   0160r20r01               312 	.dw _lejos
   0162r36r01               313 	.dw _acelPo
                            314 ;src/IA.c:159: void calculateDom(const FuzzSetConcreto* c, u8 val, u16* grad)
                            315 ;	---------------------------------
                            316 ; Function calculateDom
                            317 ; ---------------------------------
   0164                     318 _calculateDom::
   0164 DD E5         [15]  319 	push	ix
   0166 DD 21 00 00   [14]  320 	ld	ix,#0
   016A DD 39         [15]  321 	add	ix,sp
   016C 21 ED FF      [10]  322 	ld	hl, #-19
   016F 39            [11]  323 	add	hl, sp
   0170 F9            [ 6]  324 	ld	sp, hl
                            325 ;src/IA.c:161: *grad = 0.0;
   0171 DD 5E 07      [19]  326 	ld	e,7 (ix)
   0174 DD 56 08      [19]  327 	ld	d,8 (ix)
   0177 6B            [ 4]  328 	ld	l, e
   0178 62            [ 4]  329 	ld	h, d
   0179 AF            [ 4]  330 	xor	a, a
   017A 77            [ 7]  331 	ld	(hl), a
   017B 23            [ 6]  332 	inc	hl
   017C 77            [ 7]  333 	ld	(hl), a
                            334 ;src/IA.c:162: if(c->tipo == 0){
   017D DD 7E 04      [19]  335 	ld	a, 4 (ix)
   0180 DD 77 FC      [19]  336 	ld	-4 (ix), a
   0183 DD 7E 05      [19]  337 	ld	a, 5 (ix)
   0186 DD 77 FD      [19]  338 	ld	-3 (ix), a
   0189 DD 6E FC      [19]  339 	ld	l,-4 (ix)
   018C DD 66 FD      [19]  340 	ld	h,-3 (ix)
   018F 01 04 00      [10]  341 	ld	bc, #0x0004
   0192 09            [11]  342 	add	hl, bc
   0193 4E            [ 7]  343 	ld	c, (hl)
                            344 ;src/IA.c:164: if(c->rightOffSet == 0 && c->peakPoint == val 
   0194 DD 7E FC      [19]  345 	ld	a, -4 (ix)
   0197 C6 09         [ 7]  346 	add	a, #0x09
   0199 DD 77 FE      [19]  347 	ld	-2 (ix), a
   019C DD 7E FD      [19]  348 	ld	a, -3 (ix)
   019F CE 00         [ 7]  349 	adc	a, #0x00
   01A1 DD 77 FF      [19]  350 	ld	-1 (ix), a
   01A4 DD 7E FC      [19]  351 	ld	a, -4 (ix)
   01A7 C6 05         [ 7]  352 	add	a, #0x05
   01A9 DD 77 EF      [19]  353 	ld	-17 (ix), a
   01AC DD 7E FD      [19]  354 	ld	a, -3 (ix)
   01AF CE 00         [ 7]  355 	adc	a, #0x00
   01B1 DD 77 F0      [19]  356 	ld	-16 (ix), a
   01B4 DD 7E 06      [19]  357 	ld	a, 6 (ix)
   01B7 DD 77 FA      [19]  358 	ld	-6 (ix), a
   01BA DD 36 FB 00   [19]  359 	ld	-5 (ix), #0x00
                            360 ;src/IA.c:165: || c->leftOffSet == 0 && c->peakPoint == val)
   01BE DD 7E FC      [19]  361 	ld	a, -4 (ix)
   01C1 C6 07         [ 7]  362 	add	a, #0x07
   01C3 DD 77 FC      [19]  363 	ld	-4 (ix), a
   01C6 DD 7E FD      [19]  364 	ld	a, -3 (ix)
   01C9 CE 00         [ 7]  365 	adc	a, #0x00
   01CB DD 77 FD      [19]  366 	ld	-3 (ix), a
                            367 ;src/IA.c:171: if(val <= c->peakPoint && (val >= (c->peakPoint - c->leftOffSet)))
   01CE DD 6E EF      [19]  368 	ld	l,-17 (ix)
   01D1 DD 66 F0      [19]  369 	ld	h,-16 (ix)
   01D4 7E            [ 7]  370 	ld	a, (hl)
   01D5 DD 77 F8      [19]  371 	ld	-8 (ix), a
   01D8 23            [ 6]  372 	inc	hl
   01D9 7E            [ 7]  373 	ld	a, (hl)
   01DA DD 77 F9      [19]  374 	ld	-7 (ix), a
                            375 ;src/IA.c:174: *grad = *grad * (val - (c->peakPoint - c->leftOffSet));
   01DD DD 7E 06      [19]  376 	ld	a, 6 (ix)
   01E0 DD 77 ED      [19]  377 	ld	-19 (ix), a
   01E3 DD 36 EE 00   [19]  378 	ld	-18 (ix), #0x00
                            379 ;src/IA.c:189: u8 midPoint = ((c->peakPoint + c->rightOffSet)- c->rightOffSet);
   01E7 DD 6E FE      [19]  380 	ld	l,-2 (ix)
   01EA DD 66 FF      [19]  381 	ld	h,-1 (ix)
   01ED 7E            [ 7]  382 	ld	a, (hl)
   01EE DD 77 F6      [19]  383 	ld	-10 (ix), a
   01F1 23            [ 6]  384 	inc	hl
   01F2 7E            [ 7]  385 	ld	a, (hl)
   01F3 DD 77 F7      [19]  386 	ld	-9 (ix), a
                            387 ;src/IA.c:174: *grad = *grad * (val - (c->peakPoint - c->leftOffSet));
                            388 ;src/IA.c:178: *grad = SCALA/-c->rightOffSet;
   01F6 AF            [ 4]  389 	xor	a, a
   01F7 DD 96 F6      [19]  390 	sub	a, -10 (ix)
   01FA 6F            [ 4]  391 	ld	l, a
   01FB 3E 00         [ 7]  392 	ld	a, #0x00
   01FD DD 9E F7      [19]  393 	sbc	a, -9 (ix)
   0200 67            [ 4]  394 	ld	h, a
   0201 C5            [11]  395 	push	bc
   0202 D5            [11]  396 	push	de
   0203 E5            [11]  397 	push	hl
   0204 21 00 01      [10]  398 	ld	hl, #0x0100
   0207 E5            [11]  399 	push	hl
                            400 ;src/IA.c:162: if(c->tipo == 0){
   0208 CDr00r00      [17]  401 	call	__divuint
   020B F1            [10]  402 	pop	af
   020C F1            [10]  403 	pop	af
   020D DD 74 F3      [19]  404 	ld	-13 (ix), h
   0210 DD 75 F2      [19]  405 	ld	-14 (ix), l
   0213 D1            [10]  406 	pop	de
   0214 C1            [10]  407 	pop	bc
   0215 79            [ 4]  408 	ld	a, c
   0216 B7            [ 4]  409 	or	a, a
   0217 C2r3Br03      [10]  410 	jp	NZ, 00138$
                            411 ;src/IA.c:164: if(c->rightOffSet == 0 && c->peakPoint == val 
   021A DD 7E FA      [19]  412 	ld	a, -6 (ix)
   021D DD 96 F8      [19]  413 	sub	a, -8 (ix)
   0220 20 0C         [12]  414 	jr	NZ,00214$
   0222 DD 7E FB      [19]  415 	ld	a, -5 (ix)
   0225 DD 96 F9      [19]  416 	sub	a, -7 (ix)
   0228 20 04         [12]  417 	jr	NZ,00214$
   022A 3E 01         [ 7]  418 	ld	a,#0x01
   022C 18 01         [12]  419 	jr	00215$
   022E                     420 00214$:
   022E AF            [ 4]  421 	xor	a,a
   022F                     422 00215$:
   022F 47            [ 4]  423 	ld	b, a
   0230 DD 7E F7      [19]  424 	ld	a, -9 (ix)
   0233 DD B6 F6      [19]  425 	or	a,-10 (ix)
   0236 20 04         [12]  426 	jr	NZ,00105$
   0238 78            [ 4]  427 	ld	a, b
   0239 B7            [ 4]  428 	or	a, a
   023A 20 10         [12]  429 	jr	NZ,00101$
   023C                     430 00105$:
                            431 ;src/IA.c:165: || c->leftOffSet == 0 && c->peakPoint == val)
   023C DD 6E FC      [19]  432 	ld	l,-4 (ix)
   023F DD 66 FD      [19]  433 	ld	h,-3 (ix)
   0242 4E            [ 7]  434 	ld	c, (hl)
   0243 23            [ 6]  435 	inc	hl
   0244 66            [ 7]  436 	ld	h, (hl)
   0245 7C            [ 4]  437 	ld	a, h
   0246 B1            [ 4]  438 	or	a,c
   0247 20 0D         [12]  439 	jr	NZ,00102$
   0249 B0            [ 4]  440 	or	a,b
   024A 28 0A         [12]  441 	jr	Z,00102$
   024C                     442 00101$:
                            443 ;src/IA.c:167: *grad = SCALA;
   024C 3E 00         [ 7]  444 	ld	a, #0x00
   024E 12            [ 7]  445 	ld	(de), a
   024F 13            [ 6]  446 	inc	de
   0250 3E 01         [ 7]  447 	ld	a, #0x01
   0252 12            [ 7]  448 	ld	(de), a
                            449 ;src/IA.c:168: return;
   0253 C3r85r04      [10]  450 	jp	00140$
   0256                     451 00102$:
                            452 ;src/IA.c:171: if(val <= c->peakPoint && (val >= (c->peakPoint - c->leftOffSet)))
   0256 DD 7E F8      [19]  453 	ld	a, -8 (ix)
   0259 DD 96 FA      [19]  454 	sub	a, -6 (ix)
   025C DD 7E F9      [19]  455 	ld	a, -7 (ix)
   025F DD 9E FB      [19]  456 	sbc	a, -5 (ix)
   0262 3E 00         [ 7]  457 	ld	a, #0x00
   0264 17            [ 4]  458 	rla
   0265 DD 77 F1      [19]  459 	ld	-15 (ix), a
   0268 DD CB F1 46   [20]  460 	bit	0, -15 (ix)
   026C 20 68         [12]  461 	jr	NZ,00111$
   026E DD 7E F8      [19]  462 	ld	a, -8 (ix)
   0271 91            [ 4]  463 	sub	a, c
   0272 47            [ 4]  464 	ld	b, a
   0273 DD 7E F9      [19]  465 	ld	a, -7 (ix)
   0276 9C            [ 4]  466 	sbc	a, h
   0277 6F            [ 4]  467 	ld	l, a
   0278 DD 7E FA      [19]  468 	ld	a, -6 (ix)
   027B 90            [ 4]  469 	sub	a, b
   027C DD 7E FB      [19]  470 	ld	a, -5 (ix)
   027F 9D            [ 4]  471 	sbc	a, l
   0280 38 54         [12]  472 	jr	C,00111$
                            473 ;src/IA.c:173: *grad = SCALA / c->leftOffSet;
   0282 D5            [11]  474 	push	de
   0283 69            [ 4]  475 	ld	l, c
   0284 E5            [11]  476 	push	hl
   0285 21 00 01      [10]  477 	ld	hl, #0x0100
   0288 E5            [11]  478 	push	hl
   0289 CDr00r00      [17]  479 	call	__divuint
   028C F1            [10]  480 	pop	af
   028D F1            [10]  481 	pop	af
   028E 4D            [ 4]  482 	ld	c, l
   028F 44            [ 4]  483 	ld	b, h
   0290 D1            [10]  484 	pop	de
   0291 6B            [ 4]  485 	ld	l, e
   0292 62            [ 4]  486 	ld	h, d
   0293 71            [ 7]  487 	ld	(hl), c
   0294 23            [ 6]  488 	inc	hl
   0295 70            [ 7]  489 	ld	(hl), b
                            490 ;src/IA.c:174: *grad = *grad * (val - (c->peakPoint - c->leftOffSet));
   0296 DD 6E EF      [19]  491 	ld	l,-17 (ix)
   0299 DD 66 F0      [19]  492 	ld	h,-16 (ix)
   029C 7E            [ 7]  493 	ld	a, (hl)
   029D DD 77 F4      [19]  494 	ld	-12 (ix), a
   02A0 23            [ 6]  495 	inc	hl
   02A1 7E            [ 7]  496 	ld	a, (hl)
   02A2 DD 77 F5      [19]  497 	ld	-11 (ix), a
   02A5 DD 6E FC      [19]  498 	ld	l,-4 (ix)
   02A8 DD 66 FD      [19]  499 	ld	h,-3 (ix)
   02AB 7E            [ 7]  500 	ld	a, (hl)
   02AC 23            [ 6]  501 	inc	hl
   02AD 66            [ 7]  502 	ld	h, (hl)
   02AE 6F            [ 4]  503 	ld	l, a
   02AF DD 7E F4      [19]  504 	ld	a, -12 (ix)
   02B2 95            [ 4]  505 	sub	a, l
   02B3 6F            [ 4]  506 	ld	l, a
   02B4 DD 7E F5      [19]  507 	ld	a, -11 (ix)
   02B7 9C            [ 4]  508 	sbc	a, h
   02B8 67            [ 4]  509 	ld	h, a
   02B9 DD 7E ED      [19]  510 	ld	a, -19 (ix)
   02BC 95            [ 4]  511 	sub	a, l
   02BD 6F            [ 4]  512 	ld	l, a
   02BE DD 7E EE      [19]  513 	ld	a, -18 (ix)
   02C1 9C            [ 4]  514 	sbc	a, h
   02C2 67            [ 4]  515 	ld	h, a
   02C3 D5            [11]  516 	push	de
   02C4 E5            [11]  517 	push	hl
   02C5 C5            [11]  518 	push	bc
   02C6 CDr00r00      [17]  519 	call	__mulint
   02C9 F1            [10]  520 	pop	af
   02CA F1            [10]  521 	pop	af
   02CB 4D            [ 4]  522 	ld	c, l
   02CC 44            [ 4]  523 	ld	b, h
   02CD D1            [10]  524 	pop	de
   02CE 79            [ 4]  525 	ld	a, c
   02CF 12            [ 7]  526 	ld	(de), a
   02D0 13            [ 6]  527 	inc	de
   02D1 78            [ 4]  528 	ld	a, b
   02D2 12            [ 7]  529 	ld	(de), a
                            530 ;src/IA.c:175: return;
   02D3 C3r85r04      [10]  531 	jp	00140$
   02D6                     532 00111$:
                            533 ;src/IA.c:176: }else if(val > c->peakPoint && val < (c->peakPoint + c->rightOffSet))
   02D6 DD CB F1 46   [20]  534 	bit	0, -15 (ix)
   02DA 28 55         [12]  535 	jr	Z,00107$
   02DC DD 7E F8      [19]  536 	ld	a, -8 (ix)
   02DF DD 86 F6      [19]  537 	add	a, -10 (ix)
   02E2 4F            [ 4]  538 	ld	c, a
   02E3 DD 7E F9      [19]  539 	ld	a, -7 (ix)
   02E6 DD 8E F7      [19]  540 	adc	a, -9 (ix)
   02E9 47            [ 4]  541 	ld	b, a
   02EA DD 7E FA      [19]  542 	ld	a, -6 (ix)
   02ED 91            [ 4]  543 	sub	a, c
   02EE DD 7E FB      [19]  544 	ld	a, -5 (ix)
   02F1 98            [ 4]  545 	sbc	a, b
   02F2 30 3D         [12]  546 	jr	NC,00107$
                            547 ;src/IA.c:178: *grad = SCALA/-c->rightOffSet;
   02F4 6B            [ 4]  548 	ld	l, e
   02F5 62            [ 4]  549 	ld	h, d
   02F6 DD 7E F2      [19]  550 	ld	a, -14 (ix)
   02F9 77            [ 7]  551 	ld	(hl), a
   02FA 23            [ 6]  552 	inc	hl
   02FB DD 7E F3      [19]  553 	ld	a, -13 (ix)
   02FE 77            [ 7]  554 	ld	(hl), a
                            555 ;src/IA.c:179: *grad = *grad * (val- c->peakPoint) + SCALA;
   02FF DD 6E EF      [19]  556 	ld	l,-17 (ix)
   0302 DD 66 F0      [19]  557 	ld	h,-16 (ix)
   0305 4E            [ 7]  558 	ld	c, (hl)
   0306 23            [ 6]  559 	inc	hl
   0307 46            [ 7]  560 	ld	b, (hl)
   0308 DD 7E ED      [19]  561 	ld	a, -19 (ix)
   030B 91            [ 4]  562 	sub	a, c
   030C 4F            [ 4]  563 	ld	c, a
   030D DD 7E EE      [19]  564 	ld	a, -18 (ix)
   0310 98            [ 4]  565 	sbc	a, b
   0311 47            [ 4]  566 	ld	b, a
   0312 D5            [11]  567 	push	de
   0313 C5            [11]  568 	push	bc
   0314 DD 6E F2      [19]  569 	ld	l,-14 (ix)
   0317 DD 66 F3      [19]  570 	ld	h,-13 (ix)
   031A E5            [11]  571 	push	hl
   031B CDr00r00      [17]  572 	call	__mulint
   031E F1            [10]  573 	pop	af
   031F F1            [10]  574 	pop	af
   0320 4D            [ 4]  575 	ld	c, l
   0321 44            [ 4]  576 	ld	b, h
   0322 D1            [10]  577 	pop	de
   0323 21 00 01      [10]  578 	ld	hl, #0x0100
   0326 09            [11]  579 	add	hl,bc
   0327 4D            [ 4]  580 	ld	c, l
   0328 44            [ 4]  581 	ld	b, h
   0329 79            [ 4]  582 	ld	a, c
   032A 12            [ 7]  583 	ld	(de), a
   032B 13            [ 6]  584 	inc	de
   032C 78            [ 4]  585 	ld	a, b
   032D 12            [ 7]  586 	ld	(de), a
                            587 ;src/IA.c:180: return;
   032E C3r85r04      [10]  588 	jp	00140$
   0331                     589 00107$:
                            590 ;src/IA.c:183: *grad = 0;
   0331 3E 00         [ 7]  591 	ld	a, #0x00
   0333 12            [ 7]  592 	ld	(de), a
   0334 13            [ 6]  593 	inc	de
   0335 3E 00         [ 7]  594 	ld	a, #0x00
   0337 12            [ 7]  595 	ld	(de), a
                            596 ;src/IA.c:184: return;
   0338 C3r85r04      [10]  597 	jp	00140$
   033B                     598 00138$:
                            599 ;src/IA.c:189: u8 midPoint = ((c->peakPoint + c->rightOffSet)- c->rightOffSet);
   033B DD 6E F8      [19]  600 	ld	l, -8 (ix)
   033E DD 7E F6      [19]  601 	ld	a, -10 (ix)
   0341 DD 77 F4      [19]  602 	ld	-12 (ix), a
   0344 7D            [ 4]  603 	ld	a, l
   0345 DD 86 F4      [19]  604 	add	a, -12 (ix)
   0348 DD 96 F4      [19]  605 	sub	a, -12 (ix)
   034B 47            [ 4]  606 	ld	b, a
                            607 ;src/IA.c:187: }else if(c->tipo == 1)
   034C 0D            [ 4]  608 	dec	c
   034D C2rDDr03      [10]  609 	jp	NZ,00135$
                            610 ;src/IA.c:189: u8 midPoint = ((c->peakPoint + c->rightOffSet)- c->rightOffSet);
   0350 48            [ 4]  611 	ld	c, b
                            612 ;src/IA.c:192: if(c->rightOffSet == 0 && val == midPoint){
   0351 DD 7E F7      [19]  613 	ld	a, -9 (ix)
   0354 DD B6 F6      [19]  614 	or	a,-10 (ix)
   0357 20 0E         [12]  615 	jr	NZ,00115$
   0359 DD 7E 06      [19]  616 	ld	a, 6 (ix)
                            617 ;src/IA.c:193: *grad = SCALA;
   035C 91            [ 4]  618 	sub	a,c
   035D 20 08         [12]  619 	jr	NZ,00115$
   035F 12            [ 7]  620 	ld	(de), a
   0360 13            [ 6]  621 	inc	de
   0361 3E 01         [ 7]  622 	ld	a, #0x01
   0363 12            [ 7]  623 	ld	(de), a
                            624 ;src/IA.c:194: return;
   0364 C3r85r04      [10]  625 	jp	00140$
   0367                     626 00115$:
                            627 ;src/IA.c:197: if(val >= midPoint && (val < (midPoint + c->rightOffSet)))
   0367 DD 7E 06      [19]  628 	ld	a, 6 (ix)
   036A 91            [ 4]  629 	sub	a, c
   036B 3E 00         [ 7]  630 	ld	a, #0x00
   036D 17            [ 4]  631 	rla
   036E DD 77 F4      [19]  632 	ld	-12 (ix), a
   0371 DD CB F4 46   [20]  633 	bit	0, -12 (ix)
   0375 20 4C         [12]  634 	jr	NZ,00121$
   0377 06 00         [ 7]  635 	ld	b, #0x00
   0379 DD 6E F6      [19]  636 	ld	l,-10 (ix)
   037C DD 66 F7      [19]  637 	ld	h,-9 (ix)
   037F 09            [11]  638 	add	hl, bc
   0380 DD 7E FA      [19]  639 	ld	a, -6 (ix)
   0383 95            [ 4]  640 	sub	a, l
   0384 DD 7E FB      [19]  641 	ld	a, -5 (ix)
   0387 9C            [ 4]  642 	sbc	a, h
   0388 30 39         [12]  643 	jr	NC,00121$
                            644 ;src/IA.c:199: *grad = SCALA/-c->rightOffSet;
   038A 6B            [ 4]  645 	ld	l, e
   038B 62            [ 4]  646 	ld	h, d
   038C DD 7E F2      [19]  647 	ld	a, -14 (ix)
   038F 77            [ 7]  648 	ld	(hl), a
   0390 23            [ 6]  649 	inc	hl
   0391 DD 7E F3      [19]  650 	ld	a, -13 (ix)
   0394 77            [ 7]  651 	ld	(hl), a
                            652 ;src/IA.c:200: *grad = *grad*(val-(midPoint + c->rightOffSet));
   0395 DD 6E FE      [19]  653 	ld	l,-2 (ix)
   0398 DD 66 FF      [19]  654 	ld	h,-1 (ix)
   039B 7E            [ 7]  655 	ld	a, (hl)
   039C 23            [ 6]  656 	inc	hl
   039D 66            [ 7]  657 	ld	h, (hl)
   039E 6F            [ 4]  658 	ld	l, a
   039F 09            [11]  659 	add	hl, bc
   03A0 DD 7E ED      [19]  660 	ld	a, -19 (ix)
   03A3 95            [ 4]  661 	sub	a, l
   03A4 4F            [ 4]  662 	ld	c, a
   03A5 DD 7E EE      [19]  663 	ld	a, -18 (ix)
   03A8 9C            [ 4]  664 	sbc	a, h
   03A9 47            [ 4]  665 	ld	b, a
   03AA D5            [11]  666 	push	de
   03AB C5            [11]  667 	push	bc
   03AC DD 6E F2      [19]  668 	ld	l,-14 (ix)
   03AF DD 66 F3      [19]  669 	ld	h,-13 (ix)
   03B2 E5            [11]  670 	push	hl
   03B3 CDr00r00      [17]  671 	call	__mulint
   03B6 F1            [10]  672 	pop	af
   03B7 F1            [10]  673 	pop	af
   03B8 4D            [ 4]  674 	ld	c, l
   03B9 44            [ 4]  675 	ld	b, h
   03BA D1            [10]  676 	pop	de
   03BB 79            [ 4]  677 	ld	a, c
   03BC 12            [ 7]  678 	ld	(de), a
   03BD 13            [ 6]  679 	inc	de
   03BE 78            [ 4]  680 	ld	a, b
   03BF 12            [ 7]  681 	ld	(de), a
                            682 ;src/IA.c:201: return;
   03C0 C3r85r04      [10]  683 	jp	00140$
   03C3                     684 00121$:
                            685 ;src/IA.c:202: }else if(val < midPoint)
   03C3 DD CB F4 46   [20]  686 	bit	0, -12 (ix)
   03C7 28 0A         [12]  687 	jr	Z,00118$
                            688 ;src/IA.c:204: *grad = SCALA;
   03C9 3E 00         [ 7]  689 	ld	a, #0x00
   03CB 12            [ 7]  690 	ld	(de), a
   03CC 13            [ 6]  691 	inc	de
   03CD 3E 01         [ 7]  692 	ld	a, #0x01
   03CF 12            [ 7]  693 	ld	(de), a
                            694 ;src/IA.c:205: return;
   03D0 C3r85r04      [10]  695 	jp	00140$
   03D3                     696 00118$:
                            697 ;src/IA.c:207: *grad = 0;
   03D3 3E 00         [ 7]  698 	ld	a, #0x00
   03D5 12            [ 7]  699 	ld	(de), a
   03D6 13            [ 6]  700 	inc	de
   03D7 3E 00         [ 7]  701 	ld	a, #0x00
   03D9 12            [ 7]  702 	ld	(de), a
                            703 ;src/IA.c:208: return;
   03DA C3r85r04      [10]  704 	jp	00140$
   03DD                     705 00135$:
                            706 ;src/IA.c:212: u8 midPoint = ((c->peakPoint + c->rightOffSet)- c->rightOffSet);
                            707 ;src/IA.c:214: if(c->leftOffSet == 0 && val == midPoint)
   03DD DD 6E FC      [19]  708 	ld	l,-4 (ix)
   03E0 DD 66 FD      [19]  709 	ld	h,-3 (ix)
   03E3 4E            [ 7]  710 	ld	c, (hl)
   03E4 23            [ 6]  711 	inc	hl
   03E5 7E            [ 7]  712 	ld	a, (hl)
   03E6 B1            [ 4]  713 	or	a,c
   03E7 20 0D         [12]  714 	jr	NZ,00125$
   03E9 DD 7E 06      [19]  715 	ld	a, 6 (ix)
   03EC 90            [ 4]  716 	sub	a, b
   03ED 20 07         [12]  717 	jr	NZ,00125$
                            718 ;src/IA.c:215: *grad = SCALA;
   03EF 6B            [ 4]  719 	ld	l, e
   03F0 62            [ 4]  720 	ld	h, d
   03F1 36 00         [10]  721 	ld	(hl), #0x00
   03F3 23            [ 6]  722 	inc	hl
   03F4 36 01         [10]  723 	ld	(hl), #0x01
   03F6                     724 00125$:
                            725 ;src/IA.c:216: if(val <= midPoint && (val > (midPoint - c->leftOffSet)))
   03F6 78            [ 4]  726 	ld	a, b
   03F7 DD 96 06      [19]  727 	sub	a, 6 (ix)
   03FA 3E 00         [ 7]  728 	ld	a, #0x00
   03FC 17            [ 4]  729 	rla
   03FD DD 77 F4      [19]  730 	ld	-12 (ix), a
   0400 DD CB F4 46   [20]  731 	bit	0, -12 (ix)
   0404 20 69         [12]  732 	jr	NZ,00131$
   0406 0E 00         [ 7]  733 	ld	c, #0x00
   0408 DD 6E FC      [19]  734 	ld	l,-4 (ix)
   040B DD 66 FD      [19]  735 	ld	h,-3 (ix)
   040E 7E            [ 7]  736 	ld	a, (hl)
   040F 23            [ 6]  737 	inc	hl
   0410 66            [ 7]  738 	ld	h, (hl)
   0411 6F            [ 4]  739 	ld	l, a
   0412 DD 70 F2      [19]  740 	ld	-14 (ix), b
   0415 DD 71 F3      [19]  741 	ld	-13 (ix), c
   0418 DD 7E F2      [19]  742 	ld	a, -14 (ix)
   041B 95            [ 4]  743 	sub	a, l
   041C 4F            [ 4]  744 	ld	c, a
   041D DD 7E F3      [19]  745 	ld	a, -13 (ix)
   0420 9C            [ 4]  746 	sbc	a, h
   0421 47            [ 4]  747 	ld	b, a
   0422 79            [ 4]  748 	ld	a, c
   0423 DD 96 FA      [19]  749 	sub	a, -6 (ix)
   0426 78            [ 4]  750 	ld	a, b
   0427 DD 9E FB      [19]  751 	sbc	a, -5 (ix)
   042A 30 43         [12]  752 	jr	NC,00131$
                            753 ;src/IA.c:218: *grad = SCALA/c->leftOffSet;
   042C D5            [11]  754 	push	de
   042D E5            [11]  755 	push	hl
   042E 21 00 01      [10]  756 	ld	hl, #0x0100
   0431 E5            [11]  757 	push	hl
   0432 CDr00r00      [17]  758 	call	__divuint
   0435 F1            [10]  759 	pop	af
   0436 F1            [10]  760 	pop	af
   0437 4D            [ 4]  761 	ld	c, l
   0438 44            [ 4]  762 	ld	b, h
   0439 D1            [10]  763 	pop	de
   043A 6B            [ 4]  764 	ld	l, e
   043B 62            [ 4]  765 	ld	h, d
   043C 71            [ 7]  766 	ld	(hl), c
   043D 23            [ 6]  767 	inc	hl
   043E 70            [ 7]  768 	ld	(hl), b
                            769 ;src/IA.c:219: *grad = *grad*(val-(midPoint - c->leftOffSet));
   043F DD 6E FC      [19]  770 	ld	l,-4 (ix)
   0442 DD 66 FD      [19]  771 	ld	h,-3 (ix)
   0445 7E            [ 7]  772 	ld	a, (hl)
   0446 23            [ 6]  773 	inc	hl
   0447 66            [ 7]  774 	ld	h, (hl)
   0448 6F            [ 4]  775 	ld	l, a
   0449 DD 7E F2      [19]  776 	ld	a, -14 (ix)
   044C 95            [ 4]  777 	sub	a, l
   044D 6F            [ 4]  778 	ld	l, a
   044E DD 7E F3      [19]  779 	ld	a, -13 (ix)
   0451 9C            [ 4]  780 	sbc	a, h
   0452 67            [ 4]  781 	ld	h, a
   0453 DD 7E ED      [19]  782 	ld	a, -19 (ix)
   0456 95            [ 4]  783 	sub	a, l
   0457 6F            [ 4]  784 	ld	l, a
   0458 DD 7E EE      [19]  785 	ld	a, -18 (ix)
   045B 9C            [ 4]  786 	sbc	a, h
   045C 67            [ 4]  787 	ld	h, a
   045D D5            [11]  788 	push	de
   045E E5            [11]  789 	push	hl
   045F C5            [11]  790 	push	bc
   0460 CDr00r00      [17]  791 	call	__mulint
   0463 F1            [10]  792 	pop	af
   0464 F1            [10]  793 	pop	af
   0465 4D            [ 4]  794 	ld	c, l
   0466 44            [ 4]  795 	ld	b, h
   0467 D1            [10]  796 	pop	de
   0468 79            [ 4]  797 	ld	a, c
   0469 12            [ 7]  798 	ld	(de), a
   046A 13            [ 6]  799 	inc	de
   046B 78            [ 4]  800 	ld	a, b
   046C 12            [ 7]  801 	ld	(de), a
   046D 18 16         [12]  802 	jr	00140$
   046F                     803 00131$:
                            804 ;src/IA.c:220: }else if(val > midPoint)
   046F DD CB F4 46   [20]  805 	bit	0, -12 (ix)
   0473 28 09         [12]  806 	jr	Z,00128$
                            807 ;src/IA.c:223: *grad = SCALA;
   0475 3E 00         [ 7]  808 	ld	a, #0x00
   0477 12            [ 7]  809 	ld	(de), a
   0478 13            [ 6]  810 	inc	de
   0479 3E 01         [ 7]  811 	ld	a, #0x01
   047B 12            [ 7]  812 	ld	(de), a
   047C 18 07         [12]  813 	jr	00140$
   047E                     814 00128$:
                            815 ;src/IA.c:225: *grad = 0;
   047E 3E 00         [ 7]  816 	ld	a, #0x00
   0480 12            [ 7]  817 	ld	(de), a
   0481 13            [ 6]  818 	inc	de
   0482 3E 00         [ 7]  819 	ld	a, #0x00
   0484 12            [ 7]  820 	ld	(de), a
   0485                     821 00140$:
   0485 DD F9         [10]  822 	ld	sp, ix
   0487 DD E1         [14]  823 	pop	ix
   0489 C9            [10]  824 	ret
                            825 ;src/IA.c:232: void defuzzi(u16 val, b_direccion* direccion, i16* re)
                            826 ;	---------------------------------
                            827 ; Function defuzzi
                            828 ; ---------------------------------
   048A                     829 _defuzzi::
   048A DD E5         [15]  830 	push	ix
   048C DD 21 00 00   [14]  831 	ld	ix,#0
   0490 DD 39         [15]  832 	add	ix,sp
   0492 21 EF FF      [10]  833 	ld	hl, #-17
   0495 39            [11]  834 	add	hl, sp
   0496 F9            [ 6]  835 	ld	sp, hl
                            836 ;src/IA.c:239: *re = 0;
   0497 DD 7E 08      [19]  837 	ld	a, 8 (ix)
   049A DD 77 FC      [19]  838 	ld	-4 (ix), a
   049D DD 7E 09      [19]  839 	ld	a, 9 (ix)
   04A0 DD 77 FD      [19]  840 	ld	-3 (ix), a
   04A3 DD 6E FC      [19]  841 	ld	l,-4 (ix)
   04A6 DD 66 FD      [19]  842 	ld	h,-3 (ix)
   04A9 AF            [ 4]  843 	xor	a, a
   04AA 77            [ 7]  844 	ld	(hl), a
   04AB 23            [ 6]  845 	inc	hl
   04AC 77            [ 7]  846 	ld	(hl), a
                            847 ;src/IA.c:241: while(i < 3)
   04AD 21 01 00      [10]  848 	ld	hl, #0x0001
   04B0 39            [11]  849 	add	hl, sp
   04B1 DD 75 FE      [19]  850 	ld	-2 (ix), l
   04B4 DD 74 FF      [19]  851 	ld	-1 (ix), h
   04B7 0E 00         [ 7]  852 	ld	c, #0x00
   04B9                     853 00101$:
   04B9 79            [ 4]  854 	ld	a, c
   04BA D6 03         [ 7]  855 	sub	a, #0x03
   04BC 30 53         [12]  856 	jr	NC,00103$
                            857 ;src/IA.c:243: dom = 0;
   04BE DD 36 F6 00   [19]  858 	ld	-10 (ix), #0x00
   04C2 DD 36 F7 00   [19]  859 	ld	-9 (ix), #0x00
                            860 ;src/IA.c:244: calculateDom(fmems[i], val, &dom);
   04C6 21 07 00      [10]  861 	ld	hl, #0x0007
   04C9 39            [11]  862 	add	hl, sp
   04CA DD 75 FA      [19]  863 	ld	-6 (ix), l
   04CD DD 74 FB      [19]  864 	ld	-5 (ix), h
   04D0 DD 46 04      [19]  865 	ld	b, 4 (ix)
   04D3 69            [ 4]  866 	ld	l, c
   04D4 26 00         [ 7]  867 	ld	h, #0x00
   04D6 29            [11]  868 	add	hl, hl
   04D7 EB            [ 4]  869 	ex	de,hl
   04D8 21r0Cr00      [10]  870 	ld	hl, #_fmems
   04DB 19            [11]  871 	add	hl, de
   04DC 7E            [ 7]  872 	ld	a, (hl)
   04DD DD 77 F8      [19]  873 	ld	-8 (ix), a
   04E0 23            [ 6]  874 	inc	hl
   04E1 7E            [ 7]  875 	ld	a, (hl)
   04E2 DD 77 F9      [19]  876 	ld	-7 (ix), a
   04E5 C5            [11]  877 	push	bc
   04E6 D5            [11]  878 	push	de
   04E7 DD 6E FA      [19]  879 	ld	l,-6 (ix)
   04EA DD 66 FB      [19]  880 	ld	h,-5 (ix)
   04ED E5            [11]  881 	push	hl
   04EE C5            [11]  882 	push	bc
   04EF 33            [ 6]  883 	inc	sp
   04F0 DD 6E F8      [19]  884 	ld	l,-8 (ix)
   04F3 DD 66 F9      [19]  885 	ld	h,-7 (ix)
   04F6 E5            [11]  886 	push	hl
   04F7 CDr64r01      [17]  887 	call	_calculateDom
   04FA F1            [10]  888 	pop	af
   04FB F1            [10]  889 	pop	af
   04FC 33            [ 6]  890 	inc	sp
   04FD D1            [10]  891 	pop	de
   04FE C1            [10]  892 	pop	bc
                            893 ;src/IA.c:245: vDom[i] = dom/SCALA;
   04FF DD 6E FE      [19]  894 	ld	l,-2 (ix)
   0502 DD 66 FF      [19]  895 	ld	h,-1 (ix)
   0505 19            [11]  896 	add	hl, de
   0506 DD 5E F7      [19]  897 	ld	e, -9 (ix)
   0509 06 00         [ 7]  898 	ld	b, #0x00
   050B 73            [ 7]  899 	ld	(hl), e
   050C 23            [ 6]  900 	inc	hl
   050D 70            [ 7]  901 	ld	(hl), b
                            902 ;src/IA.c:246: i++;
   050E 0C            [ 4]  903 	inc	c
   050F 18 A8         [12]  904 	jr	00101$
   0511                     905 00103$:
                            906 ;src/IA.c:250: for(i = 0; i<3; i++)
   0511 DD 7E FE      [19]  907 	ld	a, -2 (ix)
   0514 DD 77 F8      [19]  908 	ld	-8 (ix), a
   0517 DD 7E FF      [19]  909 	ld	a, -1 (ix)
   051A DD 77 F9      [19]  910 	ld	-7 (ix), a
   051D DD 36 EF 00   [19]  911 	ld	-17 (ix), #0x00
   0521                     912 00108$:
                            913 ;src/IA.c:252: *re = ((vDom[i] * aceleracion[i]) + *re);
   0521 DD 6E EF      [19]  914 	ld	l, -17 (ix)
   0524 26 00         [ 7]  915 	ld	h, #0x00
   0526 29            [11]  916 	add	hl, hl
   0527 4D            [ 4]  917 	ld	c, l
   0528 44            [ 4]  918 	ld	b, h
   0529 DD 6E F8      [19]  919 	ld	l,-8 (ix)
   052C DD 66 F9      [19]  920 	ld	h,-7 (ix)
   052F 09            [11]  921 	add	hl, bc
   0530 5E            [ 7]  922 	ld	e, (hl)
   0531 23            [ 6]  923 	inc	hl
   0532 56            [ 7]  924 	ld	d, (hl)
   0533 21r00r00      [10]  925 	ld	hl, #_aceleracion
   0536 09            [11]  926 	add	hl, bc
   0537 4E            [ 7]  927 	ld	c, (hl)
   0538 23            [ 6]  928 	inc	hl
   0539 46            [ 7]  929 	ld	b, (hl)
   053A C5            [11]  930 	push	bc
   053B D5            [11]  931 	push	de
   053C CDr00r00      [17]  932 	call	__mulint
   053F F1            [10]  933 	pop	af
   0540 F1            [10]  934 	pop	af
   0541 4D            [ 4]  935 	ld	c, l
   0542 44            [ 4]  936 	ld	b, h
   0543 DD 6E FC      [19]  937 	ld	l,-4 (ix)
   0546 DD 66 FD      [19]  938 	ld	h,-3 (ix)
   0549 5E            [ 7]  939 	ld	e, (hl)
   054A 23            [ 6]  940 	inc	hl
   054B 66            [ 7]  941 	ld	h, (hl)
   054C 6B            [ 4]  942 	ld	l, e
   054D 09            [11]  943 	add	hl,bc
   054E 4D            [ 4]  944 	ld	c, l
   054F 44            [ 4]  945 	ld	b, h
   0550 DD 6E FC      [19]  946 	ld	l,-4 (ix)
   0553 DD 66 FD      [19]  947 	ld	h,-3 (ix)
   0556 71            [ 7]  948 	ld	(hl), c
   0557 23            [ 6]  949 	inc	hl
   0558 70            [ 7]  950 	ld	(hl), b
                            951 ;src/IA.c:250: for(i = 0; i<3; i++)
   0559 DD 34 EF      [23]  952 	inc	-17 (ix)
   055C DD 7E EF      [19]  953 	ld	a, -17 (ix)
   055F D6 03         [ 7]  954 	sub	a, #0x03
   0561 38 BE         [12]  955 	jr	C,00108$
                            956 ;src/IA.c:255: if(direccion->b_izq)
   0563 DD 6E 06      [19]  957 	ld	l,6 (ix)
   0566 DD 66 07      [19]  958 	ld	h,7 (ix)
   0569 23            [ 6]  959 	inc	hl
   056A 7E            [ 7]  960 	ld	a, (hl)
                            961 ;src/IA.c:252: *re = ((vDom[i] * aceleracion[i]) + *re);
   056B DD 6E FC      [19]  962 	ld	l,-4 (ix)
   056E DD 66 FD      [19]  963 	ld	h,-3 (ix)
   0571 5E            [ 7]  964 	ld	e, (hl)
   0572 23            [ 6]  965 	inc	hl
   0573 56            [ 7]  966 	ld	d, (hl)
                            967 ;src/IA.c:255: if(direccion->b_izq)
   0574 B7            [ 4]  968 	or	a, a
   0575 28 0B         [12]  969 	jr	Z,00106$
                            970 ;src/IA.c:256: *re = *re;
   0577 DD 6E FC      [19]  971 	ld	l,-4 (ix)
   057A DD 66 FD      [19]  972 	ld	h,-3 (ix)
   057D 73            [ 7]  973 	ld	(hl), e
   057E 23            [ 6]  974 	inc	hl
   057F 72            [ 7]  975 	ld	(hl), d
   0580 18 10         [12]  976 	jr	00110$
   0582                     977 00106$:
                            978 ;src/IA.c:259: *re = -*re;
   0582 AF            [ 4]  979 	xor	a, a
   0583 93            [ 4]  980 	sub	a, e
   0584 5F            [ 4]  981 	ld	e, a
   0585 3E 00         [ 7]  982 	ld	a, #0x00
   0587 9A            [ 4]  983 	sbc	a, d
   0588 4F            [ 4]  984 	ld	c, a
   0589 DD 6E FC      [19]  985 	ld	l,-4 (ix)
   058C DD 66 FD      [19]  986 	ld	h,-3 (ix)
   058F 73            [ 7]  987 	ld	(hl), e
   0590 23            [ 6]  988 	inc	hl
   0591 71            [ 7]  989 	ld	(hl), c
   0592                     990 00110$:
   0592 DD F9         [10]  991 	ld	sp, ix
   0594 DD E1         [14]  992 	pop	ix
   0596 C9            [10]  993 	ret
                            994 ;src/IA.c:264: void calcule(u8 tam, u8 dis, u16 *re)
                            995 ;	---------------------------------
                            996 ; Function calcule
                            997 ; ---------------------------------
   0597                     998 _calcule::
   0597 DD E5         [15]  999 	push	ix
   0599 DD 21 00 00   [14] 1000 	ld	ix,#0
   059D DD 39         [15] 1001 	add	ix,sp
   059F F5            [11] 1002 	push	af
   05A0 3B            [ 6] 1003 	dec	sp
                           1004 ;src/IA.c:268: resultadoDistoball = 0;
   05A1 DD 36 FE 00   [19] 1005 	ld	-2 (ix), #0x00
   05A5 DD 36 FF 00   [19] 1006 	ld	-1 (ix), #0x00
                           1007 ;src/IA.c:269: for(i = 0 ; i<tam; i++){
   05A9 DD 36 FD 00   [19] 1008 	ld	-3 (ix), #0x00
   05AD                    1009 00103$:
   05AD DD 7E FD      [19] 1010 	ld	a, -3 (ix)
   05B0 DD 96 04      [19] 1011 	sub	a, 4 (ix)
   05B3 30 65         [12] 1012 	jr	NC,00105$
                           1013 ;src/IA.c:270: calculateDom(vRulesx[i]->antecedent, dis, &resultadoDistoball);
   05B5 FD 21 01 00   [14] 1014 	ld	iy,#0x0001
   05B9 FD 39         [15] 1015 	add	iy,sp
   05BB DD 6E FD      [19] 1016 	ld	l, -3 (ix)
   05BE 26 00         [ 7] 1017 	ld	h, #0x00
   05C0 29            [11] 1018 	add	hl, hl
   05C1 01r00r00      [10] 1019 	ld	bc,#_vRulesx
   05C4 09            [11] 1020 	add	hl,bc
   05C5 4D            [ 4] 1021 	ld	c,l
   05C6 44            [ 4] 1022 	ld	b,h
   05C7 7E            [ 7] 1023 	ld	a, (hl)
   05C8 23            [ 6] 1024 	inc	hl
   05C9 66            [ 7] 1025 	ld	h, (hl)
   05CA 6F            [ 4] 1026 	ld	l, a
   05CB 5E            [ 7] 1027 	ld	e, (hl)
   05CC 23            [ 6] 1028 	inc	hl
   05CD 56            [ 7] 1029 	ld	d, (hl)
   05CE C5            [11] 1030 	push	bc
   05CF FD E5         [15] 1031 	push	iy
   05D1 DD 7E 05      [19] 1032 	ld	a, 5 (ix)
   05D4 F5            [11] 1033 	push	af
   05D5 33            [ 6] 1034 	inc	sp
   05D6 D5            [11] 1035 	push	de
   05D7 CDr64r01      [17] 1036 	call	_calculateDom
   05DA F1            [10] 1037 	pop	af
   05DB F1            [10] 1038 	pop	af
   05DC 33            [ 6] 1039 	inc	sp
   05DD C1            [10] 1040 	pop	bc
                           1041 ;src/IA.c:271: *re = ((vRulesx[i]->consequent->valorRepresent * resultadoDistoball ) + *re)/SCALA;
   05DE DD 5E 06      [19] 1042 	ld	e,6 (ix)
   05E1 DD 56 07      [19] 1043 	ld	d,7 (ix)
   05E4 69            [ 4] 1044 	ld	l, c
   05E5 60            [ 4] 1045 	ld	h, b
   05E6 7E            [ 7] 1046 	ld	a, (hl)
   05E7 23            [ 6] 1047 	inc	hl
   05E8 66            [ 7] 1048 	ld	h, (hl)
   05E9 6F            [ 4] 1049 	ld	l, a
   05EA 23            [ 6] 1050 	inc	hl
   05EB 23            [ 6] 1051 	inc	hl
   05EC 7E            [ 7] 1052 	ld	a, (hl)
   05ED 23            [ 6] 1053 	inc	hl
   05EE 66            [ 7] 1054 	ld	h, (hl)
   05EF 6F            [ 4] 1055 	ld	l, a
   05F0 23            [ 6] 1056 	inc	hl
   05F1 23            [ 6] 1057 	inc	hl
   05F2 4E            [ 7] 1058 	ld	c, (hl)
   05F3 23            [ 6] 1059 	inc	hl
   05F4 46            [ 7] 1060 	ld	b, (hl)
   05F5 D5            [11] 1061 	push	de
   05F6 DD 6E FE      [19] 1062 	ld	l,-2 (ix)
   05F9 DD 66 FF      [19] 1063 	ld	h,-1 (ix)
   05FC E5            [11] 1064 	push	hl
   05FD C5            [11] 1065 	push	bc
   05FE CDr00r00      [17] 1066 	call	__mulint
   0601 F1            [10] 1067 	pop	af
   0602 F1            [10] 1068 	pop	af
   0603 4D            [ 4] 1069 	ld	c, l
   0604 44            [ 4] 1070 	ld	b, h
   0605 D1            [10] 1071 	pop	de
   0606 6B            [ 4] 1072 	ld	l, e
   0607 62            [ 4] 1073 	ld	h, d
   0608 7E            [ 7] 1074 	ld	a, (hl)
   0609 23            [ 6] 1075 	inc	hl
   060A 66            [ 7] 1076 	ld	h, (hl)
   060B 6F            [ 4] 1077 	ld	l, a
   060C 09            [11] 1078 	add	hl, bc
   060D 4C            [ 4] 1079 	ld	c, h
   060E 06 00         [ 7] 1080 	ld	b, #0x00
   0610 79            [ 4] 1081 	ld	a, c
   0611 12            [ 7] 1082 	ld	(de), a
   0612 13            [ 6] 1083 	inc	de
   0613 78            [ 4] 1084 	ld	a, b
   0614 12            [ 7] 1085 	ld	(de), a
                           1086 ;src/IA.c:269: for(i = 0 ; i<tam; i++){
   0615 DD 34 FD      [23] 1087 	inc	-3 (ix)
   0618 18 93         [12] 1088 	jr	00103$
   061A                    1089 00105$:
   061A DD F9         [10] 1090 	ld	sp, ix
   061C DD E1         [14] 1091 	pop	ix
   061E C9            [10] 1092 	ret
                           1093 ;src/IA.c:275: void calcularb_direc(i16 totalxb, b_direccion* ball)
                           1094 ;	---------------------------------
                           1095 ; Function calcularb_direc
                           1096 ; ---------------------------------
   061F                    1097 _calcularb_direc::
                           1098 ;src/IA.c:277: ball->b_izq = 0;
   061F 21 04 00      [10] 1099 	ld	hl, #4
   0622 39            [11] 1100 	add	hl, sp
   0623 4E            [ 7] 1101 	ld	c, (hl)
   0624 23            [ 6] 1102 	inc	hl
   0625 46            [ 7] 1103 	ld	b, (hl)
   0626 59            [ 4] 1104 	ld	e, c
   0627 50            [ 4] 1105 	ld	d, b
   0628 13            [ 6] 1106 	inc	de
   0629 AF            [ 4] 1107 	xor	a, a
   062A 12            [ 7] 1108 	ld	(de), a
                           1109 ;src/IA.c:278: ball->b_der = 0;
   062B AF            [ 4] 1110 	xor	a, a
   062C 02            [ 7] 1111 	ld	(bc), a
                           1112 ;src/IA.c:280: if(totalxb < 0){
   062D 21 03 00      [10] 1113 	ld	hl, #2+1
   0630 39            [11] 1114 	add	hl, sp
   0631 CB 7E         [12] 1115 	bit	7, (hl)
   0633 28 06         [12] 1116 	jr	Z,00104$
                           1117 ;src/IA.c:281: ball->b_der = 1;
   0635 3E 01         [ 7] 1118 	ld	a, #0x01
   0637 02            [ 7] 1119 	ld	(bc), a
                           1120 ;src/IA.c:282: ball->b_izq = 0;
   0638 AF            [ 4] 1121 	xor	a, a
   0639 12            [ 7] 1122 	ld	(de), a
   063A C9            [10] 1123 	ret
   063B                    1124 00104$:
                           1125 ;src/IA.c:283: }else if(totalxb > 0)
   063B AF            [ 4] 1126 	xor	a, a
   063C FD 21 02 00   [14] 1127 	ld	iy, #2
   0640 FD 39         [15] 1128 	add	iy, sp
   0642 FD BE 00      [19] 1129 	cp	a, 0 (iy)
   0645 FD 9E 01      [19] 1130 	sbc	a, 1 (iy)
   0648 E2r4Dr06      [10] 1131 	jp	PO, 00116$
   064B EE 80         [ 7] 1132 	xor	a, #0x80
   064D                    1133 00116$:
   064D F0            [11] 1134 	ret	P
                           1135 ;src/IA.c:285: ball->b_izq = 1;
   064E 3E 01         [ 7] 1136 	ld	a, #0x01
   0650 12            [ 7] 1137 	ld	(de), a
                           1138 ;src/IA.c:286: ball->b_der = 0;
   0651 AF            [ 4] 1139 	xor	a, a
   0652 02            [ 7] 1140 	ld	(bc), a
   0653 C9            [10] 1141 	ret
                           1142 ;src/IA.c:291: void fuzzificacion(i16 *ax, i16 *ay, u8 ballx, u8 bally, u8 pingu_enemyx, u8 pingu_enemyy){
                           1143 ;	---------------------------------
                           1144 ; Function fuzzificacion
                           1145 ; ---------------------------------
   0654                    1146 _fuzzificacion::
   0654 DD E5         [15] 1147 	push	ix
   0656 DD 21 00 00   [14] 1148 	ld	ix,#0
   065A DD 39         [15] 1149 	add	ix,sp
   065C 21 EE FF      [10] 1150 	ld	hl, #-18
   065F 39            [11] 1151 	add	hl, sp
   0660 F9            [ 6] 1152 	ld	sp, hl
                           1153 ;src/IA.c:299: ball = &ballX;
   0661 21 06 00      [10] 1154 	ld	hl, #0x0006
   0664 39            [11] 1155 	add	hl, sp
   0665 DD 75 FA      [19] 1156 	ld	-6 (ix), l
   0668 DD 74 FB      [19] 1157 	ld	-5 (ix), h
   066B 4D            [ 4] 1158 	ld	c, l
   066C 44            [ 4] 1159 	ld	b, h
                           1160 ;src/IA.c:300: x = ballx - pingu_enemyx;
   066D DD 5E 08      [19] 1161 	ld	e, 8 (ix)
   0670 16 00         [ 7] 1162 	ld	d, #0x00
   0672 DD 6E 0A      [19] 1163 	ld	l, 10 (ix)
   0675 26 00         [ 7] 1164 	ld	h, #0x00
   0677 7B            [ 4] 1165 	ld	a, e
   0678 95            [ 4] 1166 	sub	a, l
   0679 DD 77 FC      [19] 1167 	ld	-4 (ix), a
   067C 7A            [ 4] 1168 	ld	a, d
   067D 9C            [ 4] 1169 	sbc	a, h
   067E DD 77 FD      [19] 1170 	ld	-3 (ix), a
                           1171 ;src/IA.c:301: y = bally - pingu_enemyy;
   0681 DD 6E 09      [19] 1172 	ld	l, 9 (ix)
   0684 26 00         [ 7] 1173 	ld	h, #0x00
   0686 DD 5E 0B      [19] 1174 	ld	e, 11 (ix)
   0689 16 00         [ 7] 1175 	ld	d, #0x00
   068B 7D            [ 4] 1176 	ld	a, l
   068C 93            [ 4] 1177 	sub	a, e
   068D DD 77 FE      [19] 1178 	ld	-2 (ix), a
   0690 7C            [ 4] 1179 	ld	a, h
   0691 9A            [ 4] 1180 	sbc	a, d
   0692 DD 77 FF      [19] 1181 	ld	-1 (ix), a
                           1182 ;src/IA.c:303: y1 = LIMITPORTY - pingu_enemyy;
   0695 3E 6F         [ 7] 1183 	ld	a, #0x6f
   0697 93            [ 4] 1184 	sub	a, e
   0698 DD 77 F6      [19] 1185 	ld	-10 (ix), a
   069B 3E 00         [ 7] 1186 	ld	a, #0x00
   069D 9A            [ 4] 1187 	sbc	a, d
   069E DD 77 F7      [19] 1188 	ld	-9 (ix), a
                           1189 ;src/IA.c:307: ball->b_izq = 0;
   06A1 59            [ 4] 1190 	ld	e, c
   06A2 50            [ 4] 1191 	ld	d, b
   06A3 13            [ 6] 1192 	inc	de
                           1193 ;src/IA.c:304: if(x <= -2){ //ATACAR 
   06A4 3E FE         [ 7] 1194 	ld	a, #0xfe
   06A6 DD BE FC      [19] 1195 	cp	a, -4 (ix)
   06A9 3E FF         [ 7] 1196 	ld	a, #0xff
   06AB DD 9E FD      [19] 1197 	sbc	a, -3 (ix)
   06AE E2rB3r06      [10] 1198 	jp	PO, 00148$
   06B1 EE 80         [ 7] 1199 	xor	a, #0x80
   06B3                    1200 00148$:
   06B3 FArBDr06      [10] 1201 	jp	M, 00102$
                           1202 ;src/IA.c:306: ball->b_der = 1;
   06B6 3E 01         [ 7] 1203 	ld	a, #0x01
   06B8 02            [ 7] 1204 	ld	(bc), a
                           1205 ;src/IA.c:307: ball->b_izq = 0;
   06B9 AF            [ 4] 1206 	xor	a, a
   06BA 12            [ 7] 1207 	ld	(de), a
   06BB 18 05         [12] 1208 	jr	00103$
   06BD                    1209 00102$:
                           1210 ;src/IA.c:312: ball->b_izq = 1;
   06BD 3E 01         [ 7] 1211 	ld	a, #0x01
   06BF 12            [ 7] 1212 	ld	(de), a
                           1213 ;src/IA.c:313: ball->b_der = 0;
   06C0 AF            [ 4] 1214 	xor	a, a
   06C1 02            [ 7] 1215 	ld	(bc), a
   06C2                    1216 00103$:
                           1217 ;src/IA.c:316: if(y1 < y && x > 0){
   06C2 AF            [ 4] 1218 	xor	a, a
   06C3 DD BE FC      [19] 1219 	cp	a, -4 (ix)
   06C6 DD 9E FD      [19] 1220 	sbc	a, -3 (ix)
   06C9 E2rCEr06      [10] 1221 	jp	PO, 00149$
   06CC EE 80         [ 7] 1222 	xor	a, #0x80
   06CE                    1223 00149$:
   06CE 07            [ 4] 1224 	rlca
   06CF E6 01         [ 7] 1225 	and	a,#0x01
   06D1 4F            [ 4] 1226 	ld	c, a
   06D2 DD 7E F6      [19] 1227 	ld	a, -10 (ix)
   06D5 DD 96 FE      [19] 1228 	sub	a, -2 (ix)
   06D8 DD 7E F7      [19] 1229 	ld	a, -9 (ix)
   06DB DD 9E FF      [19] 1230 	sbc	a, -1 (ix)
   06DE E2rE3r06      [10] 1231 	jp	PO, 00150$
   06E1 EE 80         [ 7] 1232 	xor	a, #0x80
   06E3                    1233 00150$:
   06E3 F2rFDr06      [10] 1234 	jp	P, 00109$
   06E6 79            [ 4] 1235 	ld	a, c
   06E7 B7            [ 4] 1236 	or	a, a
   06E8 28 13         [12] 1237 	jr	Z,00109$
                           1238 ;src/IA.c:317: calcularb_direc(y1, &ballY);
   06EA 21 04 00      [10] 1239 	ld	hl, #0x0004
   06ED 39            [11] 1240 	add	hl, sp
   06EE E5            [11] 1241 	push	hl
   06EF DD 6E F6      [19] 1242 	ld	l,-10 (ix)
   06F2 DD 66 F7      [19] 1243 	ld	h,-9 (ix)
   06F5 E5            [11] 1244 	push	hl
   06F6 CDr1Fr06      [17] 1245 	call	_calcularb_direc
   06F9 F1            [10] 1246 	pop	af
   06FA F1            [10] 1247 	pop	af
   06FB 18 3C         [12] 1248 	jr	00110$
   06FD                    1249 00109$:
                           1250 ;src/IA.c:319: else if(y1> y && x>0){
   06FD DD 7E FE      [19] 1251 	ld	a, -2 (ix)
   0700 DD 96 F6      [19] 1252 	sub	a, -10 (ix)
   0703 DD 7E FF      [19] 1253 	ld	a, -1 (ix)
   0706 DD 9E F7      [19] 1254 	sbc	a, -9 (ix)
   0709 E2r0Er07      [10] 1255 	jp	PO, 00151$
   070C EE 80         [ 7] 1256 	xor	a, #0x80
   070E                    1257 00151$:
   070E F2r28r07      [10] 1258 	jp	P, 00105$
   0711 79            [ 4] 1259 	ld	a, c
   0712 B7            [ 4] 1260 	or	a, a
   0713 28 13         [12] 1261 	jr	Z,00105$
                           1262 ;src/IA.c:320: calcularb_direc(y1, &ballY);
   0715 21 04 00      [10] 1263 	ld	hl, #0x0004
   0718 39            [11] 1264 	add	hl, sp
   0719 E5            [11] 1265 	push	hl
   071A DD 6E F6      [19] 1266 	ld	l,-10 (ix)
   071D DD 66 F7      [19] 1267 	ld	h,-9 (ix)
   0720 E5            [11] 1268 	push	hl
   0721 CDr1Fr06      [17] 1269 	call	_calcularb_direc
   0724 F1            [10] 1270 	pop	af
   0725 F1            [10] 1271 	pop	af
   0726 18 11         [12] 1272 	jr	00110$
   0728                    1273 00105$:
                           1274 ;src/IA.c:323: calcularb_direc(y, &ballY);
   0728 21 04 00      [10] 1275 	ld	hl, #0x0004
   072B 39            [11] 1276 	add	hl, sp
   072C E5            [11] 1277 	push	hl
   072D DD 6E FE      [19] 1278 	ld	l,-2 (ix)
   0730 DD 66 FF      [19] 1279 	ld	h,-1 (ix)
   0733 E5            [11] 1280 	push	hl
   0734 CDr1Fr06      [17] 1281 	call	_calcularb_direc
   0737 F1            [10] 1282 	pop	af
   0738 F1            [10] 1283 	pop	af
   0739                    1284 00110$:
                           1285 ;src/IA.c:327: x = (u8)x*SCALA;
   0739 DD 4E FC      [19] 1286 	ld	c, -4 (ix)
   073C DD 71 F9      [19] 1287 	ld	-7 (ix), c
   073F DD 36 F8 00   [19] 1288 	ld	-8 (ix), #0x00
                           1289 ;src/IA.c:328: y = (u8)y*SCALA;
   0743 DD 46 FE      [19] 1290 	ld	b, -2 (ix)
   0746 0E 00         [ 7] 1291 	ld	c, #0x00
                           1292 ;src/IA.c:329: calcule(3,x,&accerationX);
   0748 21 02 00      [10] 1293 	ld	hl, #0x0002
   074B 39            [11] 1294 	add	hl, sp
   074C DD 56 F8      [19] 1295 	ld	d, -8 (ix)
   074F C5            [11] 1296 	push	bc
   0750 E5            [11] 1297 	push	hl
   0751 1E 03         [ 7] 1298 	ld	e, #0x03
   0753 D5            [11] 1299 	push	de
   0754 CDr97r05      [17] 1300 	call	_calcule
   0757 F1            [10] 1301 	pop	af
   0758 F1            [10] 1302 	pop	af
   0759 C1            [10] 1303 	pop	bc
                           1304 ;src/IA.c:330: calcule(3,y,&accerationY);
   075A 21 00 00      [10] 1305 	ld	hl, #0x0000
   075D 39            [11] 1306 	add	hl, sp
   075E 51            [ 4] 1307 	ld	d, c
   075F C5            [11] 1308 	push	bc
   0760 E5            [11] 1309 	push	hl
   0761 1E 03         [ 7] 1310 	ld	e, #0x03
   0763 D5            [11] 1311 	push	de
   0764 CDr97r05      [17] 1312 	call	_calcule
   0767 F1            [10] 1313 	pop	af
   0768 F1            [10] 1314 	pop	af
   0769 C1            [10] 1315 	pop	bc
                           1316 ;src/IA.c:333: if(y!=0)
   076A 78            [ 4] 1317 	ld	a, b
   076B B1            [ 4] 1318 	or	a,c
   076C 28 1D         [12] 1319 	jr	Z,00114$
                           1320 ;src/IA.c:334: defuzzi(accerationX,&ballX, ax);
   076E DD 4E FA      [19] 1321 	ld	c,-6 (ix)
   0771 DD 46 FB      [19] 1322 	ld	b,-5 (ix)
   0774 DD 6E 04      [19] 1323 	ld	l,4 (ix)
   0777 DD 66 05      [19] 1324 	ld	h,5 (ix)
   077A E5            [11] 1325 	push	hl
   077B C5            [11] 1326 	push	bc
   077C DD 6E F0      [19] 1327 	ld	l,-16 (ix)
   077F DD 66 F1      [19] 1328 	ld	h,-15 (ix)
   0782 E5            [11] 1329 	push	hl
   0783 CDr8Ar04      [17] 1330 	call	_defuzzi
   0786 21 06 00      [10] 1331 	ld	hl, #6
   0789 39            [11] 1332 	add	hl, sp
   078A F9            [ 6] 1333 	ld	sp, hl
                           1334 ;src/IA.c:336: ax = 0;
   078B                    1335 00114$:
                           1336 ;src/IA.c:338: if(x!=0)
   078B DD 7E F9      [19] 1337 	ld	a, -7 (ix)
   078E DD B6 F8      [19] 1338 	or	a,-8 (ix)
   0791 28 1B         [12] 1339 	jr	Z,00118$
                           1340 ;src/IA.c:339: defuzzi(accerationY,&ballY, ay);
   0793 21 04 00      [10] 1341 	ld	hl, #0x0004
   0796 39            [11] 1342 	add	hl, sp
   0797 DD 4E 06      [19] 1343 	ld	c,6 (ix)
   079A DD 46 07      [19] 1344 	ld	b,7 (ix)
   079D C5            [11] 1345 	push	bc
   079E E5            [11] 1346 	push	hl
   079F DD 6E EE      [19] 1347 	ld	l,-18 (ix)
   07A2 DD 66 EF      [19] 1348 	ld	h,-17 (ix)
   07A5 E5            [11] 1349 	push	hl
   07A6 CDr8Ar04      [17] 1350 	call	_defuzzi
   07A9 21 06 00      [10] 1351 	ld	hl, #6
   07AC 39            [11] 1352 	add	hl, sp
   07AD F9            [ 6] 1353 	ld	sp, hl
                           1354 ;src/IA.c:341: ay = 0;
   07AE                    1355 00118$:
   07AE DD F9         [10] 1356 	ld	sp, ix
   07B0 DD E1         [14] 1357 	pop	ix
   07B2 C9            [10] 1358 	ret
                           1359 ;src/IA.c:356: void moveIA(TEntity* myself, TEntity* enemy, TEntity* frisbee) {
                           1360 ;	---------------------------------
                           1361 ; Function moveIA
                           1362 ; ---------------------------------
   07B3                    1363 _moveIA::
   07B3 DD E5         [15] 1364 	push	ix
   07B5 DD 21 00 00   [14] 1365 	ld	ix,#0
   07B9 DD 39         [15] 1366 	add	ix,sp
   07BB F5            [11] 1367 	push	af
                           1368 ;src/IA.c:368: if(myself->y > frisbee->y) {
   07BC DD 7E 04      [19] 1369 	ld	a, 4 (ix)
   07BF DD 77 FE      [19] 1370 	ld	-2 (ix), a
   07C2 DD 7E 05      [19] 1371 	ld	a, 5 (ix)
   07C5 DD 77 FF      [19] 1372 	ld	-1 (ix), a
   07C8 E1            [10] 1373 	pop	hl
   07C9 E5            [11] 1374 	push	hl
   07CA 23            [ 6] 1375 	inc	hl
   07CB 23            [ 6] 1376 	inc	hl
   07CC 4E            [ 7] 1377 	ld	c, (hl)
   07CD 23            [ 6] 1378 	inc	hl
   07CE 46            [ 7] 1379 	ld	b, (hl)
   07CF DD 6E 08      [19] 1380 	ld	l,8 (ix)
   07D2 DD 66 09      [19] 1381 	ld	h,9 (ix)
   07D5 23            [ 6] 1382 	inc	hl
   07D6 23            [ 6] 1383 	inc	hl
   07D7 5E            [ 7] 1384 	ld	e, (hl)
   07D8 23            [ 6] 1385 	inc	hl
   07D9 56            [ 7] 1386 	ld	d, (hl)
                           1387 ;src/IA.c:369: myself->ay = -SCALA/8;
   07DA DD 7E FE      [19] 1388 	ld	a, -2 (ix)
   07DD C6 0C         [ 7] 1389 	add	a, #0x0c
   07DF 6F            [ 4] 1390 	ld	l, a
   07E0 DD 7E FF      [19] 1391 	ld	a, -1 (ix)
   07E3 CE 00         [ 7] 1392 	adc	a, #0x00
   07E5 67            [ 4] 1393 	ld	h, a
                           1394 ;src/IA.c:368: if(myself->y > frisbee->y) {
   07E6 7B            [ 4] 1395 	ld	a, e
   07E7 91            [ 4] 1396 	sub	a, c
   07E8 7A            [ 4] 1397 	ld	a, d
   07E9 98            [ 4] 1398 	sbc	a, b
   07EA 30 07         [12] 1399 	jr	NC,00104$
                           1400 ;src/IA.c:369: myself->ay = -SCALA/8;
   07EC 36 E0         [10] 1401 	ld	(hl), #0xe0
   07EE 23            [ 6] 1402 	inc	hl
   07EF 36 FF         [10] 1403 	ld	(hl), #0xff
   07F1 18 0B         [12] 1404 	jr	00106$
   07F3                    1405 00104$:
                           1406 ;src/IA.c:370: } else if (myself->y < frisbee->y) {
   07F3 79            [ 4] 1407 	ld	a, c
   07F4 93            [ 4] 1408 	sub	a, e
   07F5 78            [ 4] 1409 	ld	a, b
   07F6 9A            [ 4] 1410 	sbc	a, d
   07F7 30 05         [12] 1411 	jr	NC,00106$
                           1412 ;src/IA.c:371: myself->ay = SCALA/8;
   07F9 36 20         [10] 1413 	ld	(hl), #0x20
   07FB 23            [ 6] 1414 	inc	hl
   07FC 36 00         [10] 1415 	ld	(hl), #0x00
   07FE                    1416 00106$:
   07FE DD F9         [10] 1417 	ld	sp, ix
   0800 DD E1         [14] 1418 	pop	ix
   0802 C9            [10] 1419 	ret
                           1420 	.area _CODE
                           1421 	.area _INITIALIZER
   0000                    1422 __xinit__vRulesx:
   0000r4Cr01              1423 	.dw _rulex
   0002r50r01              1424 	.dw _rulex1
   0004r54r01              1425 	.dw _rulex2
   0006                    1426 __xinit__vRulesy:
   0006r58r01              1427 	.dw _ruley
   0008r5Cr01              1428 	.dw _ruley1
   000Ar60r01              1429 	.dw _ruley2
   000C                    1430 __xinit__fmems:
   000Cr36r01              1431 	.dw _acelPo
   000Er41r01              1432 	.dw _acelMed
   0010r2Br01              1433 	.dw _acelMu
                           1434 	.area _CABS (ABS)
