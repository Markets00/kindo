ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 1.
Hexadecimal [16-Bits]



                     000A     1 std_acc = 10 	;; standard acceleration per frame
                              2 
                              3 .area _DATA
                              4 .area _CODE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 2.
Hexadecimal [16-Bits]



                              5 .include "utility.h.s"
                              1 ;; ====================================
                              2 ;; ====================================
                              3 ;; INCLUDED CPCTELERA FUNCTIONS
                              4 ;; ====================================
                              5 ;; ====================================
                              6 .globl cpct_waitVSYNC_asm
                              7 .globl cpct_drawSolidBox_asm
                              8 .globl cpct_getScreenPtr_asm
                              9 .globl cpct_scanKeyboard_asm
                             10 .globl cpct_isKeyPressed_asm
                             11 .globl cpct_disableFirmware_asm
                             12 .globl cpct_setVideoMode_asm
                             13 .globl cpct_setPalette_asm
                             14 .globl cpct_memcpy_asm
                             15 .globl negateHL
                             16 .globl cpct_setVideoMemoryPage_asm
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 3.
Hexadecimal [16-Bits]



                              6 .include "entity.h.s"
                              1 ;; ====================================
                              2 ;; ====================================
                              3 ;; ENTITY PUBLIC FUNCTIONS
                              4 ;; ====================================
                              5 ;; ====================================
                              6 .globl entityDraw
                              7 .globl entityErase
                              8 .globl entityCheckCollision
                              9 .globl entityUpdatePhysics
                             10 .globl entityUpdatePosition
                             11 
                             12 .macro defineEntity name, x,y, h, w, vx, vy, ax, ay, normal, state, clr, id
                             13 	name'_data::
                             14 		name'_x:	.dw x		;; X coordinate			(16 bits)
                             15 		name'_y:	.dw y		;; Y coordinate			(16 bits)
                             16 		name'_h:	.db h		;; Height			(8 bits)
                             17 		name'_w:	.db w		;; Width			(8 bits)
                             18 		name'_vx:	.dw vx		;; Velocity at X axis 		(16 bits)
                             19 		name'_vy:	.dw vy		;; Velocity at Y axis		(16 bits)
                             20 		name'_ax:	.dw ax		;; Acceleration at X axis	(16 bits)
                             21 		name'_ay:	.dw ay		;; Acceleration at Y axis	(16 bits)
                             22 		name'_normal:	.dw normal	;; Normal force			(16 bits)
                             23 		name'_last_x:	.db x		;; Last x rendered		(8 bits)
                             24 		name'_erase_x:	.db x		;; x rendered at same buffer	(8 bits)
                             25 		name'_last_y:	.db y		;; Last y rendered		(8 bits)
                             26 		name'_erase_y:	.db y		;; y rendered at same buffer	(8 bits)
                             27 		name'_state:	.db state	;; Entity enabled/disabled	(8 bits)
                             28 		name'_clr:	.db clr		;; Entity color pattern		(8 bits)
                             29 		name'_id:	.db id		;; Numeric ID			(8 bits)
                             30 .endm
                             31 
                             32 
                             33 ;; ====================================
                             34 ;; ====================================
                             35 ;; ENTITY PUBLIC DATA
                             36 ;; ====================================
                             37 ;; ====================================
                     0000    38 .equ Ent_x_I, 		0	;; X coordinate, integer part
                     0001    39 .equ Ent_x_F, 		1	;; X coordinate, fractional part
                     0002    40 .equ Ent_y_I, 		2	;; Y coordinate, integer part
                     0003    41 .equ Ent_y_F, 		3	;; Y coordinate, fractional part
                     0004    42 .equ Ent_h, 		4	;; Height
                     0005    43 .equ Ent_w, 		5	;; Width
                     0006    44 .equ Ent_vx_I,		6	;; Velocity at X axis, integer part
                     0007    45 .equ Ent_vx_F,		7	;; Velocity at X axis, fractional part
                     0008    46 .equ Ent_vy_I,		8	;; Velocity at Y axis, integer part
                     0009    47 .equ Ent_vy_F,		9	;; Velocity at Y axis, fractional part
                     000A    48 .equ Ent_ax_I,		10	;; Acceleration at X axis, integer part
                     000B    49 .equ Ent_ax_F,		11	;; Acceleration at X axis, fractional part
                     000C    50 .equ Ent_ay_I,		12	;; Acceleration at Y axis, integer part
                     000D    51 .equ Ent_ay_F,		13	;; Acceleration at Y axis, fractional part
                     000E    52 .equ Ent_N_I,		14	;; Normal force, integer part
                     000F    53 .equ Ent_N_F,		15	;; Normal force, fractional part
                     0010    54 .equ Ent_last_x,	16	;; Last x rendered
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 4.
Hexadecimal [16-Bits]



                     0011    55 .equ Ent_erase_x,	17	;; x rendered at same buffer
                     0012    56 .equ Ent_last_y,	18	;; Last y rendered
                     0013    57 .equ Ent_erase_y,	19	;; y rendered at same buffer
                     0014    58 .equ Ent_state,		20	;; Entity enabled/disabled
                     0015    59 .equ Ent_clr, 		21	;; Entity color pattern
                     0016    60 .equ Ent_id, 		22	;; Numeric ID
                             61 				;; Frisbee 	0
                             62 				;; Player1 	1
                             63 				;; Enemy1	2
                             64 
                     0002    65 .equ MAX_VEL_X, 2 
                     FFFFFFFE    66 .equ MIN_VEL_X, -2
                     0003    67 .equ MAX_VEL_Y, 3
                     FFFFFFFD    68 .equ MIN_VEL_Y, -3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 5.
Hexadecimal [16-Bits]



                              7 .include "frisbee.h.s"
                              1 ;; =========================
                              2 ;; =========================
                              3 ;; FRISBEE PUBLIC FUNCTIONS
                              4 ;; =========================
                              5 ;; =========================
                              6 .globl frisbee_erase
                              7 .globl frisbee_update
                              8 .globl frisbee_draw
                              9 .globl frisbee_data
                             10 .globl frisbee_setOff
                             11 .globl frisbee_setEffect
                             12 .globl frisbee_setVelocities
                             13 .globl frisbee_checkGoal
                             14 	
                     0017    15 .equ Frisbee_effect_I, 23
                     0018    16 .equ Frisbee_effect_F, 24
                     0008    17 .equ std_eff, 0x0008
                     FFF8    18 .equ std_N_eff, 0xFFF8
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 6.
Hexadecimal [16-Bits]



                              8 .include "game.h.s"
                              1 ;; ====================================
                              2 ;; ====================================
                              3 ;; GAME PUBLIC FUNCTIONS
                              4 ;; ====================================
                              5 ;; ====================================
                              6 .globl gameStart
                              7 .globl getVideoPtr
                              8 .globl incTeam1Points
                              9 .globl incTeam2Points
                             10 
                             11 .macro defineGame name, type, map, fTime, t1points, t2points
                             12 	name'_data::
                             13 		name'_type::	.db type	;; Game Mode			(8 bits)
                             14 		name'_map::	.dw map		;; Pointer to map of tiles	(16 bits little endian)
                             15 		name'_fTime::	.dw fTime	;; Final duration of each match	(16 bits)
                             16 		name'_t1points:: .db t1points 	;; Points of team 1		(8 bits)
                             17 		name'_t2points:: .db t2points 	;; Points of team 2		(8 bits)
                             18 .endm
                             19 
                             20 ;; ====================================
                             21 ;; ====================================
                             22 ;; GAME PUBLIC DATA
                             23 ;; ====================================
                             24 ;; ====================================
                     0000    25 .equ Game_type, 	0	;; Game mode
                     0001    26 .equ Game_map_L, 	1	;; Low part of pointer to game map
                     0002    27 .equ Game_map_H, 	2	;; High part of pointer to game map
                     0003    28 .equ Game_fTime_H, 	3	;; High part of final match time
                     0004    29 .equ Game_fTime_L, 	4	;; Low part of final match time
                     0005    30 .equ Game_t1points, 	5	;; Points of team 1
                     0006    31 .equ Game_t2points, 	6	;; Points of team 2
                             32 
                     0050    33 .equ RIGHT_LIMIT,	80
                     0000    34 .equ LEFT_LIMIT,	0
                     000A    35 .equ TOP_LIMIT,	 	10
                     00C8    36 .equ BOTTOM_LIMIT,	200
                     0028    37 .equ CENTER_LIMIT,	40
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 7.
Hexadecimal [16-Bits]



                              9 .include "keyboard/keyboard.s"
                              1 ;;-----------------------------LICENSE NOTICE------------------------------------
                              2 ;;  This file is part of CPCtelera: An Amstrad CPC Game Engine 
                              3 ;;  Copyright (C) 2014 ronaldo / Fremos / Cheesetea / ByteRealms (@FranGallegoBR)
                              4 ;;
                              5 ;;  This program is free software: you can redistribute it and/or modify
                              6 ;;  it under the terms of the GNU Lesser General Public License as published by
                              7 ;;  the Free Software Foundation, either version 3 of the License, or
                              8 ;;  (at your option) any later version.
                              9 ;;
                             10 ;;  This program is distributed in the hope that it will be useful,
                             11 ;;  but WITHOUT ANY WARRANTY; without even the implied warranty of
                             12 ;;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                             13 ;;  GNU Lesser General Public License for more details.
                             14 ;;
                             15 ;;  You should have received a copy of the GNU Lesser General Public License
                             16 ;;  along with this program.  If not, see <http://www.gnu.org/licenses/>.
                             17 ;;-------------------------------------------------------------------------------
                             18 .module cpct_keyboard
                             19 
                             20 ;; bndry directive does not work when linking previously compiled files
                             21 ;.bndry 16
                             22 ;;   16-byte aligned in memory to let functions use 8-bit maths for pointing
                             23 ;;   (alignment not working on user linking)
                             24 
   0000                      25 _cpct_keyboardStatusBuffer:: .ds 10
                             26 
                             27 ;;
                             28 ;; Assembly constant definitions for keyboard mapping
                             29 ;;
                             30 
                             31 ;; Matrix Line 0x00
                     0100    32 .equ Key_CursorUp     ,#0x0100  ;; Bit 0 (01h) => | 0000 0001 |
                     0200    33 .equ Key_CursorRight  ,#0x0200  ;; Bit 1 (02h) => | 0000 0010 |
                     0400    34 .equ Key_CursorDown   ,#0x0400  ;; Bit 2 (04h) => | 0000 0100 |
                     0800    35 .equ Key_F9           ,#0x0800  ;; Bit 3 (08h) => | 0000 1000 |
                     1000    36 .equ Key_F6           ,#0x1000  ;; Bit 4 (10h) => | 0001 0000 |
                     2000    37 .equ Key_F3           ,#0x2000  ;; Bit 5 (20h) => | 0010 0000 |
                     4000    38 .equ Key_Enter        ,#0x4000  ;; Bit 6 (40h) => | 0100 0000 |
                     8000    39 .equ Key_FDot         ,#0x8000  ;; Bit 7 (80h) => | 1000 0000 |
                             40 ;; Matrix Line 0x01
                     0101    41 .equ Key_CursorLeft   ,#0x0101
                     0201    42 .equ Key_Copy         ,#0x0201
                     0401    43 .equ Key_F7           ,#0x0401
                     0801    44 .equ Key_F8           ,#0x0801
                     1001    45 .equ Key_F5           ,#0x1001
                     2001    46 .equ Key_F1           ,#0x2001
                     4001    47 .equ Key_F2           ,#0x4001
                     8001    48 .equ Key_F0           ,#0x8001
                             49 ;; Matrix Line 0x02
                     0102    50 .equ Key_Clr          ,#0x0102
                     0202    51 .equ Key_OpenBracket  ,#0x0202
                     0402    52 .equ Key_Return       ,#0x0402
                     0802    53 .equ Key_CloseBracket ,#0x0802
                     1002    54 .equ Key_F4           ,#0x1002
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 8.
Hexadecimal [16-Bits]



                     2002    55 .equ Key_Shift        ,#0x2002
                     4002    56 .equ Key_BackSlash    ,#0x4002
                     8002    57 .equ Key_Control      ,#0x8002
                             58 ;; Matrix Line 0x03
                     0103    59 .equ Key_Caret        ,#0x0103
                     0203    60 .equ Key_Hyphen       ,#0x0203
                     0403    61 .equ Key_At           ,#0x0403
                     0803    62 .equ Key_P            ,#0x0803
                     1003    63 .equ Key_SemiColon    ,#0x1003
                     2003    64 .equ Key_Colon        ,#0x2003
                     4003    65 .equ Key_Slash        ,#0x4003
                     8003    66 .equ Key_Dot          ,#0x8003
                             67 ;; Matrix Line 0x04
                     0104    68 .equ Key_0            ,#0x0104
                     0204    69 .equ Key_9            ,#0x0204
                     0404    70 .equ Key_O            ,#0x0404
                     0804    71 .equ Key_I            ,#0x0804
                     1004    72 .equ Key_L            ,#0x1004
                     2004    73 .equ Key_K            ,#0x2004
                     4004    74 .equ Key_M            ,#0x4004
                     8004    75 .equ Key_Comma        ,#0x8004
                             76 ;; Matrix Line 0x05
                     0105    77 .equ Key_8            ,#0x0105
                     0205    78 .equ Key_7            ,#0x0205
                     0405    79 .equ Key_U            ,#0x0405
                     0805    80 .equ Key_Y            ,#0x0805
                     1005    81 .equ Key_H            ,#0x1005
                     2005    82 .equ Key_J            ,#0x2005
                     4005    83 .equ Key_N            ,#0x4005
                     8005    84 .equ Key_Space        ,#0x8005
                             85 ;; Matrix Line 0x06
                     0106    86 .equ Key_6            ,#0x0106
                     0106    87 .equ Joy1_Up          ,#0x0106
                     0206    88 .equ Key_5            ,#0x0206
                     0206    89 .equ Joy1_Down        ,#0x0206
                     0406    90 .equ Key_R            ,#0x0406
                     0406    91 .equ Joy1_Left        ,#0x0406
                     0806    92 .equ Key_T            ,#0x0806
                     0806    93 .equ Joy1_Right       ,#0x0806
                     1006    94 .equ Key_G            ,#0x1006
                     1006    95 .equ Joy1_Fire1       ,#0x1006
                     2006    96 .equ Key_F            ,#0x2006
                     2006    97 .equ Joy1_Fire2       ,#0x2006
                     4006    98 .equ Key_B            ,#0x4006
                     4006    99 .equ Joy1_Fire3       ,#0x4006
                     8006   100 .equ Key_V            ,#0x8006
                            101 ;; Matrix Line 0x07
                     0107   102 .equ Key_4            ,#0x0107
                     0207   103 .equ Key_3            ,#0x0207
                     0407   104 .equ Key_E            ,#0x0407
                     0807   105 .equ Key_W            ,#0x0807
                     1007   106 .equ Key_S            ,#0x1007
                     2007   107 .equ Key_D            ,#0x2007
                     4007   108 .equ Key_C            ,#0x4007
                     8007   109 .equ Key_X            ,#0x8007
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 9.
Hexadecimal [16-Bits]



                            110 ;; Matrix Line 0x08
                     0108   111 .equ Key_1            ,#0x0108
                     0208   112 .equ Key_2            ,#0x0208
                     0408   113 .equ Key_Esc          ,#0x0408
                     0808   114 .equ Key_Q            ,#0x0808
                     1008   115 .equ Key_Tab          ,#0x1008
                     2008   116 .equ Key_A            ,#0x2008
                     4008   117 .equ Key_CapsLock     ,#0x4008
                     8008   118 .equ Key_Z            ,#0x8008
                            119 ;; Matrix Line 0x09
                     0109   120 .equ Joy0_Up          ,#0x0109
                     0209   121 .equ Joy0_Down        ,#0x0209
                     0409   122 .equ Joy0_Left        ,#0x0409
                     0809   123 .equ Joy0_Right       ,#0x0809
                     1009   124 .equ Joy0_Fire1       ,#0x1009
                     2009   125 .equ Joy0_Fire2       ,#0x2009
                     4009   126 .equ Joy0_Fire3       ,#0x4009
                     8009   127 .equ Key_Del          ,#0x8009
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 10.
Hexadecimal [16-Bits]



                             10 .globl _moveIA
                             11 
                             12 ;; ====================================
                             13 ;; ====================================
                             14 ;; PRIVATE DATA
                             15 ;; ====================================
                             16 ;; ====================================
                             17 
                             18 ;; .macro defineEntity name, x,y, h, w, vx, vy, ax, ay, normal, state, clr, id
                             19 
   000A                      20 defineEntity player, #0x0010, #0x0050, #20, #5, #0000, #0000, #0000, #0000, #0x0400, #1, #0xF0, #1
   000A                       1 	player_data::
   000A 10 00                 2 		player_x:	.dw #0x0010		;; X coordinate			(16 bits)
   000C 50 00                 3 		player_y:	.dw #0x0050		;; Y coordinate			(16 bits)
   000E 14                    4 		player_h:	.db #20		;; Height			(8 bits)
   000F 05                    5 		player_w:	.db #5		;; Width			(8 bits)
   0010 00 00                 6 		player_vx:	.dw #0000		;; Velocity at X axis 		(16 bits)
   0012 00 00                 7 		player_vy:	.dw #0000		;; Velocity at Y axis		(16 bits)
   0014 00 00                 8 		player_ax:	.dw #0000		;; Acceleration at X axis	(16 bits)
   0016 00 00                 9 		player_ay:	.dw #0000		;; Acceleration at Y axis	(16 bits)
   0018 00 04                10 		player_normal:	.dw #0x0400	;; Normal force			(16 bits)
   001A 10                   11 		player_last_x:	.db #0x0010		;; Last x rendered		(8 bits)
   001B 10                   12 		player_erase_x:	.db #0x0010		;; x rendered at same buffer	(8 bits)
   001C 50                   13 		player_last_y:	.db #0x0050		;; Last y rendered		(8 bits)
   001D 50                   14 		player_erase_y:	.db #0x0050		;; y rendered at same buffer	(8 bits)
   001E 01                   15 		player_state:	.db #1	;; Entity enabled/disabled	(8 bits)
   001F F0                   16 		player_clr:	.db #0xF0		;; Entity color pattern		(8 bits)
   0020 01                   17 		player_id:	.db #1		;; Numeric ID			(8 bits)
                             21 
   0021                      22 defineEntity enemy, #0x0050-0x0004, #0x0064, #20, #5, #0000, #0000, #0000, #0000, #0x0400, #1, #0xFF, #2
   0021                       1 	enemy_data::
   0021 4C 00                 2 		enemy_x:	.dw #0x0050-0x0004		;; X coordinate			(16 bits)
   0023 64 00                 3 		enemy_y:	.dw #0x0064		;; Y coordinate			(16 bits)
   0025 14                    4 		enemy_h:	.db #20		;; Height			(8 bits)
   0026 05                    5 		enemy_w:	.db #5		;; Width			(8 bits)
   0027 00 00                 6 		enemy_vx:	.dw #0000		;; Velocity at X axis 		(16 bits)
   0029 00 00                 7 		enemy_vy:	.dw #0000		;; Velocity at Y axis		(16 bits)
   002B 00 00                 8 		enemy_ax:	.dw #0000		;; Acceleration at X axis	(16 bits)
   002D 00 00                 9 		enemy_ay:	.dw #0000		;; Acceleration at Y axis	(16 bits)
   002F 00 04                10 		enemy_normal:	.dw #0x0400	;; Normal force			(16 bits)
   0031 4C                   11 		enemy_last_x:	.db #0x0050-0x0004		;; Last x rendered		(8 bits)
   0032 4C                   12 		enemy_erase_x:	.db #0x0050-0x0004		;; x rendered at same buffer	(8 bits)
   0033 64                   13 		enemy_last_y:	.db #0x0064		;; Last y rendered		(8 bits)
   0034 64                   14 		enemy_erase_y:	.db #0x0064		;; y rendered at same buffer	(8 bits)
   0035 01                   15 		enemy_state:	.db #1	;; Entity enabled/disabled	(8 bits)
   0036 FF                   16 		enemy_clr:	.db #0xFF		;; Entity color pattern		(8 bits)
   0037 02                   17 		enemy_id:	.db #2		;; Numeric ID			(8 bits)
                             23 
                             24 	
                             25 ;; ====================================
                             26 ;; ====================================
                             27 ;; PUBLIC FUNCTIONS
                             28 ;; ====================================
                             29 ;; ====================================
   0038                      30 player_erase::
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 11.
Hexadecimal [16-Bits]



   0038 DD 21 0A 00   [14]   31 	ld 	ix, #player_data
   003C CD 00 00      [17]   32 	call 	entityErase		;; Erase player
   003F DD 21 21 00   [14]   33 	ld 	ix, #enemy_data
   0043 CD 00 00      [17]   34 	call 	entityErase		;; Erase enemy
                             35 
   0046 C9            [10]   36 	ret
                             37 
                             38 ;; =========================================
                             39 ;; Actualiza el estado de los entities tipo
                             40 ;;	player
                             41 ;; Modifica: AF, IX
                             42 ;; =========================================
   0047                      43 player_update::
   0047 DD 21 0A 00   [14]   44 	ld 	ix, #player_data
   004B CD E3 00      [17]   45 	call checkUserInput
                             46 
   004E DD 21 21 00   [14]   47 	ld 	ix, #enemy_data
   0052 CD E3 00      [17]   48 	call checkUserInput
                             49 
                             50 ;;	ld	hl, #frisbee_data
                             51 ;;	push 	hl
                             52 ;;	ld	hl, #player_data
                             53 ;;	push 	hl
                             54 ;;	ld	hl, #enemy_data
                             55 ;;	push 	hl
                             56 ;;	call _moveIA			;; moveIA(TEntity* myself, TEntity* enemy, TEntity* frisbee)
                             57 ;;	pop 	af
                             58 ;;	pop 	af
                             59 ;;	pop 	af
                             60 
   0055 DD 21 0A 00   [14]   61 	ld 	ix, #player_data
   0059 CD 00 00      [17]   62 	call entityUpdatePhysics
   005C DD 21 21 00   [14]   63 	ld 	ix, #enemy_data
   0060 CD 00 00      [17]   64 	call entityUpdatePhysics
                             65 
   0063 DD 21 0A 00   [14]   66 	ld 	ix, #player_data
   0067 CD 00 00      [17]   67 	call entityUpdatePosition
   006A DD 21 21 00   [14]   68 	ld 	ix, #enemy_data
   006E CD 00 00      [17]   69 	call entityUpdatePosition
                             70 
                             71 
   0071 DD 21 0A 00   [14]   72 	ld 	ix, #player_data
   0075 CD BA 00      [17]   73 	call checkCenterCrossing
   0078 DD 21 21 00   [14]   74 	ld 	ix, #enemy_data
   007C CD BA 00      [17]   75 	call checkCenterCrossing
   007F C9            [10]   76 	ret
                             77 
   0080                      78 player_draw::
   0080 DD 21 0A 00   [14]   79 	ld 	ix, #player_data
   0084 CD 00 00      [17]   80 	call 	entityDraw		;; Draw player
   0087 DD 21 21 00   [14]   81 	ld 	ix, #enemy_data
   008B CD 00 00      [17]   82 	call 	entityDraw		;; Draw enemy
                             83 
   008E C9            [10]   84 	ret
                             85 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 12.
Hexadecimal [16-Bits]



                             86 ;; ====================================
                             87 ;; ====================================
                             88 ;; PRIVATE FUNCTIONS
                             89 ;; ====================================
                             90 ;; ====================================
                             91 
                             92 ;; =========================================
                             93 ;; Determina el siguiente estado de
                             94 ;;	la entidad
                             95 ;; Entrada:
                             96 ;; =========================================
   008F                      97 delta:
                             98 
                             99 
   008F                     100 update:
                            101 
                            102 
                            103 ;; =========================================
                            104 ;; Comprueba si la entidad colisiona con 
                            105 ;; 	el frisbee
                            106 ;; Entrada:
                            107 ;; 	IX <= puntero al player a comparar
                            108 ;; 		con el frisbee
                            109 ;; Modifica: AF, B, HL, IX
                            110 ;; Devuelve:
                            111 ;; 	A <= 	0 si no hay colisión
                            112 ;; 		>1 si hay colisión
                            113 ;; =========================================
   008F                     114 checkFrisbeeCollision:
   008F 21 00 00      [10]  115 	ld 	hl, #frisbee_data	;; HL <= frisbee_data
   0092 CD 00 00      [17]  116 	call 	entityCheckCollision 	;; A <= collison/no_collision
                            117 
   0095 C9            [10]  118 	ret
                            119 
                            120 
                            121 ;; ===============================================
                            122 ;; Acelera la entidad hacia la derecha, si puede
                            123 ;; Entrada:
                            124 ;; 	IX <= puntero a los datos de la entidad
                            125 ;; Modifica A, IX
                            126 ;; ===============================================
   0096                     127 moveRight:
                            128 	;; push 	ix
                            129 	;; call 	checkFrisbeeCollision 	;; A == collision/no_collision
                            130 	;; pop 	ix
                            131 	;; cp 	#0			;; A == 0?
                            132 	;; jr	nz, collision_right 	;; checkFrisbeeCollision != 0?
                            133 
                            134 		;; no_collision
   0096 DD 36 0A 00   [19]  135 		ld 	Ent_ax_I(ix), #0
   009A DD 36 0B 0A   [19]  136 		ld 	Ent_ax_F(ix), #std_acc	;; Ent_ay <= 00(0)E2(30) (30)
                            137 
                            138 
   009E C9            [10]  139 		ret
                            140 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 13.
Hexadecimal [16-Bits]



                            141 	;;collision_right:
                            142 	;;	call 	frisbee_setOff
                            143 	;;
                            144 	;;	ret
                            145 
                            146 ;; ===============================================
                            147 ;; Acelera la entidad hacia abajo, si puede
                            148 ;; Entrada:
                            149 ;; 	IX <= puntero a los datos de la entidad
                            150 ;; Modifica A, IX
                            151 ;; ===============================================
   009F                     152 moveDown:
   009F DD 36 0C 00   [19]  153 	ld 	Ent_ay_I(ix), #0
   00A3 DD 36 0D 0A   [19]  154 	ld 	Ent_ay_F(ix), #std_acc	;; Ent_ay <= 00(0)E2(30) (30)
                            155 
   00A7 C9            [10]  156 	ret
                            157 
                            158 ;; ===============================================
                            159 ;; Acelera la entidad hacia la izquierda, si puede
                            160 ;; Entrada:
                            161 ;; 	IX <= puntero a los datos de la entidad
                            162 ;; Modifica A, IX
                            163 ;; ===============================================
   00A8                     164 moveLeft:
   00A8 DD 36 0A FF   [19]  165 	ld 	Ent_ax_I(ix), #-1
   00AC DD 36 0B F6   [19]  166 	ld 	Ent_ax_F(ix), #-std_acc	;; Ent_ax <= FF(-1)E2(-30) (-30)
                            167 
   00B0 C9            [10]  168 	ret
                            169 
                            170 ;; ===============================================
                            171 ;; Acelera la entidad hacia arriba, si puede
                            172 ;; Entrada:
                            173 ;; 	IX <= puntero a los datos de la entidad
                            174 ;; Modifica A, IX
                            175 ;; ===============================================
   00B1                     176 moveUp:
   00B1 DD 36 0C FF   [19]  177 	ld 	Ent_ay_I(ix), #-1
   00B5 DD 36 0D F6   [19]  178 	ld 	Ent_ay_F(ix), #-std_acc	;; Ent_ay <= FF(-1)E2(-30) (-30)
                            179 
   00B9 C9            [10]  180 	ret
                            181 
                            182 
                            183 ;; ===========================================
                            184 ;; Chequea si un jugador pasa del centro del
                            185 ;; 	campo y lo corrige en caso necesario
                            186 ;; Entrada:
                            187 ;; 	IX <= pointer to entity data
                            188 ;; Modifica AF, BC, DE, HL
                            189 ;; ===========================================
   00BA                     190 checkCenterCrossing:
   00BA DD 7E 16      [19]  191 	ld 	a, Ent_id(ix)
   00BD FE 01         [ 7]  192 	cp 	#1
   00BF 28 0F         [12]  193 	jr	z, player_1
   00C1 FE 02         [ 7]  194 		cp	#2
   00C3 20 1D         [12]  195 		jr	nz, invalid_id
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 14.
Hexadecimal [16-Bits]



                            196 			;; player 2
   00C5 DD 7E 00      [19]  197 			ld	a, Ent_x_I(ix)				;; A <= Ent_x, integer part
   00C8 FE 28         [ 7]  198 			cp	#CENTER_LIMIT
   00CA 30 16         [12]  199 			jr	nc, not_crossed				;; Ent_x <= CENTER_LIMIT? center crossed
                            200 				;; center limit crossed
   00CC DD 36 00 28   [19]  201 				ld	Ent_x_I(ix), #CENTER_LIMIT
                            202 
   00D0                     203 	player_1:
   00D0 DD 7E 00      [19]  204 			ld	a, Ent_x_I(ix)				;; A <= Ent_x, integer part
   00D3 DD 86 05      [19]  205 			add	a, Ent_w(ix)				;; A <= Ent_x + Ent_w
   00D6 FE 28         [ 7]  206 			cp	#CENTER_LIMIT
   00D8 38 08         [12]  207 			jr	c, not_crossed				;; Ent_x + Ent_w > CENTER_LIMIT? center crossed
                            208 				;; center limit crossed
   00DA 3E 28         [ 7]  209 				ld	a, #CENTER_LIMIT
   00DC DD 96 05      [19]  210 				sub	Ent_w(ix)			;; A <= CENTER_LIMIT - Ent_w
   00DF DD 77 00      [19]  211 				ld	Ent_x_I(ix), a			;; Ent_x = CENTER_LIMIT - Ent_w
                            212 
   00E2                     213 	invalid_id:
   00E2                     214 	not_crossed:
   00E2 C9            [10]  215 	ret
                            216 
                            217 
                            218 ;; ====================================
                            219 ;; Lee la entrada del teclado
                            220 ;; Entrada:
                            221 ;; 	IX <= pointer to entity data
                            222 ;; Modifica AF, BC, DE, HL, IX
                            223 ;; ====================================
   00E3                     224 checkUserInput:
   00E3 CD 00 00      [17]  225 	call cpct_scanKeyboard_asm						;;;;; TO DO DESACOPLAR ESTE CÓDIGO PARA QUE JUEGUEN 2 JUGADORES ;;;;;;;;;;
                            226 
   00E6 DD 7E 16      [19]  227 	ld 	a, Ent_id(ix)
   00E9 FE 01         [ 7]  228 	cp	#1
   00EB C2 24 01      [10]  229 	jp	nz, player_2
                            230 		;; Player 1
   00EE 21 07 20      [10]  231 		ld 	hl, #Key_D			;; HL = D Keycode
   00F1 CD 00 00      [17]  232 		call 	cpct_isKeyPressed_asm 		;; A = True/False
   00F4 FE 00         [ 7]  233 		cp 	#0 				;; A == 0?
   00F6 28 03         [12]  234 		jr 	z, d_not_pressed
                            235 			;; D is pressed
   00F8 CD 96 00      [17]  236 			call 	moveRight	
   00FB                     237 		d_not_pressed:
                            238 
   00FB 21 08 20      [10]  239 		ld 	hl, #Key_A			;; HL = A Keycode
   00FE CD 00 00      [17]  240 		call 	cpct_isKeyPressed_asm 		;; A = True/False
   0101 FE 00         [ 7]  241 		cp 	#0 				;; A == 0?
   0103 28 03         [12]  242 		jr 	z, a_not_pressed
                            243 			;; A is pressed	
   0105 CD A8 00      [17]  244 			call 	moveLeft
   0108                     245 		a_not_pressed:
                            246 
   0108 21 07 08      [10]  247 		ld 	hl, #Key_W			;; HL = W Keycode
   010B CD 00 00      [17]  248 		call 	cpct_isKeyPressed_asm 		;; A = True/False
   010E FE 00         [ 7]  249 		cp 	#0 				;; A == 0?
   0110 28 03         [12]  250 		jr 	z, w_not_pressed
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 15.
Hexadecimal [16-Bits]



                            251 			;; W is pressed
   0112 CD B1 00      [17]  252 			call 	moveUp	
   0115                     253 		w_not_pressed:
                            254 
   0115 21 07 10      [10]  255 		ld 	hl, #Key_S			;; HL = S Keycode
   0118 CD 00 00      [17]  256 		call 	cpct_isKeyPressed_asm 		;; A = True/False
   011B FE 00         [ 7]  257 		cp 	#0 				;; A == 0?
   011D 28 03         [12]  258 		jr 	z, s_not_pressed
                            259 			;; S is pressed	
   011F CD 9F 00      [17]  260 			call 	moveDown
   0122                     261 		s_not_pressed:
   0122 18 34         [12]  262 		jr five_not_pressed
                            263 
   0124                     264 	player_2:
   0124 21 00 10      [10]  265 		ld 	hl, #Key_F6			;; HL = F6 Keycode
   0127 CD 00 00      [17]  266 		call 	cpct_isKeyPressed_asm 		;; A = True/False
   012A FE 00         [ 7]  267 		cp 	#0 				;; A == 0?
   012C 28 03         [12]  268 		jr 	z, six_not_pressed
                            269 			;; D is pressed
   012E CD 96 00      [17]  270 			call 	moveRight	
   0131                     271 		six_not_pressed:
                            272 
   0131 21 02 10      [10]  273 		ld 	hl, #Key_F4			;; HL = F4 Keycode
   0134 CD 00 00      [17]  274 		call 	cpct_isKeyPressed_asm 		;; A = True/False
   0137 FE 00         [ 7]  275 		cp 	#0 				;; A == 0?
   0139 28 03         [12]  276 		jr 	z, four_not_pressed
                            277 			;; A is pressed	
   013B CD A8 00      [17]  278 			call 	moveLeft
   013E                     279 		four_not_pressed:
                            280 
   013E 21 01 08      [10]  281 		ld 	hl, #Key_F8			;; HL = F8 Keycode
   0141 CD 00 00      [17]  282 		call 	cpct_isKeyPressed_asm 		;; A = True/False
   0144 FE 00         [ 7]  283 		cp 	#0 				;; A == 0?
   0146 28 03         [12]  284 		jr 	z, eight_not_pressed
                            285 			;; W is pressed
   0148 CD B1 00      [17]  286 			call 	moveUp	
   014B                     287 		eight_not_pressed:
                            288 
   014B 21 01 10      [10]  289 		ld 	hl, #Key_F5			;; HL = F5 Keycode
   014E CD 00 00      [17]  290 		call 	cpct_isKeyPressed_asm 		;; A = True/False
   0151 FE 00         [ 7]  291 		cp 	#0 				;; A == 0?
   0153 28 03         [12]  292 		jr 	z, five_not_pressed
                            293 			;; S is pressed	
   0155 CD 9F 00      [17]  294 			call 	moveDown
   0158                     295 		five_not_pressed:
                            296 
                            297 
                            298 
   0158 CD 5C 01      [17]  299 	call checkVandB
   015B C9            [10]  300 	ret
                            301 
                            302 
                            303 ;; ====================================
                            304 ;; Funcion auxiliar para leer V y B
                            305 ;;	de la entrada por teclado
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 16.
Hexadecimal [16-Bits]



                            306 ;; Entrada:
                            307 ;; 	IX <= pointer to entity data
                            308 ;; Modifica AF, BC, DE, HL
                            309 ;; ====================================
   015C                     310 checkVandB:
   015C DD E5         [15]  311 	push 	ix
   015E CD 8F 00      [17]  312 	call 	checkFrisbeeCollision 	;; A == collision/no_collision
   0161 DD E1         [14]  313 	pop 	ix
   0163 FE 00         [ 7]  314 	cp 	#0			;; A == 0?
   0165 CA 07 02      [10]  315 	jp	z, no_collision 	;; checkFrisbeeCollision == 0?
                            316 		;; There is collision
                            317 
   0168 DD 7E 16      [19]  318 		ld 	a, Ent_id(ix)
   016B FE 01         [ 7]  319 		cp	#1
   016D 20 4D         [12]  320 		jr	nz, player_2_vorb
                            321 			;; Player 1
                            322 
   016F 21 06 80      [10]  323 			ld 	hl, #Key_V			;; HL = V Keycode
   0172 CD 00 00      [17]  324 			call 	cpct_isKeyPressed_asm 		;; A = True/False
   0175 FE 00         [ 7]  325 			cp 	#0 				;; A == 0?
   0177 28 1E         [12]  326 			jr 	z, v_not_pressed
                            327 				;; V is pressed	
   0179 21 06 40      [10]  328 				ld 	hl, #Key_B			;; HL = B Keycode
   017C CD 00 00      [17]  329 				call 	cpct_isKeyPressed_asm 		;; A = True/False
   017F FE 00         [ 7]  330 				cp 	#0 				;; A == 0?
   0181 28 08         [12]  331 				jr 	z, just_v_pressed
                            332 					;; V and B are pressed
   0183 21 00 00      [10]  333 					ld 	hl, #0			;; HL <= standard effect
   0186 CD 00 00      [17]  334 					call frisbee_setEffect		;; efecto hacia abajo
   0189 18 20         [12]  335 					jr vorb_pressed
   018B                     336 				just_v_pressed:
   018B 21 F8 FF      [10]  337 					ld 	hl, #std_N_eff		;; HL <= -standard effect
   018E DD E5         [15]  338 					push 	ix
   0190 CD 00 00      [17]  339 					call frisbee_setEffect		;; efecto hacia arriba
   0193 DD E1         [14]  340 					pop 	ix
   0195 18 14         [12]  341 					jr 	vorb_pressed
   0197                     342 			v_not_pressed:
                            343 
   0197 21 06 40      [10]  344 				ld 	hl, #Key_B			;; HL = B Keycode
   019A CD 00 00      [17]  345 				call 	cpct_isKeyPressed_asm 		;; A = True/False
   019D FE 00         [ 7]  346 				cp 	#0 				;; A == 0?
   019F 28 66         [12]  347 				jr 	z, b_not_pressed
                            348 					;; B is pressed
   01A1 21 08 00      [10]  349 					ld 	hl, #std_eff		;; HL <= standard effect
   01A4 DD E5         [15]  350 					push 	ix
   01A6 CD 00 00      [17]  351 					call frisbee_setEffect		;; efecto hacia abajo
   01A9 DD E1         [14]  352 					pop 	ix
                            353 
   01AB                     354 					vorb_pressed:
   01AB DD 66 06      [19]  355 					ld	h, Ent_vx_I(ix)		;;
   01AE DD 6E 07      [19]  356 					ld	l, Ent_vx_F(ix)		;;
   01B1 DD 56 08      [19]  357 					ld	d, Ent_vy_I(ix)		;;
   01B4 DD 5E 09      [19]  358 					ld	e, Ent_vy_F(ix)		;;
   01B7 CD 00 00      [17]  359 					call frisbee_setVelocities	;; transferimos las velocidades de la entidad al frisbee
                            360 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 17.
Hexadecimal [16-Bits]



   01BA 18 4B         [12]  361 					jr o_not_pressed
   01BC                     362 	player_2_vorb:
                            363 
   01BC 21 04 08      [10]  364 			ld 	hl, #Key_I			;; HL = I Keycode
   01BF CD 00 00      [17]  365 			call 	cpct_isKeyPressed_asm 		;; A = True/False
   01C2 FE 00         [ 7]  366 			cp 	#0 				;; A == 0?
   01C4 28 1E         [12]  367 			jr 	z, i_not_pressed
                            368 				;; I is pressed	
   01C6 21 04 04      [10]  369 				ld 	hl, #Key_O			;; HL = O Keycode
   01C9 CD 00 00      [17]  370 				call 	cpct_isKeyPressed_asm 		;; A = True/False
   01CC FE 00         [ 7]  371 				cp 	#0 				;; A == 0?
   01CE 28 08         [12]  372 				jr 	z, just_i_pressed
                            373 					;; I and O are pressed
   01D0 21 00 00      [10]  374 					ld 	hl, #0			;; HL <= standard effect
   01D3 CD 00 00      [17]  375 					call frisbee_setEffect		;; efecto hacia abajo
   01D6 18 20         [12]  376 					jr ioro_pressed
   01D8                     377 				just_i_pressed:
   01D8 21 F8 FF      [10]  378 					ld 	hl, #std_N_eff		;; HL <= -standard effect
   01DB DD E5         [15]  379 					push 	ix
   01DD CD 00 00      [17]  380 					call frisbee_setEffect		;; efecto hacia arriba
   01E0 DD E1         [14]  381 					pop 	ix
   01E2 18 14         [12]  382 					jr 	ioro_pressed
   01E4                     383 			i_not_pressed:
                            384 
   01E4 21 04 04      [10]  385 				ld 	hl, #Key_O			;; HL = O Keycode
   01E7 CD 00 00      [17]  386 				call 	cpct_isKeyPressed_asm 		;; A = True/False
   01EA FE 00         [ 7]  387 				cp 	#0 				;; A == 0?
   01EC 28 19         [12]  388 				jr 	z, o_not_pressed
                            389 					;; O is pressed
   01EE 21 08 00      [10]  390 					ld 	hl, #std_eff		;; HL <= standard effect
   01F1 DD E5         [15]  391 					push 	ix
   01F3 CD 00 00      [17]  392 					call frisbee_setEffect		;; efecto hacia abajo
   01F6 DD E1         [14]  393 					pop 	ix
                            394 
   01F8                     395 					ioro_pressed:
   01F8 DD 66 06      [19]  396 					ld	h, Ent_vx_I(ix)		;;
   01FB DD 6E 07      [19]  397 					ld	l, Ent_vx_F(ix)		;;
   01FE DD 56 08      [19]  398 					ld	d, Ent_vy_I(ix)		;;
   0201 DD 5E 09      [19]  399 					ld	e, Ent_vy_F(ix)		;;
   0204 CD 00 00      [17]  400 					call frisbee_setVelocities	;; transferimos las velocidades de la entidad al frisbee
                            401 
                            402 
   0207                     403 	no_collision:
   0207                     404 	b_not_pressed:
   0207                     405 	o_not_pressed:
   0207 C9            [10]  406 	ret
