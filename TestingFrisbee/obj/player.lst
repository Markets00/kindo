ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 1.
Hexadecimal [16-Bits]



                     0028     1 std_acc = 40 	;; standard acceleration per frame
                              2 
                     0014     3 P_HEIGHT 	= 20
                     0005     4 P_WIDTH 	= 5
                              5 
                     000A     6 MID_HEIGHT	= P_HEIGHT/2
                     0002     7 MID_WIDTH	= P_WIDTH/2
                              8 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 2.
Hexadecimal [16-Bits]



                              9 .include "utility.h.s"
                              1 ;; ====================================
                              2 ;; ====================================
                              3 ;; INCLUDED CPCTELERA FUNCTIONS
                              4 ;; ====================================
                              5 ;; ====================================
                              6 .globl cpct_waitVSYNC_asm
                              7 .globl cpct_drawSolidBox_asm
                              8 .globl cpct_getScreenPtr_asm
                              9 .globl cpct_scanKeyboard_asm
                             10 .globl cpct_isKeyPressed_asm
                             11 .globl cpct_disableFirmware_asm
                             12 .globl cpct_setVideoMode_asm
                             13 .globl cpct_setPalette_asm
                             14 .globl cpct_memcpy_asm
                             15 .globl negateHL
                             16 .globl cpct_setVideoMemoryPage_asm
                             17 .globl cpct_akp_musicPlay_asm
                             18 .globl cpct_akp_stop_asm
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 3.
Hexadecimal [16-Bits]



                             10 .include "entity.h.s"
                              1 ;; ====================================
                              2 ;; ====================================
                              3 ;; ENTITY PUBLIC FUNCTIONS
                              4 ;; ====================================
                              5 ;; ====================================
                              6 .globl entityDraw
                              7 .globl entityErase
                              8 .globl entityCheckCollision
                              9 .globl entityUpdatePhysics
                             10 .globl entityUpdatePosition
                             11 
                             12 .macro defineEntity name, x,y, h, w, vx, vy, ax, ay, normal, state, clr, id
                             13 	name'_data::
                             14 		name'_x:	.dw x		;; X coordinate			(16 bits)
                             15 		name'_y:	.dw y		;; Y coordinate			(16 bits)
                             16 		name'_h:	.db h		;; Height			(8 bits)
                             17 		name'_w:	.db w		;; Width			(8 bits)
                             18 		name'_vx:	.dw vx		;; Velocity at X axis 		(16 bits)
                             19 		name'_vy:	.dw vy		;; Velocity at Y axis		(16 bits)
                             20 		name'_ax:	.dw ax		;; Acceleration at X axis	(16 bits)
                             21 		name'_ay:	.dw ay		;; Acceleration at Y axis	(16 bits)
                             22 		name'_normal:	.dw normal	;; Normal force			(16 bits)
                             23 		name'_last_x:	.db x		;; Last x rendered		(8 bits)
                             24 		name'_erase_x:	.db x		;; x rendered at same buffer	(8 bits)
                             25 		name'_last_y:	.db y		;; Last y rendered		(8 bits)
                             26 		name'_erase_y:	.db y		;; y rendered at same buffer	(8 bits)
                             27 		name'_state:	.db state	;; Entity enabled/disabled	(8 bits)
                             28 		name'_clr:	.db clr		;; Entity color pattern		(8 bits)
                             29 		name'_id:	.db id		;; Numeric ID			(8 bits)
                             30 .endm
                             31 
                             32 
                             33 ;; ====================================
                             34 ;; ====================================
                             35 ;; ENTITY PUBLIC DATA
                             36 ;; ====================================
                             37 ;; ====================================
                     0000    38 .equ Ent_x_I, 		0	;; X coordinate, integer part
                     0001    39 .equ Ent_x_F, 		1	;; X coordinate, fractional part
                     0002    40 .equ Ent_y_I, 		2	;; Y coordinate, integer part
                     0003    41 .equ Ent_y_F, 		3	;; Y coordinate, fractional part
                     0004    42 .equ Ent_h, 		4	;; Height
                     0005    43 .equ Ent_w, 		5	;; Width
                     0006    44 .equ Ent_vx_I,		6	;; Velocity at X axis, integer part
                     0007    45 .equ Ent_vx_F,		7	;; Velocity at X axis, fractional part
                     0008    46 .equ Ent_vy_I,		8	;; Velocity at Y axis, integer part
                     0009    47 .equ Ent_vy_F,		9	;; Velocity at Y axis, fractional part
                     000A    48 .equ Ent_ax_I,		10	;; Acceleration at X axis, integer part
                     000B    49 .equ Ent_ax_F,		11	;; Acceleration at X axis, fractional part
                     000C    50 .equ Ent_ay_I,		12	;; Acceleration at Y axis, integer part
                     000D    51 .equ Ent_ay_F,		13	;; Acceleration at Y axis, fractional part
                     000E    52 .equ Ent_N_I,		14	;; Normal force, integer part
                     000F    53 .equ Ent_N_F,		15	;; Normal force, fractional part
                     0010    54 .equ Ent_last_x,	16	;; Last x rendered
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 4.
Hexadecimal [16-Bits]



                     0011    55 .equ Ent_erase_x,	17	;; x rendered at same buffer
                     0012    56 .equ Ent_last_y,	18	;; Last y rendered
                     0013    57 .equ Ent_erase_y,	19	;; y rendered at same buffer
                     0014    58 .equ Ent_state,		20	;; Entity enabled/disabled
                     0015    59 .equ Ent_clr, 		21	;; Entity color pattern
                     0016    60 .equ Ent_id, 		22	;; Numeric ID
                             61 				;; Frisbee 	0
                             62 				;; Player1 	1
                             63 				;; Enemy1	2
                             64 
                     0003    65 .equ MAX_VEL_X, 3 
                     FFFFFFFD    66 .equ MIN_VEL_X, -3
                     0003    67 .equ MAX_VEL_Y, 3
                     FFFFFFFD    68 .equ MIN_VEL_Y, -3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 5.
Hexadecimal [16-Bits]



                             11 .include "frisbee.h.s"
                              1 ;; =========================
                              2 ;; =========================
                              3 ;; FRISBEE PUBLIC FUNCTIONS
                              4 ;; =========================
                              5 ;; =========================
                              6 .globl frisbee_erase
                              7 .globl frisbee_update
                              8 .globl frisbee_draw
                              9 .globl frisbee_data
                             10 .globl frisbee_setOff
                             11 .globl frisbee_setEffect
                             12 .globl frisbee_setVelocities
                             13 .globl frisbee_checkGoal
                             14 	
                     0017    15 .equ Frisbee_effect_I, 23
                     0018    16 .equ Frisbee_effect_F, 24
                     0008    17 .equ std_eff, 0x0008
                     FFF8    18 .equ std_N_eff, 0xFFF8
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 6.
Hexadecimal [16-Bits]



                             12 .include "game.h.s"
                              1 ;; ====================================
                              2 ;; ====================================
                              3 ;; GAME PUBLIC FUNCTIONS
                              4 ;; ====================================
                              5 ;; ====================================
                              6 .globl gameStart
                              7 .globl getVideoPtr
                              8 .globl incTeam1Points
                              9 .globl incTeam2Points
                             10 .globl play_music	;; alomejor son privados
                             11 .globl stop_music	;; alomejor son privados
                             12 .globl game_data
                             13 
                             14 ;; ====================================
                             15 ;; ====================================
                             16 ;; GAME PUBLIC DATA
                             17 ;; ====================================
                             18 ;; ====================================
                     0050    19 .equ RIGHT_LIMIT,	80
                     0000    20 .equ LEFT_LIMIT,	0
                     000A    21 .equ TOP_LIMIT,	 	10
                     00C8    22 .equ BOTTOM_LIMIT,	200
                     0028    23 .equ CENTER_LIMIT,	40
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 7.
Hexadecimal [16-Bits]



                             13 .include "keyboard/keyboard.s"
                              1 ;;-----------------------------LICENSE NOTICE------------------------------------
                              2 ;;  This file is part of CPCtelera: An Amstrad CPC Game Engine 
                              3 ;;  Copyright (C) 2014 ronaldo / Fremos / Cheesetea / ByteRealms (@FranGallegoBR)
                              4 ;;
                              5 ;;  This program is free software: you can redistribute it and/or modify
                              6 ;;  it under the terms of the GNU Lesser General Public License as published by
                              7 ;;  the Free Software Foundation, either version 3 of the License, or
                              8 ;;  (at your option) any later version.
                              9 ;;
                             10 ;;  This program is distributed in the hope that it will be useful,
                             11 ;;  but WITHOUT ANY WARRANTY; without even the implied warranty of
                             12 ;;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                             13 ;;  GNU Lesser General Public License for more details.
                             14 ;;
                             15 ;;  You should have received a copy of the GNU Lesser General Public License
                             16 ;;  along with this program.  If not, see <http://www.gnu.org/licenses/>.
                             17 ;;-------------------------------------------------------------------------------
                             18 .module cpct_keyboard
                             19 
                             20 ;; bndry directive does not work when linking previously compiled files
                             21 ;.bndry 16
                             22 ;;   16-byte aligned in memory to let functions use 8-bit maths for pointing
                             23 ;;   (alignment not working on user linking)
                             24 
   0000                      25 _cpct_keyboardStatusBuffer:: .ds 10
                             26 
                             27 ;;
                             28 ;; Assembly constant definitions for keyboard mapping
                             29 ;;
                             30 
                             31 ;; Matrix Line 0x00
                     0100    32 .equ Key_CursorUp     ,#0x0100  ;; Bit 0 (01h) => | 0000 0001 |
                     0200    33 .equ Key_CursorRight  ,#0x0200  ;; Bit 1 (02h) => | 0000 0010 |
                     0400    34 .equ Key_CursorDown   ,#0x0400  ;; Bit 2 (04h) => | 0000 0100 |
                     0800    35 .equ Key_F9           ,#0x0800  ;; Bit 3 (08h) => | 0000 1000 |
                     1000    36 .equ Key_F6           ,#0x1000  ;; Bit 4 (10h) => | 0001 0000 |
                     2000    37 .equ Key_F3           ,#0x2000  ;; Bit 5 (20h) => | 0010 0000 |
                     4000    38 .equ Key_Enter        ,#0x4000  ;; Bit 6 (40h) => | 0100 0000 |
                     8000    39 .equ Key_FDot         ,#0x8000  ;; Bit 7 (80h) => | 1000 0000 |
                             40 ;; Matrix Line 0x01
                     0101    41 .equ Key_CursorLeft   ,#0x0101
                     0201    42 .equ Key_Copy         ,#0x0201
                     0401    43 .equ Key_F7           ,#0x0401
                     0801    44 .equ Key_F8           ,#0x0801
                     1001    45 .equ Key_F5           ,#0x1001
                     2001    46 .equ Key_F1           ,#0x2001
                     4001    47 .equ Key_F2           ,#0x4001
                     8001    48 .equ Key_F0           ,#0x8001
                             49 ;; Matrix Line 0x02
                     0102    50 .equ Key_Clr          ,#0x0102
                     0202    51 .equ Key_OpenBracket  ,#0x0202
                     0402    52 .equ Key_Return       ,#0x0402
                     0802    53 .equ Key_CloseBracket ,#0x0802
                     1002    54 .equ Key_F4           ,#0x1002
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 8.
Hexadecimal [16-Bits]



                     2002    55 .equ Key_Shift        ,#0x2002
                     4002    56 .equ Key_BackSlash    ,#0x4002
                     8002    57 .equ Key_Control      ,#0x8002
                             58 ;; Matrix Line 0x03
                     0103    59 .equ Key_Caret        ,#0x0103
                     0203    60 .equ Key_Hyphen       ,#0x0203
                     0403    61 .equ Key_At           ,#0x0403
                     0803    62 .equ Key_P            ,#0x0803
                     1003    63 .equ Key_SemiColon    ,#0x1003
                     2003    64 .equ Key_Colon        ,#0x2003
                     4003    65 .equ Key_Slash        ,#0x4003
                     8003    66 .equ Key_Dot          ,#0x8003
                             67 ;; Matrix Line 0x04
                     0104    68 .equ Key_0            ,#0x0104
                     0204    69 .equ Key_9            ,#0x0204
                     0404    70 .equ Key_O            ,#0x0404
                     0804    71 .equ Key_I            ,#0x0804
                     1004    72 .equ Key_L            ,#0x1004
                     2004    73 .equ Key_K            ,#0x2004
                     4004    74 .equ Key_M            ,#0x4004
                     8004    75 .equ Key_Comma        ,#0x8004
                             76 ;; Matrix Line 0x05
                     0105    77 .equ Key_8            ,#0x0105
                     0205    78 .equ Key_7            ,#0x0205
                     0405    79 .equ Key_U            ,#0x0405
                     0805    80 .equ Key_Y            ,#0x0805
                     1005    81 .equ Key_H            ,#0x1005
                     2005    82 .equ Key_J            ,#0x2005
                     4005    83 .equ Key_N            ,#0x4005
                     8005    84 .equ Key_Space        ,#0x8005
                             85 ;; Matrix Line 0x06
                     0106    86 .equ Key_6            ,#0x0106
                     0106    87 .equ Joy1_Up          ,#0x0106
                     0206    88 .equ Key_5            ,#0x0206
                     0206    89 .equ Joy1_Down        ,#0x0206
                     0406    90 .equ Key_R            ,#0x0406
                     0406    91 .equ Joy1_Left        ,#0x0406
                     0806    92 .equ Key_T            ,#0x0806
                     0806    93 .equ Joy1_Right       ,#0x0806
                     1006    94 .equ Key_G            ,#0x1006
                     1006    95 .equ Joy1_Fire1       ,#0x1006
                     2006    96 .equ Key_F            ,#0x2006
                     2006    97 .equ Joy1_Fire2       ,#0x2006
                     4006    98 .equ Key_B            ,#0x4006
                     4006    99 .equ Joy1_Fire3       ,#0x4006
                     8006   100 .equ Key_V            ,#0x8006
                            101 ;; Matrix Line 0x07
                     0107   102 .equ Key_4            ,#0x0107
                     0207   103 .equ Key_3            ,#0x0207
                     0407   104 .equ Key_E            ,#0x0407
                     0807   105 .equ Key_W            ,#0x0807
                     1007   106 .equ Key_S            ,#0x1007
                     2007   107 .equ Key_D            ,#0x2007
                     4007   108 .equ Key_C            ,#0x4007
                     8007   109 .equ Key_X            ,#0x8007
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 9.
Hexadecimal [16-Bits]



                            110 ;; Matrix Line 0x08
                     0108   111 .equ Key_1            ,#0x0108
                     0208   112 .equ Key_2            ,#0x0208
                     0408   113 .equ Key_Esc          ,#0x0408
                     0808   114 .equ Key_Q            ,#0x0808
                     1008   115 .equ Key_Tab          ,#0x1008
                     2008   116 .equ Key_A            ,#0x2008
                     4008   117 .equ Key_CapsLock     ,#0x4008
                     8008   118 .equ Key_Z            ,#0x8008
                            119 ;; Matrix Line 0x09
                     0109   120 .equ Joy0_Up          ,#0x0109
                     0209   121 .equ Joy0_Down        ,#0x0209
                     0409   122 .equ Joy0_Left        ,#0x0409
                     0809   123 .equ Joy0_Right       ,#0x0809
                     1009   124 .equ Joy0_Fire1       ,#0x1009
                     2009   125 .equ Joy0_Fire2       ,#0x2009
                     4009   126 .equ Joy0_Fire3       ,#0x4009
                     8009   127 .equ Key_Del          ,#0x8009
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 10.
Hexadecimal [16-Bits]



                             14 .globl _moveIA
                             15 
                             16 ;; ====================================
                             17 ;; ====================================
                             18 ;; PRIVATE DATA
                             19 ;; ====================================
                             20 ;; ====================================
                             21 
                             22 ;; .macro defineEntity name, x,y, h, w, vx, vy, ax, ay, normal, state, clr, id
                             23 
   000A                      24 defineEntity player, #0x0010, #0x0050, #P_HEIGHT, #P_WIDTH, #0000, #0000, #0000, #0000, #0x1000, #1, #0xF0, #1
   000A                       1 	player_data::
   000A 10 00                 2 		player_x:	.dw #0x0010		;; X coordinate			(16 bits)
   000C 50 00                 3 		player_y:	.dw #0x0050		;; Y coordinate			(16 bits)
   000E 14                    4 		player_h:	.db #P_HEIGHT		;; Height			(8 bits)
   000F 05                    5 		player_w:	.db #P_WIDTH		;; Width			(8 bits)
   0010 00 00                 6 		player_vx:	.dw #0000		;; Velocity at X axis 		(16 bits)
   0012 00 00                 7 		player_vy:	.dw #0000		;; Velocity at Y axis		(16 bits)
   0014 00 00                 8 		player_ax:	.dw #0000		;; Acceleration at X axis	(16 bits)
   0016 00 00                 9 		player_ay:	.dw #0000		;; Acceleration at Y axis	(16 bits)
   0018 00 10                10 		player_normal:	.dw #0x1000	;; Normal force			(16 bits)
   001A 10                   11 		player_last_x:	.db #0x0010		;; Last x rendered		(8 bits)
   001B 10                   12 		player_erase_x:	.db #0x0010		;; x rendered at same buffer	(8 bits)
   001C 50                   13 		player_last_y:	.db #0x0050		;; Last y rendered		(8 bits)
   001D 50                   14 		player_erase_y:	.db #0x0050		;; y rendered at same buffer	(8 bits)
   001E 01                   15 		player_state:	.db #1	;; Entity enabled/disabled	(8 bits)
   001F F0                   16 		player_clr:	.db #0xF0		;; Entity color pattern		(8 bits)
   0020 01                   17 		player_id:	.db #1		;; Numeric ID			(8 bits)
                             25 
   0021                      26 defineEntity enemy, #0x0050-0x0004, #0x0064, #P_HEIGHT, #P_WIDTH, #0000, #0000, #0000, #0000, #0x1000, #1, #0xFF, #2
   0021                       1 	enemy_data::
   0021 4C 00                 2 		enemy_x:	.dw #0x0050-0x0004		;; X coordinate			(16 bits)
   0023 64 00                 3 		enemy_y:	.dw #0x0064		;; Y coordinate			(16 bits)
   0025 14                    4 		enemy_h:	.db #P_HEIGHT		;; Height			(8 bits)
   0026 05                    5 		enemy_w:	.db #P_WIDTH		;; Width			(8 bits)
   0027 00 00                 6 		enemy_vx:	.dw #0000		;; Velocity at X axis 		(16 bits)
   0029 00 00                 7 		enemy_vy:	.dw #0000		;; Velocity at Y axis		(16 bits)
   002B 00 00                 8 		enemy_ax:	.dw #0000		;; Acceleration at X axis	(16 bits)
   002D 00 00                 9 		enemy_ay:	.dw #0000		;; Acceleration at Y axis	(16 bits)
   002F 00 10                10 		enemy_normal:	.dw #0x1000	;; Normal force			(16 bits)
   0031 4C                   11 		enemy_last_x:	.db #0x0050-0x0004		;; Last x rendered		(8 bits)
   0032 4C                   12 		enemy_erase_x:	.db #0x0050-0x0004		;; x rendered at same buffer	(8 bits)
   0033 64                   13 		enemy_last_y:	.db #0x0064		;; Last y rendered		(8 bits)
   0034 64                   14 		enemy_erase_y:	.db #0x0064		;; y rendered at same buffer	(8 bits)
   0035 01                   15 		enemy_state:	.db #1	;; Entity enabled/disabled	(8 bits)
   0036 FF                   16 		enemy_clr:	.db #0xFF		;; Entity color pattern		(8 bits)
   0037 02                   17 		enemy_id:	.db #2		;; Numeric ID			(8 bits)
                             27 
                             28 
                             29 ; defineEntity player_2, #0x0010, #0x0050, #20, #5, #0000, #0000, #0000, #0000, #0x0300, #1, #0xF0, #1
                             30 ; defineEntity enemy_2, #0x0050-0x0004, #0x0064, #20, #5, #0000, #0000, #0000, #0000, #0x0300, #1, #0xFF, #2
                             31 	
                             32 ;; ====================================
                             33 ;; ====================================
                             34 ;; PUBLIC FUNCTIONS
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 11.
Hexadecimal [16-Bits]



                             35 ;; ====================================
                             36 ;; ====================================
   0038                      37 player_erase::
   0038 DD 21 0A 00   [14]   38 	ld 	ix, #player_data
   003C CD 00 00      [17]   39 	call 	entityErase		;; Erase player
   003F DD 21 21 00   [14]   40 	ld 	ix, #enemy_data
   0043 CD 00 00      [17]   41 	call 	entityErase		;; Erase enemy
                             42 
   0046 C9            [10]   43 	ret
                             44 
                             45 ;; =========================================
                             46 ;; Actualiza el estado del player recibido
                             47 ;; 	en IX
                             48 ;; Entrada:
                             49 ;;	IX => Pointer to player data
                             50 ;; Modifica: AF, BC, DE, HL, IX
                             51 ;; =========================================
mp 0047                      52 player_update::
   0047 CD 70 01      [17]   53 	call checkUserInput
                             54 
                             55 
                             56 
   004A DD 7E 16      [19]   57 	ld	a, Ent_id(ix)
   004D FE 02         [ 7]   58 	cp	#2
   004F 28 09         [12]   59 	jr	z, check_IA		;; Ent_id == 2? check IA
   0051 FE 04         [ 7]   60 	cp	#4
   0053 28 05         [12]   61 	jr	z, check_IA		;; Ent_id == 4? check IA
                             62 		;; check input
   0055 CD 70 01      [17]   63 		call checkUserInput
   0058 18 03         [12]   64 		jr continue_updating
                             65 
   005A                      66 	check_IA:
   005A CD E0 00      [17]   67 		call move_IA
                             68 
   005D                      69 	continue_updating:
                             70 
   005D CD 00 00      [17]   71 	call entityUpdatePhysics
   0060 CD 00 00      [17]   72 	call entityUpdatePosition
   0063 CD 45 01      [17]   73 	call checkCenterCrossing
                             74 	
   0066 C9            [10]   75 	ret
                             76 
                             77 ;; =========================================
                             78 ;; Actualiza el estado de los entities tipo
                             79 ;;	player
                             80 ;; Modifica: AF, IX
                             81 ;; =========================================
mp 0067                      82 player_update::
   0067 DD 21 0A 00   [14]   83 	ld 	ix, #player_data
   006B CD 70 01      [17]   84 	call checkUserInput
                             85 
   006E DD 21 21 00   [14]   86 	ld 	ix, #enemy_data
   0072 CD 70 01      [17]   87 	call checkUserInput
                             88 
                             89 ;	call move_IA
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 12.
Hexadecimal [16-Bits]



                             90 
   0075 DD 21 0A 00   [14]   91 	ld 	ix, #player_data
   0079 CD 00 00      [17]   92 	call entityUpdatePhysics
   007C DD 21 21 00   [14]   93 	ld 	ix, #enemy_data
   0080 CD 00 00      [17]   94 	call entityUpdatePhysics
                             95 
   0083 DD 21 0A 00   [14]   96 	ld 	ix, #player_data
   0087 CD 00 00      [17]   97 	call entityUpdatePosition
   008A DD 21 21 00   [14]   98 	ld 	ix, #enemy_data
   008E CD 00 00      [17]   99 	call entityUpdatePosition
                            100 
                            101 
   0091 DD 21 0A 00   [14]  102 	ld 	ix, #player_data
   0095 CD 45 01      [17]  103 	call checkCenterCrossing
   0098 DD 21 21 00   [14]  104 	ld 	ix, #enemy_data
   009C CD 45 01      [17]  105 	call checkCenterCrossing
   009F C9            [10]  106 	ret
                            107 
   00A0                     108 player_draw::
   00A0 DD 21 0A 00   [14]  109 	ld 	ix, #player_data
   00A4 CD 00 00      [17]  110 	call 	entityDraw		;; Draw player
   00A7 DD 21 21 00   [14]  111 	ld 	ix, #enemy_data
   00AB CD 00 00      [17]  112 	call 	entityDraw		;; Draw enemy
                            113 
   00AE C9            [10]  114 	ret
                            115 	
                            116 ;; ====================================
                            117 ;; ====================================
                            118 ;; PRIVATE FUNCTIONS
                            119 ;; ====================================
                            120 ;; ====================================
                            121 
                            122 ;; =========================================
                            123 ;; Determina el siguiente estado de
                            124 ;;	la entidad
                            125 ;; Entrada:
                            126 ;; =========================================
   00AF                     127 delta:
                            128 
   00AF                     129 update_state:
                            130 
                            131 ;; =========================================
                            132 ;; Invierte los datos para poder operarlos
                            133 ;;	en C
                            134 ;; Entrada:
                            135 ;;	IX <= Pointer to entity data
                            136 ;;	Modifica: BC
                            137 ;; =========================================
   00AF                     138 invert_variables:
                            139 	;; Inverts X
   00AF DD 46 00      [19]  140 	ld	b,	Ent_x_I(ix)
   00B2 DD 4E 01      [19]  141 	ld	c,	Ent_x_F(ix)
   00B5 DD 71 00      [19]  142 	ld	Ent_x_I(ix), c
   00B8 DD 70 01      [19]  143 	ld	Ent_x_F(ix), b
                            144 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 13.
Hexadecimal [16-Bits]



                            145 	;; Inverts Y
   00BB DD 46 02      [19]  146 	ld	b,	Ent_y_I(ix)
   00BE DD 4E 03      [19]  147 	ld	c,	Ent_y_F(ix)
   00C1 DD 71 02      [19]  148 	ld	Ent_y_I(ix), c
   00C4 DD 70 03      [19]  149 	ld	Ent_y_F(ix), b
                            150 
                            151 	;; Inverts AX
   00C7 DD 46 0A      [19]  152 	ld	b, Ent_ax_I(ix)		 
   00CA DD 4E 0B      [19]  153 	ld	c, Ent_ax_F(ix)		 
   00CD DD 71 0A      [19]  154 	ld	Ent_ax_I(ix), c		 
   00D0 DD 70 0B      [19]  155 	ld	Ent_ax_F(ix), b		
                            156 
                            157 	;; Inverts AY
   00D3 DD 46 0C      [19]  158 	ld	b, Ent_ay_I(ix)		 
   00D6 DD 4E 0D      [19]  159 	ld	c, Ent_ay_F(ix)		 
   00D9 DD 71 0C      [19]  160 	ld	Ent_ay_I(ix), c		 
   00DC DD 70 0D      [19]  161 	ld	Ent_ay_F(ix), b		
                            162 
                            163 	;; FALTARIA EFECTO, CUIDAO
                            164 
   00DF C9            [10]  165 	ret
                            166 
   00E0                     167 move_IA:
                            168 
   00E0 DD 21 00 00   [14]  169 	ld	ix, #frisbee_data
   00E4 DD E5         [15]  170 	push 	ix
   00E6 CD AF 00      [17]  171 	call 	invert_variables
   00E9 DD 21 0A 00   [14]  172 	ld	ix, #player_data
   00ED DD E5         [15]  173 	push 	ix
   00EF CD AF 00      [17]  174 	call 	invert_variables
   00F2 DD 21 21 00   [14]  175 	ld	ix, #enemy_data
   00F6 DD E5         [15]  176 	push 	ix
   00F8 CD AF 00      [17]  177 	call 	invert_variables
   00FB CD 00 00      [17]  178 	call _moveIA			;; moveIA(TEntity* myself, TEntity* enemy, TEntity* frisbee)
                            179 	
   00FE DD E1         [14]  180 	pop 	ix
   0100 DD E1         [14]  181 	pop 	ix
   0102 DD E1         [14]  182 	pop 	ix
                            183 
   0104 DD 21 00 00   [14]  184 	ld	ix, #frisbee_data
   0108 CD AF 00      [17]  185 	call 	invert_variables
   010B DD 21 0A 00   [14]  186 	ld	ix, #player_data
   010F CD AF 00      [17]  187 	call 	invert_variables
   0112 DD 21 21 00   [14]  188 	ld	ix, #enemy_data
   0116 CD AF 00      [17]  189 	call 	invert_variables
                            190 
                            191 
   0119 C9            [10]  192 	ret
                            193 	
                            194 ;; =========================================
                            195 ;; Comprueba si la entidad colisiona con 
                            196 ;; 	el frisbee
                            197 ;; Entrada:
                            198 ;; 	IX <= puntero al player a comparar
                            199 ;; 		con el frisbee
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 14.
Hexadecimal [16-Bits]



                            200 ;; Modifica: AF, B, HL, IX
                            201 ;; Devuelve:
                            202 ;; 	A <= 	0 si no hay colisión
                            203 ;; 		>1 si hay colisión
                            204 ;; =========================================
   011A                     205 checkFrisbeeCollision:
   011A 21 00 00      [10]  206 	ld 	hl, #frisbee_data	;; HL <= frisbee_data
   011D CD 00 00      [17]  207 	call 	entityCheckCollision 	;; A <= collison/no_collision
                            208 
   0120 C9            [10]  209 	ret
                            210 
                            211 
                            212 ;; ===============================================
                            213 ;; Acelera la entidad hacia la derecha, si puede
                            214 ;; Entrada:
                            215 ;; 	IX <= puntero a los datos de la entidad
                            216 ;; Modifica A, IX
                            217 ;; ===============================================
   0121                     218 moveRight:
                            219 	;; push 	ix
                            220 	;; call 	checkFrisbeeCollision 	;; A == collision/no_collision
                            221 	;; pop 	ix
                            222 	;; cp 	#0			;; A == 0?
                            223 	;; jr	nz, collision_right 	;; checkFrisbeeCollision != 0?
                            224 
                            225 		;; no_collision
   0121 DD 36 0A 00   [19]  226 		ld 	Ent_ax_I(ix), #0
   0125 DD 36 0B 28   [19]  227 		ld 	Ent_ax_F(ix), #std_acc	;; Ent_ay <= 00(0)E2(30) (30)
                            228 
                            229 
   0129 C9            [10]  230 		ret
                            231 
                            232 	;;collision_right:
                            233 	;;	call 	frisbee_setOff
                            234 	;;
                            235 	;;	ret
                            236 
                            237 ;; ===============================================
                            238 ;; Acelera la entidad hacia abajo, si puede
                            239 ;; Entrada:
                            240 ;; 	IX <= puntero a los datos de la entidad
                            241 ;; Modifica A, IX
                            242 ;; ===============================================
   012A                     243 moveDown:
   012A DD 36 0C 00   [19]  244 	ld 	Ent_ay_I(ix), #0
   012E DD 36 0D 28   [19]  245 	ld 	Ent_ay_F(ix), #std_acc	;; Ent_ay <= 00(0)E2(30) (30)
                            246 
   0132 C9            [10]  247 	ret
                            248 
                            249 ;; ===============================================
                            250 ;; Acelera la entidad hacia la izquierda, si puede
                            251 ;; Entrada:
                            252 ;; 	IX <= puntero a los datos de la entidad
                            253 ;; Modifica A, IX
                            254 ;; ===============================================
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 15.
Hexadecimal [16-Bits]



   0133                     255 moveLeft:
   0133 DD 36 0A FF   [19]  256 	ld 	Ent_ax_I(ix), #-1
   0137 DD 36 0B D8   [19]  257 	ld 	Ent_ax_F(ix), #-std_acc	;; Ent_ax <= FF(-1)E2(-30) (-30)
                            258 
   013B C9            [10]  259 	ret
                            260 
                            261 ;; ===============================================
                            262 ;; Acelera la entidad hacia arriba, si puede
                            263 ;; Entrada:
                            264 ;; 	IX <= puntero a los datos de la entidad
                            265 ;; Modifica A, IX
                            266 ;; ===============================================
   013C                     267 moveUp:
   013C DD 36 0C FF   [19]  268 	ld 	Ent_ay_I(ix), #-1
   0140 DD 36 0D D8   [19]  269 	ld 	Ent_ay_F(ix), #-std_acc	;; Ent_ay <= FF(-1)E2(-30) (-30)
                            270 
   0144 C9            [10]  271 	ret
                            272 
                            273 
                            274 ;; ===========================================
                            275 ;; Chequea si un jugador pasa del centro del
                            276 ;; 	campo y lo corrige en caso necesario
                            277 ;; Entrada:
                            278 ;; 	IX <= pointer to entity data
                            279 ;; Modifica AF, BC, DE, HL
                            280 ;; ===========================================
   0145                     281 checkCenterCrossing:
   0145 DD 7E 16      [19]  282 	ld 	a, Ent_id(ix)
   0148 FE 01         [ 7]  283 	cp 	#1
   014A 28 11         [12]  284 	jr	z, player_1
   014C FE 02         [ 7]  285 		cp	#2
   014E 20 1F         [12]  286 		jr	nz, invalid_id
                            287 			;; player 2
   0150 3E 28         [ 7]  288 			ld	a, #CENTER_LIMIT				;; A <= Ent_x, integer part
   0152 DD BE 00      [19]  289 			cp	Ent_x_I(ix)
   0155 38 18         [12]  290 			jr	c, not_crossed				;; Ent_x <= CENTER_LIMIT? center crossed
                            291 				;; center limit crossed
   0157 DD 36 00 28   [19]  292 				ld	Ent_x_I(ix), #CENTER_LIMIT
   015B 18 12         [12]  293 				jr not_crossed
                            294 
   015D                     295 	player_1:
   015D DD 7E 00      [19]  296 			ld	a, Ent_x_I(ix)				;; A <= Ent_x, integer part
   0160 DD 86 05      [19]  297 			add	a, Ent_w(ix)				;; A <= Ent_x + Ent_w
   0163 FE 28         [ 7]  298 			cp	#CENTER_LIMIT
   0165 38 08         [12]  299 			jr	c, not_crossed				;; Ent_x + Ent_w > CENTER_LIMIT? center crossed
                            300 				;; center limit crossed
   0167 3E 28         [ 7]  301 				ld	a, #CENTER_LIMIT
   0169 DD 96 05      [19]  302 				sub	Ent_w(ix)			;; A <= CENTER_LIMIT - Ent_w
   016C DD 77 00      [19]  303 				ld	Ent_x_I(ix), a			;; Ent_x = CENTER_LIMIT - Ent_w
                            304 
   016F                     305 	invalid_id:
   016F                     306 	not_crossed:
   016F C9            [10]  307 	ret
                            308 
                            309 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 16.
Hexadecimal [16-Bits]



                            310 ;; ====================================
                            311 ;; Lee la entrada del teclado
                            312 ;; Entrada:
                            313 ;; 	IX <= pointer to entity data
                            314 ;; Modifica AF, BC, DE, HL
                            315 ;; ====================================
   0170                     316 checkUserInput:
   0170 CD 00 00      [17]  317 	call cpct_scanKeyboard_asm						;;;;; TO DO DESACOPLAR ESTE CÓDIGO PARA QUE JUEGUEN 2 JUGADORES ;;;;;;;;;;
                            318 
   0173 DD 7E 16      [19]  319 	ld 	a, Ent_id(ix)
   0176 FE 01         [ 7]  320 	cp	#1
   0178 C2 B1 01      [10]  321 	jp	nz, player_2
                            322 		;; Player 1
   017B 21 07 20      [10]  323 		ld 	hl, #Key_D			;; HL = D Keycode
   017E CD 00 00      [17]  324 		call 	cpct_isKeyPressed_asm 		;; A = True/False
   0181 FE 00         [ 7]  325 		cp 	#0 				;; A == 0?
   0183 28 03         [12]  326 		jr 	z, d_not_pressed
                            327 			;; D is pressed
   0185 CD 21 01      [17]  328 			call 	moveRight	
   0188                     329 		d_not_pressed:
                            330 
   0188 21 08 20      [10]  331 		ld 	hl, #Key_A			;; HL = A Keycode
   018B CD 00 00      [17]  332 		call 	cpct_isKeyPressed_asm 		;; A = True/False
   018E FE 00         [ 7]  333 		cp 	#0 				;; A == 0?
   0190 28 03         [12]  334 		jr 	z, a_not_pressed
                            335 			;; A is pressed	
   0192 CD 33 01      [17]  336 			call 	moveLeft
   0195                     337 		a_not_pressed:
                            338 
   0195 21 07 08      [10]  339 		ld 	hl, #Key_W			;; HL = W Keycode
   0198 CD 00 00      [17]  340 		call 	cpct_isKeyPressed_asm 		;; A = True/False
   019B FE 00         [ 7]  341 		cp 	#0 				;; A == 0?
   019D 28 03         [12]  342 		jr 	z, w_not_pressed
                            343 			;; W is pressed
   019F CD 3C 01      [17]  344 			call 	moveUp	
   01A2                     345 		w_not_pressed:
                            346 
   01A2 21 07 10      [10]  347 		ld 	hl, #Key_S			;; HL = S Keycode
   01A5 CD 00 00      [17]  348 		call 	cpct_isKeyPressed_asm 		;; A = True/False
   01A8 FE 00         [ 7]  349 		cp 	#0 				;; A == 0?
   01AA 28 03         [12]  350 		jr 	z, s_not_pressed
                            351 			;; S is pressed	
   01AC CD 2A 01      [17]  352 			call 	moveDown
   01AF                     353 		s_not_pressed:
   01AF 18 34         [12]  354 		jr five_not_pressed
                            355 
   01B1                     356 	player_2:
   01B1 21 00 10      [10]  357 		ld 	hl, #Key_F6			;; HL = F6 Keycode
   01B4 CD 00 00      [17]  358 		call 	cpct_isKeyPressed_asm 		;; A = True/False
   01B7 FE 00         [ 7]  359 		cp 	#0 				;; A == 0?
   01B9 28 03         [12]  360 		jr 	z, six_not_pressed
                            361 			;; D is pressed
   01BB CD 21 01      [17]  362 			call 	moveRight	
   01BE                     363 		six_not_pressed:
                            364 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 17.
Hexadecimal [16-Bits]



   01BE 21 02 10      [10]  365 		ld 	hl, #Key_F4			;; HL = F4 Keycode
   01C1 CD 00 00      [17]  366 		call 	cpct_isKeyPressed_asm 		;; A = True/False
   01C4 FE 00         [ 7]  367 		cp 	#0 				;; A == 0?
   01C6 28 03         [12]  368 		jr 	z, four_not_pressed
                            369 			;; A is pressed	
   01C8 CD 33 01      [17]  370 			call 	moveLeft
   01CB                     371 		four_not_pressed:
                            372 
   01CB 21 01 08      [10]  373 		ld 	hl, #Key_F8			;; HL = F8 Keycode
   01CE CD 00 00      [17]  374 		call 	cpct_isKeyPressed_asm 		;; A = True/False
   01D1 FE 00         [ 7]  375 		cp 	#0 				;; A == 0?
   01D3 28 03         [12]  376 		jr 	z, eight_not_pressed
                            377 			;; W is pressed
   01D5 CD 3C 01      [17]  378 			call 	moveUp	
   01D8                     379 		eight_not_pressed:
                            380 
   01D8 21 01 10      [10]  381 		ld 	hl, #Key_F5			;; HL = F5 Keycode
   01DB CD 00 00      [17]  382 		call 	cpct_isKeyPressed_asm 		;; A = True/False
   01DE FE 00         [ 7]  383 		cp 	#0 				;; A == 0?
   01E0 28 03         [12]  384 		jr 	z, five_not_pressed
                            385 			;; S is pressed	
   01E2 CD 2A 01      [17]  386 			call 	moveDown
   01E5                     387 		five_not_pressed:
                            388 
                            389 
                            390 
   01E5 CD E9 01      [17]  391 	call checkVandB
   01E8 C9            [10]  392 	ret
                            393 
                            394 
                            395 ;; ====================================
                            396 ;; Funcion auxiliar para leer V y B
                            397 ;;	de la entrada por teclado
                            398 ;; Entrada:
                            399 ;; 	IX <= pointer to entity data
                            400 ;; Modifica AF, BC, DE, HL
                            401 ;; ====================================
   01E9                     402 checkVandB:
   01E9 DD E5         [15]  403 	push 	ix
   01EB CD 1A 01      [17]  404 	call 	checkFrisbeeCollision 	;; A == collision/no_collision
   01EE DD E1         [14]  405 	pop 	ix
   01F0 FE 00         [ 7]  406 	cp 	#0			;; A == 0?
   01F2 CA 9E 02      [10]  407 	jp	z, no_collision 	;; checkFrisbeeCollision == 0?
                            408 		;; There is collision
                            409 
   01F5 DD 7E 16      [19]  410 		ld 	a, Ent_id(ix)
   01F8 FE 01         [ 7]  411 		cp	#1
   01FA 20 54         [12]  412 		jr	nz, player_2_vorb
                            413 			;; Player 1
                            414 
   01FC 21 06 80      [10]  415 			ld 	hl, #Key_V			;; HL = V Keycode
   01FF CD 00 00      [17]  416 			call 	cpct_isKeyPressed_asm 		;; A = True/False
   0202 FE 00         [ 7]  417 			cp 	#0 				;; A == 0?
   0204 28 22         [12]  418 			jr 	z, v_not_pressed
                            419 				;; V is pressed	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 18.
Hexadecimal [16-Bits]



   0206 21 06 40      [10]  420 				ld 	hl, #Key_B			;; HL = B Keycode
   0209 CD 00 00      [17]  421 				call 	cpct_isKeyPressed_asm 		;; A = True/False
   020C FE 00         [ 7]  422 				cp 	#0 				;; A == 0?
   020E 28 0C         [12]  423 				jr 	z, just_v_pressed
                            424 					;; V and B are pressed
   0210 21 00 00      [10]  425 					ld 	hl, #0			;; HL <= standard effect
   0213 DD E5         [15]  426 					push 	ix
   0215 CD 00 00      [17]  427 					call frisbee_setEffect		;; efecto hacia abajo
   0218 DD E1         [14]  428 					pop 	ix
   021A 18 20         [12]  429 					jr vorb_pressed
   021C                     430 				just_v_pressed:
   021C 21 F8 FF      [10]  431 					ld 	hl, #std_N_eff		;; HL <= -standard effect
   021F DD E5         [15]  432 					push 	ix
   0221 CD 00 00      [17]  433 					call frisbee_setEffect		;; efecto hacia arriba
   0224 DD E1         [14]  434 					pop 	ix
   0226 18 14         [12]  435 					jr 	vorb_pressed
   0228                     436 			v_not_pressed:
                            437 
   0228 21 06 40      [10]  438 				ld 	hl, #Key_B			;; HL = B Keycode
   022B CD 00 00      [17]  439 				call 	cpct_isKeyPressed_asm 		;; A = True/False
   022E FE 00         [ 7]  440 				cp 	#0 				;; A == 0?
   0230 28 6C         [12]  441 				jr 	z, b_not_pressed
                            442 					;; B is pressed
   0232 21 08 00      [10]  443 					ld 	hl, #std_eff		;; HL <= standard effect
   0235 DD E5         [15]  444 					push 	ix
   0237 CD 00 00      [17]  445 					call frisbee_setEffect		;; efecto hacia abajo
   023A DD E1         [14]  446 					pop 	ix
                            447 
   023C                     448 					vorb_pressed:
   023C DD 7E 16      [19]  449 					ld	a, Ent_id(ix)		;;
   023F DD 66 06      [19]  450 					ld	h, Ent_vx_I(ix)		;;
   0242 DD 6E 07      [19]  451 					ld	l, Ent_vx_F(ix)		;;
   0245 DD 56 08      [19]  452 					ld	d, Ent_vy_I(ix)		;;
   0248 DD 5E 09      [19]  453 					ld	e, Ent_vy_F(ix)		;;
   024B CD 00 00      [17]  454 					call frisbee_setVelocities	;; transferimos las velocidades de la entidad al frisbee
                            455 
   024E 18 4E         [12]  456 					jr o_not_pressed
   0250                     457 	player_2_vorb:
                            458 
   0250 21 04 08      [10]  459 			ld 	hl, #Key_I			;; HL = I Keycode
   0253 CD 00 00      [17]  460 			call 	cpct_isKeyPressed_asm 		;; A = True/False
   0256 FE 00         [ 7]  461 			cp 	#0 				;; A == 0?
   0258 28 1E         [12]  462 			jr 	z, i_not_pressed
                            463 				;; I is pressed	
   025A 21 04 04      [10]  464 				ld 	hl, #Key_O			;; HL = O Keycode
   025D CD 00 00      [17]  465 				call 	cpct_isKeyPressed_asm 		;; A = True/False
   0260 FE 00         [ 7]  466 				cp 	#0 				;; A == 0?
   0262 28 08         [12]  467 				jr 	z, just_i_pressed
                            468 					;; I and O are pressed
   0264 21 00 00      [10]  469 					ld 	hl, #0			;; HL <= standard effect
   0267 CD 00 00      [17]  470 					call frisbee_setEffect		;; efecto hacia abajo
   026A 18 20         [12]  471 					jr ioro_pressed
   026C                     472 				just_i_pressed:
   026C 21 F8 FF      [10]  473 					ld 	hl, #std_N_eff		;; HL <= -standard effect
   026F DD E5         [15]  474 					push 	ix
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 19.
Hexadecimal [16-Bits]



   0271 CD 00 00      [17]  475 					call frisbee_setEffect		;; efecto hacia arriba
   0274 DD E1         [14]  476 					pop 	ix
   0276 18 14         [12]  477 					jr 	ioro_pressed
   0278                     478 			i_not_pressed:
                            479 
   0278 21 04 04      [10]  480 				ld 	hl, #Key_O			;; HL = O Keycode
   027B CD 00 00      [17]  481 				call 	cpct_isKeyPressed_asm 		;; A = True/False
   027E FE 00         [ 7]  482 				cp 	#0 				;; A == 0?
   0280 28 1C         [12]  483 				jr 	z, o_not_pressed
                            484 					;; O is pressed
   0282 21 08 00      [10]  485 					ld 	hl, #std_eff		;; HL <= standard effect
   0285 DD E5         [15]  486 					push 	ix
   0287 CD 00 00      [17]  487 					call frisbee_setEffect		;; efecto hacia abajo
   028A DD E1         [14]  488 					pop 	ix
                            489 
   028C                     490 					ioro_pressed:
   028C DD 7E 16      [19]  491 					ld	a, Ent_id(ix)		;;
   028F DD 66 06      [19]  492 					ld	h, Ent_vx_I(ix)		;;
   0292 DD 6E 07      [19]  493 					ld	l, Ent_vx_F(ix)		;;
   0295 DD 56 08      [19]  494 					ld	d, Ent_vy_I(ix)		;;
   0298 DD 5E 09      [19]  495 					ld	e, Ent_vy_F(ix)		;;
   029B CD 00 00      [17]  496 					call frisbee_setVelocities	;; transferimos las velocidades de la entidad al frisbee
                            497 
                            498 
   029E                     499 	no_collision:
   029E                     500 	b_not_pressed:
   029E                     501 	o_not_pressed:
   029E C9            [10]  502 	ret
