ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 1.
Hexadecimal [16-Bits]



                     0020     1 std_acc = 32 	;; standard acceleration per frame
                              2 
                              3 .area _DATA
                              4 .area _CODE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 2.
Hexadecimal [16-Bits]



                              5 .include "utility.h.s"
                              1 ;; ====================================
                              2 ;; ====================================
                              3 ;; INCLUDED CPCTELERA FUNCTIONS
                              4 ;; ====================================
                              5 ;; ====================================
                              6 .globl cpct_waitVSYNC_asm
                              7 .globl cpct_drawSolidBox_asm
                              8 .globl cpct_getScreenPtr_asm
                              9 .globl cpct_scanKeyboard_asm
                             10 .globl cpct_isKeyPressed_asm
                             11 .globl cpct_disableFirmware_asm
                             12 .globl cpct_setVideoMode_asm
                             13 .globl cpct_setPalette_asm
                             14 .globl cpct_memcpy_asm
                             15 .globl negateHL
                             16 .globl cpct_setVideoMemoryPage_asm
                             17 .globl cpct_akp_musicPlay_asm
                             18 .globl cpct_akp_stop_asm
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 3.
Hexadecimal [16-Bits]



                              6 .include "entity.h.s"
                              1 ;; ====================================
                              2 ;; ====================================
                              3 ;; ENTITY PUBLIC FUNCTIONS
                              4 ;; ====================================
                              5 ;; ====================================
                              6 .globl entityDraw
                              7 .globl entityErase
                              8 .globl entityCheckCollision
                              9 .globl entityUpdatePhysics
                             10 .globl entityUpdatePosition
                             11 
                             12 .macro defineEntity name, x,y, h, w, vx, vy, ax, ay, normal, state, clr, id
                             13 	name'_data::
                             14 		name'_x:	.dw x		;; X coordinate			(16 bits)
                             15 		name'_y:	.dw y		;; Y coordinate			(16 bits)
                             16 		name'_h:	.db h		;; Height			(8 bits)
                             17 		name'_w:	.db w		;; Width			(8 bits)
                             18 		name'_vx:	.dw vx		;; Velocity at X axis 		(16 bits)
                             19 		name'_vy:	.dw vy		;; Velocity at Y axis		(16 bits)
                             20 		name'_ax:	.dw ax		;; Acceleration at X axis	(16 bits)
                             21 		name'_ay:	.dw ay		;; Acceleration at Y axis	(16 bits)
                             22 		name'_normal:	.dw normal	;; Normal force			(16 bits)
                             23 		name'_last_x:	.db x		;; Last x rendered		(8 bits)
                             24 		name'_erase_x:	.db x		;; x rendered at same buffer	(8 bits)
                             25 		name'_last_y:	.db y		;; Last y rendered		(8 bits)
                             26 		name'_erase_y:	.db y		;; y rendered at same buffer	(8 bits)
                             27 		name'_state:	.db state	;; Entity enabled/disabled	(8 bits)
                             28 		name'_clr:	.db clr		;; Entity color pattern		(8 bits)
                             29 		name'_id:	.db id		;; Numeric ID			(8 bits)
                             30 .endm
                             31 
                             32 
                             33 ;; ====================================
                             34 ;; ====================================
                             35 ;; ENTITY PUBLIC DATA
                             36 ;; ====================================
                             37 ;; ====================================
                     0000    38 .equ Ent_x_I, 		0	;; X coordinate, integer part
                     0001    39 .equ Ent_x_F, 		1	;; X coordinate, fractional part
                     0002    40 .equ Ent_y_I, 		2	;; Y coordinate, integer part
                     0003    41 .equ Ent_y_F, 		3	;; Y coordinate, fractional part
                     0004    42 .equ Ent_h, 		4	;; Height
                     0005    43 .equ Ent_w, 		5	;; Width
                     0006    44 .equ Ent_vx_I,		6	;; Velocity at X axis, integer part
                     0007    45 .equ Ent_vx_F,		7	;; Velocity at X axis, fractional part
                     0008    46 .equ Ent_vy_I,		8	;; Velocity at Y axis, integer part
                     0009    47 .equ Ent_vy_F,		9	;; Velocity at Y axis, fractional part
                     000A    48 .equ Ent_ax_I,		10	;; Acceleration at X axis, integer part
                     000B    49 .equ Ent_ax_F,		11	;; Acceleration at X axis, fractional part
                     000C    50 .equ Ent_ay_I,		12	;; Acceleration at Y axis, integer part
                     000D    51 .equ Ent_ay_F,		13	;; Acceleration at Y axis, fractional part
                     000E    52 .equ Ent_N_I,		14	;; Normal force, integer part
                     000F    53 .equ Ent_N_F,		15	;; Normal force, fractional part
                     0010    54 .equ Ent_last_x,	16	;; Last x rendered
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 4.
Hexadecimal [16-Bits]



                     0011    55 .equ Ent_erase_x,	17	;; x rendered at same buffer
                     0012    56 .equ Ent_last_y,	18	;; Last y rendered
                     0013    57 .equ Ent_erase_y,	19	;; y rendered at same buffer
                     0014    58 .equ Ent_state,		20	;; Entity enabled/disabled
                     0015    59 .equ Ent_clr, 		21	;; Entity color pattern
                     0016    60 .equ Ent_id, 		22	;; Numeric ID
                             61 				;; Frisbee 	0
                             62 				;; Player1 	1
                             63 				;; Enemy1	2
                             64 
                     0003    65 .equ MAX_VEL_X, 3 
                     FFFFFFFD    66 .equ MIN_VEL_X, -3
                     0003    67 .equ MAX_VEL_Y, 3
                     FFFFFFFD    68 .equ MIN_VEL_Y, -3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 5.
Hexadecimal [16-Bits]



                              7 .include "frisbee.h.s"
                              1 ;; =========================
                              2 ;; =========================
                              3 ;; FRISBEE PUBLIC FUNCTIONS
                              4 ;; =========================
                              5 ;; =========================
                              6 .globl frisbee_erase
                              7 .globl frisbee_update
                              8 .globl frisbee_draw
                              9 .globl frisbee_data
                             10 .globl frisbee_setOff
                             11 .globl frisbee_setEffect
                             12 .globl frisbee_setVelocities
                             13 .globl frisbee_checkGoal
                             14 	
                     0017    15 .equ Frisbee_effect_I, 23
                     0018    16 .equ Frisbee_effect_F, 24
                     0008    17 .equ std_eff, 0x0008
                     FFF8    18 .equ std_N_eff, 0xFFF8
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 6.
Hexadecimal [16-Bits]



                              8 .include "game.h.s"
                              1 ;; ====================================
                              2 ;; ====================================
                              3 ;; GAME PUBLIC FUNCTIONS
                              4 ;; ====================================
                              5 ;; ====================================
                              6 .globl gameStart
                              7 .globl getVideoPtr
                              8 .globl incTeam1Points
                              9 .globl incTeam2Points
                             10 .globl play_music	;; alomejor son privados
                             11 .globl stop_music	;; alomejor son privados
                             12 .globl game_data
                             13 
                             14 ;; ====================================
                             15 ;; ====================================
                             16 ;; GAME PUBLIC DATA
                             17 ;; ====================================
                             18 ;; ====================================
                     0050    19 .equ RIGHT_LIMIT,	80
                     0000    20 .equ LEFT_LIMIT,	0
                     000A    21 .equ TOP_LIMIT,	 	10
                     00C8    22 .equ BOTTOM_LIMIT,	200
                     0028    23 .equ CENTER_LIMIT,	40
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 7.
Hexadecimal [16-Bits]



                              9 .include "keyboard/keyboard.s"
                              1 ;;-----------------------------LICENSE NOTICE------------------------------------
                              2 ;;  This file is part of CPCtelera: An Amstrad CPC Game Engine 
                              3 ;;  Copyright (C) 2014 ronaldo / Fremos / Cheesetea / ByteRealms (@FranGallegoBR)
                              4 ;;
                              5 ;;  This program is free software: you can redistribute it and/or modify
                              6 ;;  it under the terms of the GNU Lesser General Public License as published by
                              7 ;;  the Free Software Foundation, either version 3 of the License, or
                              8 ;;  (at your option) any later version.
                              9 ;;
                             10 ;;  This program is distributed in the hope that it will be useful,
                             11 ;;  but WITHOUT ANY WARRANTY; without even the implied warranty of
                             12 ;;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                             13 ;;  GNU Lesser General Public License for more details.
                             14 ;;
                             15 ;;  You should have received a copy of the GNU Lesser General Public License
                             16 ;;  along with this program.  If not, see <http://www.gnu.org/licenses/>.
                             17 ;;-------------------------------------------------------------------------------
                             18 .module cpct_keyboard
                             19 
                             20 ;; bndry directive does not work when linking previously compiled files
                             21 ;.bndry 16
                             22 ;;   16-byte aligned in memory to let functions use 8-bit maths for pointing
                             23 ;;   (alignment not working on user linking)
                             24 
   0000                      25 _cpct_keyboardStatusBuffer:: .ds 10
                             26 
                             27 ;;
                             28 ;; Assembly constant definitions for keyboard mapping
                             29 ;;
                             30 
                             31 ;; Matrix Line 0x00
                     0100    32 .equ Key_CursorUp     ,#0x0100  ;; Bit 0 (01h) => | 0000 0001 |
                     0200    33 .equ Key_CursorRight  ,#0x0200  ;; Bit 1 (02h) => | 0000 0010 |
                     0400    34 .equ Key_CursorDown   ,#0x0400  ;; Bit 2 (04h) => | 0000 0100 |
                     0800    35 .equ Key_F9           ,#0x0800  ;; Bit 3 (08h) => | 0000 1000 |
                     1000    36 .equ Key_F6           ,#0x1000  ;; Bit 4 (10h) => | 0001 0000 |
                     2000    37 .equ Key_F3           ,#0x2000  ;; Bit 5 (20h) => | 0010 0000 |
                     4000    38 .equ Key_Enter        ,#0x4000  ;; Bit 6 (40h) => | 0100 0000 |
                     8000    39 .equ Key_FDot         ,#0x8000  ;; Bit 7 (80h) => | 1000 0000 |
                             40 ;; Matrix Line 0x01
                     0101    41 .equ Key_CursorLeft   ,#0x0101
                     0201    42 .equ Key_Copy         ,#0x0201
                     0401    43 .equ Key_F7           ,#0x0401
                     0801    44 .equ Key_F8           ,#0x0801
                     1001    45 .equ Key_F5           ,#0x1001
                     2001    46 .equ Key_F1           ,#0x2001
                     4001    47 .equ Key_F2           ,#0x4001
                     8001    48 .equ Key_F0           ,#0x8001
                             49 ;; Matrix Line 0x02
                     0102    50 .equ Key_Clr          ,#0x0102
                     0202    51 .equ Key_OpenBracket  ,#0x0202
                     0402    52 .equ Key_Return       ,#0x0402
                     0802    53 .equ Key_CloseBracket ,#0x0802
                     1002    54 .equ Key_F4           ,#0x1002
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 8.
Hexadecimal [16-Bits]



                     2002    55 .equ Key_Shift        ,#0x2002
                     4002    56 .equ Key_BackSlash    ,#0x4002
                     8002    57 .equ Key_Control      ,#0x8002
                             58 ;; Matrix Line 0x03
                     0103    59 .equ Key_Caret        ,#0x0103
                     0203    60 .equ Key_Hyphen       ,#0x0203
                     0403    61 .equ Key_At           ,#0x0403
                     0803    62 .equ Key_P            ,#0x0803
                     1003    63 .equ Key_SemiColon    ,#0x1003
                     2003    64 .equ Key_Colon        ,#0x2003
                     4003    65 .equ Key_Slash        ,#0x4003
                     8003    66 .equ Key_Dot          ,#0x8003
                             67 ;; Matrix Line 0x04
                     0104    68 .equ Key_0            ,#0x0104
                     0204    69 .equ Key_9            ,#0x0204
                     0404    70 .equ Key_O            ,#0x0404
                     0804    71 .equ Key_I            ,#0x0804
                     1004    72 .equ Key_L            ,#0x1004
                     2004    73 .equ Key_K            ,#0x2004
                     4004    74 .equ Key_M            ,#0x4004
                     8004    75 .equ Key_Comma        ,#0x8004
                             76 ;; Matrix Line 0x05
                     0105    77 .equ Key_8            ,#0x0105
                     0205    78 .equ Key_7            ,#0x0205
                     0405    79 .equ Key_U            ,#0x0405
                     0805    80 .equ Key_Y            ,#0x0805
                     1005    81 .equ Key_H            ,#0x1005
                     2005    82 .equ Key_J            ,#0x2005
                     4005    83 .equ Key_N            ,#0x4005
                     8005    84 .equ Key_Space        ,#0x8005
                             85 ;; Matrix Line 0x06
                     0106    86 .equ Key_6            ,#0x0106
                     0106    87 .equ Joy1_Up          ,#0x0106
                     0206    88 .equ Key_5            ,#0x0206
                     0206    89 .equ Joy1_Down        ,#0x0206
                     0406    90 .equ Key_R            ,#0x0406
                     0406    91 .equ Joy1_Left        ,#0x0406
                     0806    92 .equ Key_T            ,#0x0806
                     0806    93 .equ Joy1_Right       ,#0x0806
                     1006    94 .equ Key_G            ,#0x1006
                     1006    95 .equ Joy1_Fire1       ,#0x1006
                     2006    96 .equ Key_F            ,#0x2006
                     2006    97 .equ Joy1_Fire2       ,#0x2006
                     4006    98 .equ Key_B            ,#0x4006
                     4006    99 .equ Joy1_Fire3       ,#0x4006
                     8006   100 .equ Key_V            ,#0x8006
                            101 ;; Matrix Line 0x07
                     0107   102 .equ Key_4            ,#0x0107
                     0207   103 .equ Key_3            ,#0x0207
                     0407   104 .equ Key_E            ,#0x0407
                     0807   105 .equ Key_W            ,#0x0807
                     1007   106 .equ Key_S            ,#0x1007
                     2007   107 .equ Key_D            ,#0x2007
                     4007   108 .equ Key_C            ,#0x4007
                     8007   109 .equ Key_X            ,#0x8007
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 9.
Hexadecimal [16-Bits]



                            110 ;; Matrix Line 0x08
                     0108   111 .equ Key_1            ,#0x0108
                     0208   112 .equ Key_2            ,#0x0208
                     0408   113 .equ Key_Esc          ,#0x0408
                     0808   114 .equ Key_Q            ,#0x0808
                     1008   115 .equ Key_Tab          ,#0x1008
                     2008   116 .equ Key_A            ,#0x2008
                     4008   117 .equ Key_CapsLock     ,#0x4008
                     8008   118 .equ Key_Z            ,#0x8008
                            119 ;; Matrix Line 0x09
                     0109   120 .equ Joy0_Up          ,#0x0109
                     0209   121 .equ Joy0_Down        ,#0x0209
                     0409   122 .equ Joy0_Left        ,#0x0409
                     0809   123 .equ Joy0_Right       ,#0x0809
                     1009   124 .equ Joy0_Fire1       ,#0x1009
                     2009   125 .equ Joy0_Fire2       ,#0x2009
                     4009   126 .equ Joy0_Fire3       ,#0x4009
                     8009   127 .equ Key_Del          ,#0x8009
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 10.
Hexadecimal [16-Bits]



                             10 .globl _moveIA
                             11 
                             12 ;; ====================================
                             13 ;; ====================================
                             14 ;; PRIVATE DATA
                             15 ;; ====================================
                             16 ;; ====================================
                             17 
                             18 ;; .macro defineEntity name, x,y, h, w, vx, vy, ax, ay, normal, state, clr, id
                             19 
   000A                      20 defineEntity player, #0x0010, #0x0050, #20, #5, #0000, #0000, #0000, #0000, #0x1800, #1, #0xF0, #1
   000A                       1 	player_data::
   000A 10 00                 2 		player_x:	.dw #0x0010		;; X coordinate			(16 bits)
   000C 50 00                 3 		player_y:	.dw #0x0050		;; Y coordinate			(16 bits)
   000E 14                    4 		player_h:	.db #20		;; Height			(8 bits)
   000F 05                    5 		player_w:	.db #5		;; Width			(8 bits)
   0010 00 00                 6 		player_vx:	.dw #0000		;; Velocity at X axis 		(16 bits)
   0012 00 00                 7 		player_vy:	.dw #0000		;; Velocity at Y axis		(16 bits)
   0014 00 00                 8 		player_ax:	.dw #0000		;; Acceleration at X axis	(16 bits)
   0016 00 00                 9 		player_ay:	.dw #0000		;; Acceleration at Y axis	(16 bits)
   0018 00 18                10 		player_normal:	.dw #0x1800	;; Normal force			(16 bits)
   001A 10                   11 		player_last_x:	.db #0x0010		;; Last x rendered		(8 bits)
   001B 10                   12 		player_erase_x:	.db #0x0010		;; x rendered at same buffer	(8 bits)
   001C 50                   13 		player_last_y:	.db #0x0050		;; Last y rendered		(8 bits)
   001D 50                   14 		player_erase_y:	.db #0x0050		;; y rendered at same buffer	(8 bits)
   001E 01                   15 		player_state:	.db #1	;; Entity enabled/disabled	(8 bits)
   001F F0                   16 		player_clr:	.db #0xF0		;; Entity color pattern		(8 bits)
   0020 01                   17 		player_id:	.db #1		;; Numeric ID			(8 bits)
                             21 
   0021                      22 defineEntity enemy, #0x0050-0x0004, #0x0064, #20, #5, #0000, #0000, #0000, #0000, #0x1800, #1, #0xFF, #2
   0021                       1 	enemy_data::
   0021 4C 00                 2 		enemy_x:	.dw #0x0050-0x0004		;; X coordinate			(16 bits)
   0023 64 00                 3 		enemy_y:	.dw #0x0064		;; Y coordinate			(16 bits)
   0025 14                    4 		enemy_h:	.db #20		;; Height			(8 bits)
   0026 05                    5 		enemy_w:	.db #5		;; Width			(8 bits)
   0027 00 00                 6 		enemy_vx:	.dw #0000		;; Velocity at X axis 		(16 bits)
   0029 00 00                 7 		enemy_vy:	.dw #0000		;; Velocity at Y axis		(16 bits)
   002B 00 00                 8 		enemy_ax:	.dw #0000		;; Acceleration at X axis	(16 bits)
   002D 00 00                 9 		enemy_ay:	.dw #0000		;; Acceleration at Y axis	(16 bits)
   002F 00 18                10 		enemy_normal:	.dw #0x1800	;; Normal force			(16 bits)
   0031 4C                   11 		enemy_last_x:	.db #0x0050-0x0004		;; Last x rendered		(8 bits)
   0032 4C                   12 		enemy_erase_x:	.db #0x0050-0x0004		;; x rendered at same buffer	(8 bits)
   0033 64                   13 		enemy_last_y:	.db #0x0064		;; Last y rendered		(8 bits)
   0034 64                   14 		enemy_erase_y:	.db #0x0064		;; y rendered at same buffer	(8 bits)
   0035 01                   15 		enemy_state:	.db #1	;; Entity enabled/disabled	(8 bits)
   0036 FF                   16 		enemy_clr:	.db #0xFF		;; Entity color pattern		(8 bits)
   0037 02                   17 		enemy_id:	.db #2		;; Numeric ID			(8 bits)
                             23 
                             24 
   0038                      25 defineEntity player_2, #0x0010, #0x0050, #20, #5, #0000, #0000, #0000, #0000, #0x0400, #1, #0xF0, #1
   0038                       1 	player_2_data::
   0038 10 00                 2 		player_2_x:	.dw #0x0010		;; X coordinate			(16 bits)
   003A 50 00                 3 		player_2_y:	.dw #0x0050		;; Y coordinate			(16 bits)
   003C 14                    4 		player_2_h:	.db #20		;; Height			(8 bits)
   003D 05                    5 		player_2_w:	.db #5		;; Width			(8 bits)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 11.
Hexadecimal [16-Bits]



   003E 00 00                 6 		player_2_vx:	.dw #0000		;; Velocity at X axis 		(16 bits)
   0040 00 00                 7 		player_2_vy:	.dw #0000		;; Velocity at Y axis		(16 bits)
   0042 00 00                 8 		player_2_ax:	.dw #0000		;; Acceleration at X axis	(16 bits)
   0044 00 00                 9 		player_2_ay:	.dw #0000		;; Acceleration at Y axis	(16 bits)
   0046 00 04                10 		player_2_normal:	.dw #0x0400	;; Normal force			(16 bits)
   0048 10                   11 		player_2_last_x:	.db #0x0010		;; Last x rendered		(8 bits)
   0049 10                   12 		player_2_erase_x:	.db #0x0010		;; x rendered at same buffer	(8 bits)
   004A 50                   13 		player_2_last_y:	.db #0x0050		;; Last y rendered		(8 bits)
   004B 50                   14 		player_2_erase_y:	.db #0x0050		;; y rendered at same buffer	(8 bits)
   004C 01                   15 		player_2_state:	.db #1	;; Entity enabled/disabled	(8 bits)
   004D F0                   16 		player_2_clr:	.db #0xF0		;; Entity color pattern		(8 bits)
   004E 01                   17 		player_2_id:	.db #1		;; Numeric ID			(8 bits)
                             26 
                             27 
   004F                      28 defineEntity enemy_2, #0x0050-0x0004, #0x0064, #20, #5, #0000, #0000, #0000, #0000, #0x0400, #1, #0xFF, #2
   004F                       1 	enemy_2_data::
   004F 4C 00                 2 		enemy_2_x:	.dw #0x0050-0x0004		;; X coordinate			(16 bits)
   0051 64 00                 3 		enemy_2_y:	.dw #0x0064		;; Y coordinate			(16 bits)
   0053 14                    4 		enemy_2_h:	.db #20		;; Height			(8 bits)
   0054 05                    5 		enemy_2_w:	.db #5		;; Width			(8 bits)
   0055 00 00                 6 		enemy_2_vx:	.dw #0000		;; Velocity at X axis 		(16 bits)
   0057 00 00                 7 		enemy_2_vy:	.dw #0000		;; Velocity at Y axis		(16 bits)
   0059 00 00                 8 		enemy_2_ax:	.dw #0000		;; Acceleration at X axis	(16 bits)
   005B 00 00                 9 		enemy_2_ay:	.dw #0000		;; Acceleration at Y axis	(16 bits)
   005D 00 04                10 		enemy_2_normal:	.dw #0x0400	;; Normal force			(16 bits)
   005F 4C                   11 		enemy_2_last_x:	.db #0x0050-0x0004		;; Last x rendered		(8 bits)
   0060 4C                   12 		enemy_2_erase_x:	.db #0x0050-0x0004		;; x rendered at same buffer	(8 bits)
   0061 64                   13 		enemy_2_last_y:	.db #0x0064		;; Last y rendered		(8 bits)
   0062 64                   14 		enemy_2_erase_y:	.db #0x0064		;; y rendered at same buffer	(8 bits)
   0063 01                   15 		enemy_2_state:	.db #1	;; Entity enabled/disabled	(8 bits)
   0064 FF                   16 		enemy_2_clr:	.db #0xFF		;; Entity color pattern		(8 bits)
   0065 02                   17 		enemy_2_id:	.db #2		;; Numeric ID			(8 bits)
                             29 	
                             30 ;; ====================================
                             31 ;; ====================================
                             32 ;; PUBLIC FUNCTIONS
                             33 ;; ====================================
                             34 ;; ====================================
   0066                      35 player_erase::
   0066 DD 21 0A 00   [14]   36 	ld 	ix, #player_data
   006A CD 00 00      [17]   37 	call 	entityErase		;; Erase player
   006D DD 21 21 00   [14]   38 	ld 	ix, #enemy_data
   0071 CD 00 00      [17]   39 	call 	entityErase		;; Erase enemy
                             40 
   0074 C9            [10]   41 	ret
                             42 
                             43 ;; =========================================
                             44 ;; Actualiza el estado de los entities tipo
                             45 ;;	player
                             46 ;; Modifica: AF, IX
                             47 ;; =========================================
   0075                      48 player_update::
   0075 DD 21 0A 00   [14]   49 	ld 	ix, #player_data
   0079 CD 3E 01      [17]   50 	call checkUserInput
                             51 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 12.
Hexadecimal [16-Bits]



                             52 ;;	ld 	ix, #enemy_data
                             53 ;;	call checkUserInput
                             54 
   007C CD B9 00      [17]   55 	call move_IA
                             56 
   007F DD 21 0A 00   [14]   57 	ld 	ix, #player_data
   0083 CD 00 00      [17]   58 	call entityUpdatePhysics
   0086 DD 21 21 00   [14]   59 	ld 	ix, #enemy_data
   008A CD 00 00      [17]   60 	call entityUpdatePhysics
                             61 
   008D DD 21 0A 00   [14]   62 	ld 	ix, #player_data
   0091 CD 00 00      [17]   63 	call entityUpdatePosition
   0094 DD 21 21 00   [14]   64 	ld 	ix, #enemy_data
   0098 CD 00 00      [17]   65 	call entityUpdatePosition
                             66 
                             67 
   009B DD 21 0A 00   [14]   68 	ld 	ix, #player_data
   009F CD 13 01      [17]   69 	call checkCenterCrossing
   00A2 DD 21 21 00   [14]   70 	ld 	ix, #enemy_data
   00A6 CD 13 01      [17]   71 	call checkCenterCrossing
   00A9 C9            [10]   72 	ret
                             73 
   00AA                      74 player_draw::
   00AA DD 21 0A 00   [14]   75 	ld 	ix, #player_data
   00AE CD 00 00      [17]   76 	call 	entityDraw		;; Draw player
   00B1 DD 21 21 00   [14]   77 	ld 	ix, #enemy_data
   00B5 CD 00 00      [17]   78 	call 	entityDraw		;; Draw enemy
                             79 
   00B8 C9            [10]   80 	ret
                             81 	
                             82 ;; ====================================
                             83 ;; ====================================
                             84 ;; PRIVATE FUNCTIONS
                             85 ;; ====================================
                             86 ;; ====================================
                             87 
                             88 ;; =========================================
                             89 ;; Determina el siguiente estado de
                             90 ;;	la entidad
                             91 ;; Entrada:
                             92 ;; =========================================
   00B9                      93 delta:
                             94 
                             95 
   00B9                      96 update:
                             97 
                             98 
   00B9                      99 move_IA:
   00B9 21 00 00      [10]  100 	ld	hl, #frisbee_data
   00BC E5            [11]  101 	push 	hl
   00BD 21 0A 00      [10]  102 	ld	hl, #player_data
   00C0 E5            [11]  103 	push 	hl
   00C1 21 21 00      [10]  104 	ld	hl, #enemy_data
   00C4 E5            [11]  105 	push 	hl
   00C5 CD 00 00      [17]  106 	call _moveIA			;; moveIA(TEntity* myself, TEntity* enemy, TEntity* frisbee)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 13.
Hexadecimal [16-Bits]



   00C8 F1            [10]  107 	pop 	af
   00C9 F1            [10]  108 	pop 	af
   00CA F1            [10]  109 	pop 	af
                            110 
   00CB DD 21 21 00   [14]  111 	ld	ix, #enemy_data
                            112 
   00CF DD 66 0A      [19]  113 	ld	h, Ent_ax_I(ix)		;; 
   00D2 DD 6E 0B      [19]  114 	ld	l, Ent_ax_F(ix)		;; 
   00D5 DD 75 0A      [19]  115 	ld	Ent_ax_I(ix), l		;; 
   00D8 DD 74 0B      [19]  116 	ld	Ent_ax_F(ix), h		;; Swap ax_I and ax_F due to C variables formatting
                            117 
   00DB DD 66 0C      [19]  118 	ld	h, Ent_ay_I(ix)		;; 
   00DE DD 6E 0D      [19]  119 	ld	l, Ent_ay_F(ix)		;; 
   00E1 DD 75 0C      [19]  120 	ld	Ent_ay_I(ix), l		;; 
   00E4 DD 74 0D      [19]  121 	ld	Ent_ay_F(ix), h		;; Swap ay_I and ay_F due to C variables formatting
                            122 
                            123 
   00E7 C9            [10]  124 	ret
                            125 
                            126 ;; =========================================
                            127 ;; Comprueba si la entidad colisiona con 
                            128 ;; 	el frisbee
                            129 ;; Entrada:
                            130 ;; 	IX <= puntero al player a comparar
                            131 ;; 		con el frisbee
                            132 ;; Modifica: AF, B, HL, IX
                            133 ;; Devuelve:
                            134 ;; 	A <= 	0 si no hay colisión
                            135 ;; 		>1 si hay colisión
                            136 ;; =========================================
   00E8                     137 checkFrisbeeCollision:
   00E8 21 00 00      [10]  138 	ld 	hl, #frisbee_data	;; HL <= frisbee_data
   00EB CD 00 00      [17]  139 	call 	entityCheckCollision 	;; A <= collison/no_collision
                            140 
   00EE C9            [10]  141 	ret
                            142 
                            143 
                            144 ;; ===============================================
                            145 ;; Acelera la entidad hacia la derecha, si puede
                            146 ;; Entrada:
                            147 ;; 	IX <= puntero a los datos de la entidad
                            148 ;; Modifica A, IX
                            149 ;; ===============================================
   00EF                     150 moveRight:
                            151 	;; push 	ix
                            152 	;; call 	checkFrisbeeCollision 	;; A == collision/no_collision
                            153 	;; pop 	ix
                            154 	;; cp 	#0			;; A == 0?
                            155 	;; jr	nz, collision_right 	;; checkFrisbeeCollision != 0?
                            156 
                            157 		;; no_collision
   00EF DD 36 0A 00   [19]  158 		ld 	Ent_ax_I(ix), #0
   00F3 DD 36 0B 20   [19]  159 		ld 	Ent_ax_F(ix), #std_acc	;; Ent_ay <= 00(0)E2(30) (30)
                            160 
                            161 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 14.
Hexadecimal [16-Bits]



   00F7 C9            [10]  162 		ret
                            163 
                            164 	;;collision_right:
                            165 	;;	call 	frisbee_setOff
                            166 	;;
                            167 	;;	ret
                            168 
                            169 ;; ===============================================
                            170 ;; Acelera la entidad hacia abajo, si puede
                            171 ;; Entrada:
                            172 ;; 	IX <= puntero a los datos de la entidad
                            173 ;; Modifica A, IX
                            174 ;; ===============================================
   00F8                     175 moveDown:
   00F8 DD 36 0C 00   [19]  176 	ld 	Ent_ay_I(ix), #0
   00FC DD 36 0D 20   [19]  177 	ld 	Ent_ay_F(ix), #std_acc	;; Ent_ay <= 00(0)E2(30) (30)
                            178 
   0100 C9            [10]  179 	ret
                            180 
                            181 ;; ===============================================
                            182 ;; Acelera la entidad hacia la izquierda, si puede
                            183 ;; Entrada:
                            184 ;; 	IX <= puntero a los datos de la entidad
                            185 ;; Modifica A, IX
                            186 ;; ===============================================
   0101                     187 moveLeft:
   0101 DD 36 0A FF   [19]  188 	ld 	Ent_ax_I(ix), #-1
   0105 DD 36 0B E0   [19]  189 	ld 	Ent_ax_F(ix), #-std_acc	;; Ent_ax <= FF(-1)E2(-30) (-30)
                            190 
   0109 C9            [10]  191 	ret
                            192 
                            193 ;; ===============================================
                            194 ;; Acelera la entidad hacia arriba, si puede
                            195 ;; Entrada:
                            196 ;; 	IX <= puntero a los datos de la entidad
                            197 ;; Modifica A, IX
                            198 ;; ===============================================
   010A                     199 moveUp:
   010A DD 36 0C FF   [19]  200 	ld 	Ent_ay_I(ix), #-1
   010E DD 36 0D E0   [19]  201 	ld 	Ent_ay_F(ix), #-std_acc	;; Ent_ay <= FF(-1)E2(-30) (-30)
                            202 
   0112 C9            [10]  203 	ret
                            204 
                            205 
                            206 ;; ===========================================
                            207 ;; Chequea si un jugador pasa del centro del
                            208 ;; 	campo y lo corrige en caso necesario
                            209 ;; Entrada:
                            210 ;; 	IX <= pointer to entity data
                            211 ;; Modifica AF, BC, DE, HL
                            212 ;; ===========================================
   0113                     213 checkCenterCrossing:
   0113 DD 7E 16      [19]  214 	ld 	a, Ent_id(ix)
   0116 FE 01         [ 7]  215 	cp 	#1
   0118 28 11         [12]  216 	jr	z, player_1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 15.
Hexadecimal [16-Bits]



   011A FE 02         [ 7]  217 		cp	#2
   011C 20 1F         [12]  218 		jr	nz, invalid_id
                            219 			;; player 2
   011E 3E 28         [ 7]  220 			ld	a, #CENTER_LIMIT				;; A <= Ent_x, integer part
   0120 DD BE 00      [19]  221 			cp	Ent_x_I(ix)
   0123 38 18         [12]  222 			jr	c, not_crossed				;; Ent_x <= CENTER_LIMIT? center crossed
                            223 				;; center limit crossed
   0125 DD 36 00 28   [19]  224 				ld	Ent_x_I(ix), #CENTER_LIMIT
   0129 18 12         [12]  225 				jr not_crossed
                            226 
   012B                     227 	player_1:
   012B DD 7E 00      [19]  228 			ld	a, Ent_x_I(ix)				;; A <= Ent_x, integer part
   012E DD 86 05      [19]  229 			add	a, Ent_w(ix)				;; A <= Ent_x + Ent_w
   0131 FE 28         [ 7]  230 			cp	#CENTER_LIMIT
   0133 38 08         [12]  231 			jr	c, not_crossed				;; Ent_x + Ent_w > CENTER_LIMIT? center crossed
                            232 				;; center limit crossed
   0135 3E 28         [ 7]  233 				ld	a, #CENTER_LIMIT
   0137 DD 96 05      [19]  234 				sub	Ent_w(ix)			;; A <= CENTER_LIMIT - Ent_w
   013A DD 77 00      [19]  235 				ld	Ent_x_I(ix), a			;; Ent_x = CENTER_LIMIT - Ent_w
                            236 
   013D                     237 	invalid_id:
   013D                     238 	not_crossed:
   013D C9            [10]  239 	ret
                            240 
                            241 
                            242 ;; ====================================
                            243 ;; Lee la entrada del teclado
                            244 ;; Entrada:
                            245 ;; 	IX <= pointer to entity data
                            246 ;; Modifica AF, BC, DE, HL, IX
                            247 ;; ====================================
   013E                     248 checkUserInput:
   013E CD 00 00      [17]  249 	call cpct_scanKeyboard_asm						;;;;; TO DO DESACOPLAR ESTE CÓDIGO PARA QUE JUEGUEN 2 JUGADORES ;;;;;;;;;;
                            250 
   0141 DD 7E 16      [19]  251 	ld 	a, Ent_id(ix)
   0144 FE 01         [ 7]  252 	cp	#1
   0146 C2 7F 01      [10]  253 	jp	nz, player_2
                            254 		;; Player 1
   0149 21 07 20      [10]  255 		ld 	hl, #Key_D			;; HL = D Keycode
   014C CD 00 00      [17]  256 		call 	cpct_isKeyPressed_asm 		;; A = True/False
   014F FE 00         [ 7]  257 		cp 	#0 				;; A == 0?
   0151 28 03         [12]  258 		jr 	z, d_not_pressed
                            259 			;; D is pressed
   0153 CD EF 00      [17]  260 			call 	moveRight	
   0156                     261 		d_not_pressed:
                            262 
   0156 21 08 20      [10]  263 		ld 	hl, #Key_A			;; HL = A Keycode
   0159 CD 00 00      [17]  264 		call 	cpct_isKeyPressed_asm 		;; A = True/False
   015C FE 00         [ 7]  265 		cp 	#0 				;; A == 0?
   015E 28 03         [12]  266 		jr 	z, a_not_pressed
                            267 			;; A is pressed	
   0160 CD 01 01      [17]  268 			call 	moveLeft
   0163                     269 		a_not_pressed:
                            270 
   0163 21 07 08      [10]  271 		ld 	hl, #Key_W			;; HL = W Keycode
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 16.
Hexadecimal [16-Bits]



   0166 CD 00 00      [17]  272 		call 	cpct_isKeyPressed_asm 		;; A = True/False
   0169 FE 00         [ 7]  273 		cp 	#0 				;; A == 0?
   016B 28 03         [12]  274 		jr 	z, w_not_pressed
                            275 			;; W is pressed
   016D CD 0A 01      [17]  276 			call 	moveUp	
   0170                     277 		w_not_pressed:
                            278 
   0170 21 07 10      [10]  279 		ld 	hl, #Key_S			;; HL = S Keycode
   0173 CD 00 00      [17]  280 		call 	cpct_isKeyPressed_asm 		;; A = True/False
   0176 FE 00         [ 7]  281 		cp 	#0 				;; A == 0?
   0178 28 03         [12]  282 		jr 	z, s_not_pressed
                            283 			;; S is pressed	
   017A CD F8 00      [17]  284 			call 	moveDown
   017D                     285 		s_not_pressed:
   017D 18 34         [12]  286 		jr five_not_pressed
                            287 
   017F                     288 	player_2:
   017F 21 00 10      [10]  289 		ld 	hl, #Key_F6			;; HL = F6 Keycode
   0182 CD 00 00      [17]  290 		call 	cpct_isKeyPressed_asm 		;; A = True/False
   0185 FE 00         [ 7]  291 		cp 	#0 				;; A == 0?
   0187 28 03         [12]  292 		jr 	z, six_not_pressed
                            293 			;; D is pressed
   0189 CD EF 00      [17]  294 			call 	moveRight	
   018C                     295 		six_not_pressed:
                            296 
   018C 21 02 10      [10]  297 		ld 	hl, #Key_F4			;; HL = F4 Keycode
   018F CD 00 00      [17]  298 		call 	cpct_isKeyPressed_asm 		;; A = True/False
   0192 FE 00         [ 7]  299 		cp 	#0 				;; A == 0?
   0194 28 03         [12]  300 		jr 	z, four_not_pressed
                            301 			;; A is pressed	
   0196 CD 01 01      [17]  302 			call 	moveLeft
   0199                     303 		four_not_pressed:
                            304 
   0199 21 01 08      [10]  305 		ld 	hl, #Key_F8			;; HL = F8 Keycode
   019C CD 00 00      [17]  306 		call 	cpct_isKeyPressed_asm 		;; A = True/False
   019F FE 00         [ 7]  307 		cp 	#0 				;; A == 0?
   01A1 28 03         [12]  308 		jr 	z, eight_not_pressed
                            309 			;; W is pressed
   01A3 CD 0A 01      [17]  310 			call 	moveUp	
   01A6                     311 		eight_not_pressed:
                            312 
   01A6 21 01 10      [10]  313 		ld 	hl, #Key_F5			;; HL = F5 Keycode
   01A9 CD 00 00      [17]  314 		call 	cpct_isKeyPressed_asm 		;; A = True/False
   01AC FE 00         [ 7]  315 		cp 	#0 				;; A == 0?
   01AE 28 03         [12]  316 		jr 	z, five_not_pressed
                            317 			;; S is pressed	
   01B0 CD F8 00      [17]  318 			call 	moveDown
   01B3                     319 		five_not_pressed:
                            320 
                            321 
                            322 
   01B3 CD B7 01      [17]  323 	call checkVandB
   01B6 C9            [10]  324 	ret
                            325 
                            326 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 17.
Hexadecimal [16-Bits]



                            327 ;; ====================================
                            328 ;; Funcion auxiliar para leer V y B
                            329 ;;	de la entrada por teclado
                            330 ;; Entrada:
                            331 ;; 	IX <= pointer to entity data
                            332 ;; Modifica AF, BC, DE, HL
                            333 ;; ====================================
   01B7                     334 checkVandB:
   01B7 DD E5         [15]  335 	push 	ix
   01B9 CD E8 00      [17]  336 	call 	checkFrisbeeCollision 	;; A == collision/no_collision
   01BC DD E1         [14]  337 	pop 	ix
   01BE FE 00         [ 7]  338 	cp 	#0			;; A == 0?
   01C0 CA 6C 02      [10]  339 	jp	z, no_collision 	;; checkFrisbeeCollision == 0?
                            340 		;; There is collision
                            341 
   01C3 DD 7E 16      [19]  342 		ld 	a, Ent_id(ix)
   01C6 FE 01         [ 7]  343 		cp	#1
   01C8 20 54         [12]  344 		jr	nz, player_2_vorb
                            345 			;; Player 1
                            346 
   01CA 21 06 80      [10]  347 			ld 	hl, #Key_V			;; HL = V Keycode
   01CD CD 00 00      [17]  348 			call 	cpct_isKeyPressed_asm 		;; A = True/False
   01D0 FE 00         [ 7]  349 			cp 	#0 				;; A == 0?
   01D2 28 22         [12]  350 			jr 	z, v_not_pressed
                            351 				;; V is pressed	
   01D4 21 06 40      [10]  352 				ld 	hl, #Key_B			;; HL = B Keycode
   01D7 CD 00 00      [17]  353 				call 	cpct_isKeyPressed_asm 		;; A = True/False
   01DA FE 00         [ 7]  354 				cp 	#0 				;; A == 0?
   01DC 28 0C         [12]  355 				jr 	z, just_v_pressed
                            356 					;; V and B are pressed
   01DE 21 00 00      [10]  357 					ld 	hl, #0			;; HL <= standard effect
   01E1 DD E5         [15]  358 					push 	ix
   01E3 CD 00 00      [17]  359 					call frisbee_setEffect		;; efecto hacia abajo
   01E6 DD E1         [14]  360 					pop 	ix
   01E8 18 20         [12]  361 					jr vorb_pressed
   01EA                     362 				just_v_pressed:
   01EA 21 F8 FF      [10]  363 					ld 	hl, #std_N_eff		;; HL <= -standard effect
   01ED DD E5         [15]  364 					push 	ix
   01EF CD 00 00      [17]  365 					call frisbee_setEffect		;; efecto hacia arriba
   01F2 DD E1         [14]  366 					pop 	ix
   01F4 18 14         [12]  367 					jr 	vorb_pressed
   01F6                     368 			v_not_pressed:
                            369 
   01F6 21 06 40      [10]  370 				ld 	hl, #Key_B			;; HL = B Keycode
   01F9 CD 00 00      [17]  371 				call 	cpct_isKeyPressed_asm 		;; A = True/False
   01FC FE 00         [ 7]  372 				cp 	#0 				;; A == 0?
   01FE 28 6C         [12]  373 				jr 	z, b_not_pressed
                            374 					;; B is pressed
   0200 21 08 00      [10]  375 					ld 	hl, #std_eff		;; HL <= standard effect
   0203 DD E5         [15]  376 					push 	ix
   0205 CD 00 00      [17]  377 					call frisbee_setEffect		;; efecto hacia abajo
   0208 DD E1         [14]  378 					pop 	ix
                            379 
   020A                     380 					vorb_pressed:
   020A DD 7E 16      [19]  381 					ld	a, Ent_id(ix)		;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 18.
Hexadecimal [16-Bits]



   020D DD 66 06      [19]  382 					ld	h, Ent_vx_I(ix)		;;
   0210 DD 6E 07      [19]  383 					ld	l, Ent_vx_F(ix)		;;
   0213 DD 56 08      [19]  384 					ld	d, Ent_vy_I(ix)		;;
   0216 DD 5E 09      [19]  385 					ld	e, Ent_vy_F(ix)		;;
   0219 CD 00 00      [17]  386 					call frisbee_setVelocities	;; transferimos las velocidades de la entidad al frisbee
                            387 
   021C 18 4E         [12]  388 					jr o_not_pressed
   021E                     389 	player_2_vorb:
                            390 
   021E 21 04 08      [10]  391 			ld 	hl, #Key_I			;; HL = I Keycode
   0221 CD 00 00      [17]  392 			call 	cpct_isKeyPressed_asm 		;; A = True/False
   0224 FE 00         [ 7]  393 			cp 	#0 				;; A == 0?
   0226 28 1E         [12]  394 			jr 	z, i_not_pressed
                            395 				;; I is pressed	
   0228 21 04 04      [10]  396 				ld 	hl, #Key_O			;; HL = O Keycode
   022B CD 00 00      [17]  397 				call 	cpct_isKeyPressed_asm 		;; A = True/False
   022E FE 00         [ 7]  398 				cp 	#0 				;; A == 0?
   0230 28 08         [12]  399 				jr 	z, just_i_pressed
                            400 					;; I and O are pressed
   0232 21 00 00      [10]  401 					ld 	hl, #0			;; HL <= standard effect
   0235 CD 00 00      [17]  402 					call frisbee_setEffect		;; efecto hacia abajo
   0238 18 20         [12]  403 					jr ioro_pressed
   023A                     404 				just_i_pressed:
   023A 21 F8 FF      [10]  405 					ld 	hl, #std_N_eff		;; HL <= -standard effect
   023D DD E5         [15]  406 					push 	ix
   023F CD 00 00      [17]  407 					call frisbee_setEffect		;; efecto hacia arriba
   0242 DD E1         [14]  408 					pop 	ix
   0244 18 14         [12]  409 					jr 	ioro_pressed
   0246                     410 			i_not_pressed:
                            411 
   0246 21 04 04      [10]  412 				ld 	hl, #Key_O			;; HL = O Keycode
   0249 CD 00 00      [17]  413 				call 	cpct_isKeyPressed_asm 		;; A = True/False
   024C FE 00         [ 7]  414 				cp 	#0 				;; A == 0?
   024E 28 1C         [12]  415 				jr 	z, o_not_pressed
                            416 					;; O is pressed
   0250 21 08 00      [10]  417 					ld 	hl, #std_eff		;; HL <= standard effect
   0253 DD E5         [15]  418 					push 	ix
   0255 CD 00 00      [17]  419 					call frisbee_setEffect		;; efecto hacia abajo
   0258 DD E1         [14]  420 					pop 	ix
                            421 
   025A                     422 					ioro_pressed:
   025A DD 7E 16      [19]  423 					ld	a, Ent_id(ix)		;;
   025D DD 66 06      [19]  424 					ld	h, Ent_vx_I(ix)		;;
   0260 DD 6E 07      [19]  425 					ld	l, Ent_vx_F(ix)		;;
   0263 DD 56 08      [19]  426 					ld	d, Ent_vy_I(ix)		;;
   0266 DD 5E 09      [19]  427 					ld	e, Ent_vy_F(ix)		;;
   0269 CD 00 00      [17]  428 					call frisbee_setVelocities	;; transferimos las velocidades de la entidad al frisbee
                            429 
                            430 
   026C                     431 	no_collision:
   026C                     432 	b_not_pressed:
   026C                     433 	o_not_pressed:
   026C C9            [10]  434 	ret
