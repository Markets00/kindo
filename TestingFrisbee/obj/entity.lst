ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 1.
Hexadecimal [16-Bits]



                              1 .area _DATA
                              2 .area _CODE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 2.
Hexadecimal [16-Bits]



                              3 .include "utility.h.s"
                              1 ;; ====================================
                              2 ;; ====================================
                              3 ;; INCLUDED CPCTELERA FUNCTIONS
                              4 ;; ====================================
                              5 ;; ====================================
                              6 .globl cpct_waitVSYNC_asm
                              7 .globl cpct_drawSolidBox_asm
                              8 .globl cpct_getScreenPtr_asm
                              9 .globl cpct_scanKeyboard_asm
                             10 .globl cpct_isKeyPressed_asm
                             11 .globl cpct_disableFirmware_asm
                             12 .globl cpct_setVideoMode_asm
                             13 .globl cpct_setPalette_asm
                             14 .globl cpct_memcpy_asm
                             15 .globl negateHL
                             16 .globl cpct_setVideoMemoryPage_asm
                             17 .globl cpct_akp_musicPlay_asm
                             18 .globl cpct_akp_stop_asm
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 3.
Hexadecimal [16-Bits]



                              4 .include "game.h.s"
                              1 ;; ====================================
                              2 ;; ====================================
                              3 ;; GAME PUBLIC FUNCTIONS
                              4 ;; ====================================
                              5 ;; ====================================
                              6 .globl gameStart
                              7 .globl getVideoPtr
                              8 .globl incTeam1Points
                              9 .globl incTeam2Points
                             10 .globl play_music	;; alomejor son privados
                             11 .globl stop_music	;; alomejor son privados
                             12 .globl game_data
                             13 
                             14 ;; ====================================
                             15 ;; ====================================
                             16 ;; GAME PUBLIC DATA
                             17 ;; ====================================
                             18 ;; ====================================
                     0050    19 .equ RIGHT_LIMIT,	80
                     0000    20 .equ LEFT_LIMIT,	0
                     000A    21 .equ TOP_LIMIT,	 	10
                     00C8    22 .equ BOTTOM_LIMIT,	200
                     0028    23 .equ CENTER_LIMIT,	40
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 4.
Hexadecimal [16-Bits]



                              5 
                              6 
                              7 
                              8 ;; ====================================
                              9 ;; ====================================
                             10 ;; PUBLIC DATA
                             11 ;; ====================================
                             12 ;; ====================================
                     0000    13 .equ Ent_x_I, 		0	;; X coordinate, integer part
                     0001    14 .equ Ent_x_F, 		1	;; X coordinate, fractional part
                     0002    15 .equ Ent_y_I, 		2	;; Y coordinate, integer part
                     0003    16 .equ Ent_y_F, 		3	;; Y coordinate, fractional part
                     0004    17 .equ Ent_h, 		4	;; Height
                     0005    18 .equ Ent_w, 		5	;; Width
                     0006    19 .equ Ent_vx_I,		6	;; Velocity at X axis, integer part
                     0007    20 .equ Ent_vx_F,		7	;; Velocity at X axis, fractional part
                     0008    21 .equ Ent_vy_I,		8	;; Velocity at Y axis, integer part
                     0009    22 .equ Ent_vy_F,		9	;; Velocity at Y axis, fractional part
                     000A    23 .equ Ent_ax_I,		10	;; Acceleration at X axis, integer part
                     000B    24 .equ Ent_ax_F,		11	;; Acceleration at X axis, fractional part
                     000C    25 .equ Ent_ay_I,		12	;; Acceleration at Y axis, integer part
                     000D    26 .equ Ent_ay_F,		13	;; Acceleration at Y axis, fractional part
                     000E    27 .equ Ent_N_I,		14	;; Normal force, integer part
                     000F    28 .equ Ent_N_F,		15	;; Normal force, fractional part
                     0010    29 .equ Ent_last_x,	16	;; Last x rendered
                     0011    30 .equ Ent_erase_x,	17	;; x rendered at same buffer
                     0012    31 .equ Ent_last_y,	18	;; Last y rendered
                     0013    32 .equ Ent_erase_y,	19	;; y rendered at same buffer
                     0014    33 .equ Ent_state,		20	;; Entity enabled/disabled
                     0015    34 .equ Ent_clr, 		21	;; Entity color pattern
                     0016    35 .equ Ent_id, 		22	;; Numeric ID
                             36 				;; Frisbee 	0
                             37 				;; Player1 	1
                             38 				;; Enemy1	2
                             39 
                     0003    40 .equ MAX_VEL_X, 3 
                     FFFFFFFD    41 .equ MIN_VEL_X, -3
                     0003    42 .equ MAX_VEL_Y, 3
                     FFFFFFFD    43 .equ MIN_VEL_Y, -3
                             44 
                             45 
                             46 ;; ====================================
                             47 ;; ====================================
                             48 ;; PUBLIC FUNCTIONS
                             49 ;; ====================================
                             50 ;; ====================================
                             51 
                             52 ;; ===================================
                             53 ;; Pinta una entidad en pantalla
                             54 ;; Entrada:
                             55 ;; 	IX => Pointer to entity data 
                             56 ;; Modifica AF, BC, DE, HL
                             57 ;; ===================================
   0000                      58 entityDraw::
   0000 CD 00 00      [17]   59 	call 	getVideoPtr		;; HL <= Video memory pointer
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 5.
Hexadecimal [16-Bits]



   0003 EB            [ 4]   60 	ex 	de, hl			;; DE <= HL (Video memory pointer)
   0004 DD 4E 00      [19]   61 	ld 	c, Ent_x_I(ix) 		;; C = ent_x_I
   0007 DD 46 02      [19]   62 	ld 	b, Ent_y_I(ix) 		;; B = ent_y_I
   000A CD 00 00      [17]   63 	call cpct_getScreenPtr_asm 	;; HL = ent screen pointer
                             64 
   000D EB            [ 4]   65 	ex 	de, hl 			;; DE = ent screen pointer
   000E DD 46 04      [19]   66 	ld 	b, Ent_h(ix) 		;; B = ent height
   0011 DD 4E 05      [19]   67 	ld 	c, Ent_w(ix) 		;; C = ent width
   0014 DD 7E 15      [19]   68 	ld 	a, Ent_clr(ix)		;; A = ent colour
   0017 CD 00 00      [17]   69 	call cpct_drawSolidBox_asm
                             70 
   001A CD D5 01      [17]   71 	call updateX
   001D CD E9 01      [17]   72 	call updateY
   0020 C9            [10]   73 	ret
                             74 
                             75 ;; ===================================
                             76 ;; Borra una entidad de la pantalla
                             77 ;; Entrada:
                             78 ;; 	IX => Pointer to entity data 
                             79 ;; Modifica AF, BC, DE, HL
                             80 ;; ===================================
   0021                      81 entityErase::
   0021 CD 00 00      [17]   82 	call 	getVideoPtr		;; HL <= Video memory pointer
   0024 EB            [ 4]   83 	ex 	de, hl			;; DE <= HL (Video memory pointer)
   0025 DD 4E 11      [19]   84 	ld 	c, Ent_erase_x(ix)	;; C = ent_erase_x
   0028 DD 46 13      [19]   85 	ld 	b, Ent_erase_y(ix)	;; B = ent_erase_y
   002B CD 00 00      [17]   86 	call cpct_getScreenPtr_asm 	;; HL = ent screen pointer
                             87 
   002E EB            [ 4]   88 	ex 	de, hl 			;; DE = ent screen pointer
   002F 3E 00         [ 7]   89 	ld 	a, #0x00 		;; A = background color
   0031 DD 46 04      [19]   90 	ld 	b, Ent_h(ix) 		;; B = ent height
   0034 DD 4E 05      [19]   91 	ld 	c, Ent_w(ix) 		;; C = ent width
   0037 CD 00 00      [17]   92 	call cpct_drawSolidBox_asm
                             93 
   003A C9            [10]   94 	ret
                             95 
                             96 ;; =========================================
                             97 ;; Actualiza el estado de las fÃ­sicas
                             98 ;; 	de una entidad
                             99 ;; Entrada:
                            100 ;; 	IX => Pointer to entity data
                            101 ;; Modifica F, DE, HL
                            102 ;; =========================================
   003B                     103 entityUpdatePhysics::
                            104 	;; vx' = vx + ax
   003B DD 66 06      [19]  105 	ld 	h, Ent_vx_I(ix)
   003E DD 6E 07      [19]  106 	ld 	l, Ent_vx_F(ix)		;; HL <= ent_vx
   0041 DD 56 0A      [19]  107 	ld 	d, Ent_ax_I(ix)
   0044 DD 5E 0B      [19]  108 	ld 	e, Ent_ax_F(ix)		;; DE <= ent_ax
                            109 
   0047 19            [11]  110 	add 	hl, de 			;; HL <= HL + DE (ent_vx + ent_ax)
                            111 
   0048 7C            [ 4]  112 	ld 	a, h
   0049 FE 03         [ 7]  113 	cp 	#MAX_VEL_X
   004B F2 59 00      [10]  114 	jp 	p, cant_accelerate_x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 6.
Hexadecimal [16-Bits]



                            115 		;; vx' < MAX_VEL_X
   004E FE FD         [ 7]  116 		cp 	#MIN_VEL_X
   0050 FA 59 00      [10]  117 		jp 	m, cant_accelerate_x
                            118 			;; vx' > MIN_VEL_X
                            119 			;; Can accelerate at X axis
   0053 DD 74 06      [19]  120 			ld 	Ent_vx_I(ix), h
   0056 DD 75 07      [19]  121 			ld 	Ent_vx_F(ix), l		;; Ent_vx <= HL
                            122 
   0059                     123 	cant_accelerate_x:
                            124 	;; vx' > MAX_VEL_X || vx' < MIN_VEL_X
                            125 
                            126 
                            127 	;; vy = vy + ay
   0059 DD 66 08      [19]  128 	ld 	h, Ent_vy_I(ix)
   005C DD 6E 09      [19]  129 	ld 	l, Ent_vy_F(ix)		;; HL <= ent_vy
   005F DD 56 0C      [19]  130 	ld 	d, Ent_ay_I(ix)
   0062 DD 5E 0D      [19]  131 	ld 	e, Ent_ay_F(ix)		;; DE <= ent_ay
                            132 
   0065 19            [11]  133 	add 	hl, de 			;; HL <= HL + DE (ent_vy + ent_ay)
   0066 7C            [ 4]  134 	ld 	a, h
   0067 FE 03         [ 7]  135 	cp 	#MAX_VEL_Y
   0069 F2 77 00      [10]  136 	jp 	p, cant_accelerate_y
                            137 		;; vy' < MIN_VEL_Y
   006C FE FD         [ 7]  138 		cp 	#MIN_VEL_Y
   006E FA 77 00      [10]  139 		jp 	m, cant_accelerate_y
                            140 			;; vy' > MIN_VEL_Y
                            141 			;; Can accelerate at Y axis
   0071 DD 74 08      [19]  142 			ld 	Ent_vy_I(ix), h
   0074 DD 75 09      [19]  143 			ld 	Ent_vy_F(ix), l		;; Ent_vy <= HL
                            144 
   0077                     145 	cant_accelerate_y:
                            146 
                            147 	;; Apply deceleration X axis
   0077 DD 7E 06      [19]  148 	ld 	a, Ent_vx_I(ix)		;; A <= vx_I
   007A FE 00         [ 7]  149 	cp 	#0
                            150 	;;jr 	z, cant_decelerate_x	;; vx_I == 0?
                            151 		;; vx_I != 0
   007C FA 95 00      [10]  152 	jp	m, vx_negative
                            153 		;; vx positive
                            154 
   007F DD 66 0E      [19]  155 		ld 	h, Ent_N_I(ix)
   0082 DD 6E 0F      [19]  156 		ld 	l, Ent_N_F(ix)		;; HL <= ent_N
                            157 
   0085 CD C5 01      [17]  158 		call 	negateHL		;; HL <= -ent_N
                            159 
   0088 54            [ 4]  160 		ld 	d, h
   0089 5D            [ 4]  161 		ld 	e, l			;; DE <= -ent_N
                            162 
   008A DD 66 06      [19]  163 		ld 	h, Ent_vx_I(ix)
   008D DD 6E 07      [19]  164 		ld 	l, Ent_vx_F(ix)		;; HL <= ent_vx
                            165 
   0090 19            [11]  166 		add 	hl, de
   0091 38 13         [12]  167 		jr	c, can_decelerate_x
                            168 
   0093 18 11         [12]  169 		jr can_decelerate_x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 7.
Hexadecimal [16-Bits]



                            170 
   0095                     171 	vx_negative:
   0095 28 15         [12]  172 		jr 	z, cant_decelerate_x	;; vx_I == 0?
                            173 
   0097 DD 66 06      [19]  174 		ld 	h, Ent_vx_I(ix)
   009A DD 6E 07      [19]  175 		ld 	l, Ent_vx_F(ix)		;; HL <= ent_vx
   009D DD 56 0E      [19]  176 		ld 	d, Ent_N_I(ix)
   00A0 DD 5E 0F      [19]  177 		ld 	e, Ent_N_F(ix)		;; DE <= ent_N
                            178 
   00A3 19            [11]  179 		add 	hl, de
   00A4 38 00         [12]  180 		jr	c, can_decelerate_x
                            181 
   00A6                     182 		can_decelerate_x:
   00A6 DD 74 06      [19]  183 			ld 	Ent_vx_I(ix), h
   00A9 DD 75 07      [19]  184 			ld 	Ent_vx_F(ix), l		;; Ent_vx <= HL
                            185 
   00AC                     186 	cant_decelerate_x:
                            187 
                            188 	;; Apply deceleration Y axis
   00AC DD 7E 08      [19]  189 	ld 	a, Ent_vy_I(ix)		;; A <= vy_I
   00AF FE 00         [ 7]  190 	cp 	#0
                            191 	;;jr 	z, cant_decelerate_y	;; vy_I == 0?
                            192 		;; vy_I != 0
   00B1 FA CA 00      [10]  193 		jp	m, vy_negative
                            194 
                            195 			;; vy positive
   00B4 DD 66 0E      [19]  196 			ld 	h, Ent_N_I(ix)
   00B7 DD 6E 0F      [19]  197 			ld 	l, Ent_N_F(ix)		;; HL <= ent_N
                            198 
   00BA CD C5 01      [17]  199 			call 	negateHL		;; HL <= -ent_N
                            200 
   00BD 54            [ 4]  201 			ld 	d, h
   00BE 5D            [ 4]  202 			ld 	e, l			;; DE <= -ent_N
                            203 
   00BF DD 66 08      [19]  204 			ld 	h, Ent_vy_I(ix)
   00C2 DD 6E 09      [19]  205 			ld 	l, Ent_vy_F(ix)		;; HL <= ent_vy
                            206 
   00C5 19            [11]  207 			add 	hl, de
   00C6 38 11         [12]  208 			jr	c, can_decelerate_y
                            209 
   00C8 18 0F         [12]  210 			jr can_decelerate_y
                            211 
   00CA                     212 		vy_negative:
   00CA DD 66 08      [19]  213 			ld 	h, Ent_vy_I(ix)
   00CD DD 6E 09      [19]  214 			ld 	l, Ent_vy_F(ix)		;; HL <= ent_vy
   00D0 DD 56 0E      [19]  215 			ld 	d, Ent_N_I(ix)
   00D3 DD 5E 0F      [19]  216 			ld 	e, Ent_N_F(ix)		;; DE <= ent_N
                            217 
   00D6 19            [11]  218 			add 	hl, de
   00D7 38 00         [12]  219 			jr	c, can_decelerate_y
                            220 
   00D9                     221 			can_decelerate_y:
   00D9 DD 74 08      [19]  222 				ld 	Ent_vy_I(ix), h
   00DC DD 75 09      [19]  223 				ld 	Ent_vy_F(ix), l		;; Ent_vy <= HL
                            224 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 8.
Hexadecimal [16-Bits]



   00DF                     225 	cant_decelerate_y:
                            226 
   00DF DD 36 0A 00   [19]  227 	ld 	Ent_ax_I(ix), #0	;; 
   00E3 DD 36 0B 00   [19]  228 	ld 	Ent_ax_F(ix), #0	;; ax = 0
   00E7 DD 36 0C 00   [19]  229 	ld 	Ent_ay_I(ix), #0	;; 
   00EB DD 36 0D 00   [19]  230 	ld 	Ent_ay_F(ix), #0	;; ay = 0
                            231 
   00EF C9            [10]  232 	ret
                            233 
                            234 ;; =========================================
                            235 ;; Comprueba si existe colision entre
                            236 ;; dos entidades.
                            237 ;; Entrada:
                            238 ;; 	IX => Pointer to entity 1 data
                            239 ;; 	HL => Pointer to entity 2 data
                            240 ;; Modifica AF, B, HL, IX
                            241 ;; Devuelve:
                            242 ;; 	A <==== 0 si no hay colisiÃ³n, y la
                            243 ;; 		diferencia absoluta entre
                            244 ;;		las x, en caso de colisiÃ³n
                            245 ;; =========================================
   00F0 00 00               246 ent1_ptr: .dw #0000
   00F2 00 00               247 ent2_ptr: .dw #0000
   00F4                     248 entityCheckCollision::
                            249 	;;
                            250 	;; If (ent1_x + ent1_w <= ent2_x) no collision
                            251 	;; ent1_x + ent1_w - ent2_x <= 0  no collision
                            252 	;;
   00F4 DD 22 F0 00   [20]  253 	ld 	(ent1_ptr), ix 		;; ent1_ptr <= IX
   00F8 22 F2 00      [16]  254 	ld 	(ent2_ptr), hl 		;; ent2_ptr <= HL
                            255 
   00FB DD 7E 00      [19]  256 	ld 	a, Ent_x_I(ix)		;; A <= ent1_x
   00FE DD 86 05      [19]  257 	add 	Ent_w(ix)		;; A <= A + ent1_w
   0101 DD 2A F2 00   [20]  258 	ld 	ix, (ent2_ptr)		;; IX <= ent 2
   0105 DD 96 00      [19]  259 	sub 	Ent_x_I(ix)		;; A <= A - ent2_x
   0108 F2 0D 01      [10]  260 	jp 	p, collision_XR		;; A > 0? lo contrario a A <= 0
                            261 
   010B 18 39         [12]  262 	jr 	no_collision
                            263 
                            264 	;; Puede haber colisiÃ³n en el eje X, ent2 estÃ¡ por la izda de ent1
   010D                     265 	collision_XR:
                            266 		;; Guardar en b el resultado de la anterior operaciÃ³n (ent1_x + ent1_w - ent2_x)
   010D 47            [ 4]  267 		ld 	b, a 		;; B <= A
                            268 		;;
                            269 		;; If (ent2_x + ent2_w <= ent1_x) no collision
                            270 		;; ent2_x + ent2_w - ent1_x <= 0
                            271 		;; 
   010E DD 7E 00      [19]  272 		ld 	a, Ent_x_I(ix)		;; A <= ent2_x
   0111 DD 86 05      [19]  273 		add 	Ent_w(ix) 		;; A <= A + ent2_w
   0114 DD 2A F0 00   [20]  274 		ld 	ix, (ent1_ptr)		;; IX <= ent 1
   0118 DD 96 00      [19]  275 		sub 	Ent_x_I(ix)		;; A <= A - ent1_x
   011B F2 20 01      [10]  276 		jp 	p, collision_XL		;; A > 0? lo contrario a A <= 0
                            277 
   011E 18 26         [12]  278 		jr 	no_collision
                            279 	;; Hay colisiÃ³n en el eje X e Y, ent2 estÃ¡ entre la izda y la dcha de ent1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 9.
Hexadecimal [16-Bits]



   0120                     280 	collision_XL:
                            281 		;;
                            282 		;; If (ent1_y + ent1_h <= ent2_y) no collision
                            283 		;; ent1_y + ent1_h - ent2_y <= 0
                            284 		;;
   0120 DD 7E 02      [19]  285 		ld 	a, Ent_y_I(ix)		;; A <= ent1_x
   0123 DD 86 04      [19]  286 		add 	Ent_h(ix)		;; A <= A + ent1_w
   0126 DD 2A F2 00   [20]  287 		ld 	ix, (ent2_ptr)		;; IX <= ent 2
   012A DD 96 02      [19]  288 		sub 	Ent_y_I(ix)		;; A <= A - ent2_x
   012D F2 32 01      [10]  289 		jp 	p, collision_YB		;; A > 0? lo contrario a A <= 0
                            290 
   0130 18 14         [12]  291 		jr 	no_collision
                            292 
                            293 	;; Puede haber colisiÃ³n en el eje Y, ent2 estÃ¡ por arriba de ent1
   0132                     294 	collision_YB:
                            295 		;;
                            296 		;; If (ent2_y + ent2_h <= ent1_y) no collision
                            297 		;; ent2_y + ent2_h - ent1_y <= 0
                            298 		;; 
   0132 DD 7E 02      [19]  299 		ld 	a, Ent_y_I(ix)		;; A <= ent2_y
   0135 DD 86 04      [19]  300 		add 	Ent_h(ix) 		;; A <= A + ent2_h
   0138 DD 2A F0 00   [20]  301 		ld 	ix, (ent1_ptr)		;; IX <= ent 1
   013C DD 96 02      [19]  302 		sub 	Ent_y_I(ix)		;; A <= A - ent1_y
   013F F2 44 01      [10]  303 		jp 	p, collision_YT		;; A > 0? lo contrario a A <= 0
                            304 
   0142 18 02         [12]  305 		jr 	no_collision
                            306 
                            307 	;; Hay colisiÃ³n en el eje Y, ent2 estÃ¡ entre arriba y abajo de ent1
   0144                     308 	collision_YT:
                            309 
                            310 	;; A == ent1_x + ent1_w - ent2_x, A es mÃ­nimo 1
   0144 78            [ 4]  311 	ld 	a, b
                            312 
   0145 C9            [10]  313 	ret
                            314 
   0146                     315 	no_collision:
   0146 3E 00         [ 7]  316 	ld 	a, #0 	;; A == 0 si no hay colisiÃ³n
   0148 C9            [10]  317 	ret
                            318 
                            319 
                            320 ;; =========================================
                            321 ;; Actualiza la posiciÃ³n de la entidad
                            322 ;; Entrada:
                            323 ;; 	IX => Pointer to entity data
                            324 ;; Modifica AF, B, DE, HL, IX
                            325 ;; =========================================
   0149                     326 entityUpdatePosition::
                            327 
                            328 	;; x' = x + vx_I
   0149 DD 56 06      [19]  329 	ld 	d, Ent_vx_I(ix) 	
   014C DD 5E 07      [19]  330 	ld 	e, Ent_vx_F(ix)		;; DE <= ent_vx
                            331 
   014F DD 66 00      [19]  332 	ld 	h, Ent_x_I(ix) 		;; 
   0152 DD 6E 01      [19]  333 	ld 	l, Ent_x_F(ix)		;; HL <= Ent_x
                            334 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 10.
Hexadecimal [16-Bits]



   0155 19            [11]  335 	add 	hl, de 			;; HL <= HL + DE (x + vx)
                            336 
   0156 7C            [ 4]  337 	ld 	a, h 			;; B <= H (x_I + vx_I) integer part
   0157 FE 00         [ 7]  338 	cp 	#LEFT_LIMIT
   0159 FA 6A 01      [10]  339 	jp 	m, check_left		;; LIMIT_LEFT > x_I + vx_I? can't move
                            340 		;; can move left
   015C DD 86 05      [19]  341 		add 	Ent_w(ix) 		;; A <= w + x_I + vx_I
   015F 47            [ 4]  342 		ld	b, a
   0160 3E 50         [ 7]  343 		ld 	a, #RIGHT_LIMIT
   0162 B8            [ 4]  344 		cp	b
   0163 38 0E         [12]  345 		jr 	c, check_right	;; RIGHT_LIMIT < w + x_I + vx_I? can't move
                            346 			;; can move
   0165 CD CE 01      [17]  347 			call setX 		;; Ent_x <= HL (x + vx)
                            348 
   0168 18 14         [12]  349 			jr check_y
                            350 
   016A                     351 	check_left:
   016A 26 00         [ 7]  352 		ld 	h, #LEFT_LIMIT
   016C 2E 00         [ 7]  353 		ld 	l, #0
   016E CD CE 01      [17]  354 		call	setX 			;; Ent_x <= LEFT_LIMIT
   0171 18 0B         [12]  355 			jr check_y
                            356 
   0173                     357 	check_right:
   0173 3E 50         [ 7]  358 		ld 	a, #RIGHT_LIMIT
   0175 DD 96 05      [19]  359 		sub	a, Ent_w(ix)
   0178 67            [ 4]  360 		ld 	h, a
   0179 2E 00         [ 7]  361 		ld 	l, #0
   017B CD CE 01      [17]  362 		call	setX 			;; Ent_x <= RIGHT_LIMIT
                            363 
   017E                     364 	check_y:
                            365 	;; y' = y + vy_I*2
   017E DD 56 08      [19]  366 	ld 	d, Ent_vy_I(ix) 	
   0181 DD 5E 09      [19]  367 	ld 	e, Ent_vy_F(ix)		;; DE <= ent_vy
                            368 
   0184 DD 66 02      [19]  369 	ld 	h, Ent_y_I(ix) 		;; 
   0187 DD 6E 03      [19]  370 	ld 	l, Ent_y_F(ix)		;; HL <= Ent_y
                            371 
   018A 19            [11]  372 	add 	hl, de 			;; HL <= HL + DE (y + vy)
   018B 19            [11]  373 	add 	hl, de 			;; HL <= HL + DE (y + vy)
                            374 
   018C 7C            [ 4]  375 	ld 	a,h	 		;; A <= H (y_I + vy_I) integer part
   018D FE 0A         [ 7]  376 	cp 	#TOP_LIMIT
   018F DA A1 01      [10]  377 	jp 	c, check_top		;; TOP_LIMIT > y_I + vy_I? can't move
                            378 		;; can move up
   0192 7C            [ 4]  379 		ld 	a, h
   0193 DD 86 04      [19]  380 		add 	Ent_h(ix) 		;; A <= h + y_I + vy_I
   0196 47            [ 4]  381 		ld	b, a
   0197 3E C8         [ 7]  382 		ld 	a, #BOTTOM_LIMIT
   0199 B8            [ 4]  383 		cp	b
   019A DA AA 01      [10]  384 		jp 	c, check_bot		;; BOTTOM_LIMIT < h + y_I + vy_I? can't move
                            385 			;; can move
   019D CD E2 01      [17]  386 			call 	setY			;; Ent_y <= HL (y + vy)
                            387 
   01A0 C9            [10]  388 			ret
                            389 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 11.
Hexadecimal [16-Bits]



                            390 	;; CONTROL STRUCTURES: http://tutorials.eeems.ca/ASMin28Days/lesson/day07.html
                            391 
   01A1                     392 	check_top:
   01A1 26 0A         [ 7]  393 		ld 	h, #TOP_LIMIT
   01A3 2E 00         [ 7]  394 		ld 	l, #0
   01A5 CD E2 01      [17]  395 		call 	setY				;; Ent_y <= TOP_LIMIT
   01A8 18 0B         [12]  396 		jr bounce
                            397 
   01AA                     398 	check_bot:
   01AA 3E C8         [ 7]  399 		ld 	a, #BOTTOM_LIMIT
   01AC DD 96 04      [19]  400 		sub	a, Ent_h(ix)
   01AF 67            [ 4]  401 		ld 	h, a
   01B0 2E 00         [ 7]  402 		ld 	l, #0
   01B2 CD E2 01      [17]  403 		call 	setY				;; Ent_y <= BOTTOM_LIMIT
                            404 
   01B5                     405 	bounce:
   01B5 DD 66 08      [19]  406 			ld 	h, Ent_vy_I(ix)
   01B8 DD 6E 09      [19]  407 			ld 	l, Ent_vy_F(ix)		;; HL <= Ent_vy
                            408 
   01BB CD C5 01      [17]  409 			call 	negateHL
                            410 
   01BE DD 74 08      [19]  411 			ld 	Ent_vy_I(ix), h
   01C1 DD 75 09      [19]  412 			ld 	Ent_vy_F(ix), l		;; Ent_vy <= HL negated
                            413 
   01C4 C9            [10]  414 		ret
                            415 
                            416 ;; =========================================
                            417 ;; Inverts HL value
                            418 ;; Entrada:
                            419 ;; 	HL => value we are going to negate
                            420 ;; Modifica AF, HL
                            421 ;; Devuelve:
                            422 ;; 	HL <= HL value negated
                            423 ;; =========================================
   01C5                     424 negateHL::
   01C5 3E 00         [ 7]  425 	ld 	a, #0			;;
   01C7 AF            [ 4]  426 	xor	a			;;
   01C8 95            [ 4]  427 	sub	l			;;
   01C9 6F            [ 4]  428 	ld	l,a			;;
   01CA 9F            [ 4]  429 	sbc	a,a			;;
   01CB 94            [ 4]  430 	sub	h			;;
   01CC 67            [ 4]  431 	ld	h,a			;; negate HL
                            432 
   01CD C9            [10]  433 	ret
                            434 
                            435 ;; ====================================
                            436 ;; ====================================
                            437 ;; PRIVATE FUNCTIONS
                            438 ;; ====================================
                            439 ;; ====================================
                            440 
                            441 
                            442 
                            443 ;; =========================================
                            444 ;; Modifica la x de la entidad a la pasada
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 12.
Hexadecimal [16-Bits]



                            445 ;; 	por parÃ¡metro
                            446 ;; Entrada:
                            447 ;; 	IX => Pointer to entity data
                            448 ;; 	HL => value we are going to set
                            449 ;; Modifica AF
                            450 ;; =========================================
   01CE                     451 setX:
   01CE DD 74 00      [19]  452 	ld	Ent_x_I(ix), h
   01D1 DD 75 01      [19]  453 	ld	Ent_x_F(ix), l		;; Ent_x_I <= HL
                            454 
   01D4 C9            [10]  455 	ret
                            456 
                            457 
                            458 ;; =========================================
                            459 ;; Modifica las de Ãºltimas posiciones X
                            460 ;	de la entidad
                            461 ;; Entrada:
                            462 ;; 	IX => Pointer to entity data
                            463 ;; Modifica AF
                            464 ;; =========================================
   01D5                     465 updateX:
   01D5 DD 7E 10      [19]  466 	ld	a, Ent_last_x(ix)
   01D8 DD 77 11      [19]  467 	ld 	Ent_erase_x(ix), a	;; Ent_erase_x <= Ent_last_x
                            468 
   01DB DD 7E 00      [19]  469 	ld	a, Ent_x_I(ix)
   01DE DD 77 10      [19]  470 	ld 	Ent_last_x(ix), a	;; Ent_last_x <= Ent_x_I
   01E1 C9            [10]  471 	ret
                            472 
                            473 
                            474 ;; =========================================
                            475 ;; Modifica la y de la entidad a la pasada
                            476 ;; 	por parÃ¡metro
                            477 ;; Entrada:
                            478 ;; 	IX => Pointer to entity data
                            479 ;; 	HL => value we are going to set
                            480 ;; Modifica AF
                            481 ;; =========================================
   01E2                     482 setY:
                            483 
   01E2 DD 74 02      [19]  484 	ld	Ent_y_I(ix), h
   01E5 DD 75 03      [19]  485 	ld	Ent_y_F(ix), l		;; Ent_y_I <= HL
                            486 
   01E8 C9            [10]  487 	ret
                            488 
                            489 
                            490 ;; =========================================
                            491 ;; Modifica las de Ãºltimas posiciones Y
                            492 ;	de la entidad
                            493 ;; Entrada:
                            494 ;; 	IX => Pointer to entity data
                            495 ;; Modifica AF
                            496 ;; =========================================
   01E9                     497 updateY:
   01E9 DD 7E 12      [19]  498 	ld	a, Ent_last_y(ix)
   01EC DD 77 13      [19]  499 	ld 	Ent_erase_y(ix), a	;; Ent_erase_y <= Ent_last_y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 13.
Hexadecimal [16-Bits]



                            500 
   01EF DD 7E 02      [19]  501 	ld	a, Ent_y_I(ix)
   01F2 DD 77 12      [19]  502 	ld 	Ent_last_y(ix), a	;; Ent_last_y <= Ent_y_I
   01F5 C9            [10]  503 	ret
