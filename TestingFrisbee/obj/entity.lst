ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 1.
Hexadecimal [16-Bits]



                              1 .area _DATA
                              2 .area _CODE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 2.
Hexadecimal [16-Bits]



                              3 .include "utility.h.s"
                              1 ;; ====================================
                              2 ;; ====================================
                              3 ;; INCLUDED CPCTELERA FUNCTIONS
                              4 ;; ====================================
                              5 ;; ====================================
                              6 .globl cpct_waitVSYNC_asm
                              7 .globl cpct_drawSolidBox_asm
                              8 .globl cpct_getScreenPtr_asm
                              9 .globl cpct_scanKeyboard_asm
                             10 .globl cpct_isKeyPressed_asm
                             11 .globl cpct_disableFirmware_asm
                             12 .globl cpct_setVideoMode_asm
                             13 .globl cpct_setPalette_asm
                             14 .globl cpct_memcpy_asm
                             15 .globl negateHL
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 3.
Hexadecimal [16-Bits]



                              4 .include "game.h.s"
                              1 ;; ====================================
                              2 ;; ====================================
                              3 ;; GAME PUBLIC FUNCTIONS
                              4 ;; ====================================
                              5 ;; ====================================
                              6 .globl gameStart
                              7 
                              8 .macro defineGame name, type, map, fTime, t1points, t2points
                              9 	name'_data::
                             10 		name'_type::	.db type	;; Game Mode			(8 bits)
                             11 		name'_map::	.dw map		;; Pointer to map of tiles	(16 bits little endian)
                             12 		name'_fTime::	.dw fTime	;; Final duration of each match	(16 bits)
                             13 		name'_t1points:: .db t1points 	;; Points of team 1		(8 bits)
                             14 		name'_t2points:: .db t2points 	;; Points of team 2		(8 bits)
                             15 .endm
                             16 
                             17 ;; ====================================
                             18 ;; ====================================
                             19 ;; GAME PUBLIC DATA
                             20 ;; ====================================
                             21 ;; ====================================
                     0000    22 .equ Game_type, 	0	;; Game mode
                     0001    23 .equ Game_map_L, 	1	;; Low part of pointer to game map
                     0002    24 .equ Game_map_H, 	2	;; High part of pointer to game map
                     0003    25 .equ Game_fTime_H, 	3	;; High part of final match time
                     0004    26 .equ Game_fTime_L, 	4	;; Low part of final match time
                     0005    27 .equ Game_t1points, 	5	;; Points of team 1
                     0006    28 .equ Game_t2points, 	6	;; Points of team 2
                             29 
                     0050    30 .equ RIGHT_LIMIT,	80
                     0000    31 .equ LEFT_LIMIT,	0
                     000A    32 .equ TOP_LIMIT,	 	10
                     00C8    33 .equ BOTTOM_LIMIT,	200
                     0028    34 .equ CENTER_LIMIT,	40
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 4.
Hexadecimal [16-Bits]



                              5 
                              6 
                              7 
                              8 ;; ====================================
                              9 ;; ====================================
                             10 ;; PUBLIC DATA
                             11 ;; ====================================
                             12 ;; ====================================
                     0000    13 .equ Ent_x_I, 	0	;; X coordinate, integer part
                     0001    14 .equ Ent_x_F, 	1	;; X coordinate, fractional part
                     0002    15 .equ Ent_y_I, 	2	;; Y coordinate, integer part
                     0003    16 .equ Ent_y_F, 	3	;; Y coordinate, fractional part
                     0004    17 .equ Ent_h, 	4	;; Height
                     0005    18 .equ Ent_w, 	5	;; Width
                     0006    19 .equ Ent_vx_I,	6	;; Velocity at X axis, integer part
                     0007    20 .equ Ent_vx_F,	7	;; Velocity at X axis, fractional part
                     0008    21 .equ Ent_vy_I,	8	;; Velocity at Y axis, integer part
                     0009    22 .equ Ent_vy_F,	9	;; Velocity at Y axis, fractional part
                     000A    23 .equ Ent_ax_I,	10	;; Acceleration at X axis, integer part
                     000B    24 .equ Ent_ax_F,	11	;; Acceleration at X axis, fractional part
                     000C    25 .equ Ent_ay_I,	12	;; Acceleration at Y axis, integer part
                     000D    26 .equ Ent_ay_F,	13	;; Acceleration at Y axis, fractional part
                     000E    27 .equ Ent_N_I,	14	;; Normal force, integer part
                     000F    28 .equ Ent_N_F,	15	;; Normal force, fractional part
                     0010    29 .equ Ent_state,	16	;; Entity enabled/disabled
                     0011    30 .equ Ent_clr, 	17	;; Entity color pattern
                     0012    31 .equ Ent_id, 	18	;; Numeric ID
                             32 			;; Frisbee 	0
                             33 			;; Player1 	1
                             34 			;; Enemy1	2
                             35 
                     0002    36 .equ MAX_VEL_X, 2 
                     FFFFFFFE    37 .equ MIN_VEL_X, -2
                     0004    38 .equ MAX_VEL_Y, 4
                     FFFFFFFC    39 .equ MIN_VEL_Y, -4
                             40 
                             41 
                             42 ;; ====================================
                             43 ;; ====================================
                             44 ;; PUBLIC FUNCTIONS
                             45 ;; ====================================
                             46 ;; ====================================
                             47 
                             48 ;; ===================================
                             49 ;; Pinta una entidad en pantalla
                             50 ;; Entrada:
                             51 ;; 	IX => Pointer to entity data 
                             52 ;; Modifica AF, BC, DE, HL
                             53 ;; ===================================
   0000                      54 entityDraw::
   0000 11 00 C0      [10]   55 	ld 	de, #0xC000 		;; Video memory pointer
   0003 DD 4E 00      [19]   56 	ld 	c, Ent_x_I(ix) 		;; C = ent_x_H
   0006 DD 46 02      [19]   57 	ld 	b, Ent_y_I(ix) 		;; B = ent_y_H
   0009 CD 00 00      [17]   58 	call cpct_getScreenPtr_asm 	;; HL = ent screen pointer
                             59 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 5.
Hexadecimal [16-Bits]



   000C EB            [ 4]   60 	ex 	de, hl 			;; DE = ent screen pointer
   000D DD 46 04      [19]   61 	ld 	b, Ent_h(ix) 		;; B = ent height
   0010 DD 4E 05      [19]   62 	ld 	c, Ent_w(ix) 		;; C = ent width
   0013 DD 7E 11      [19]   63 	ld 	a, Ent_clr(ix)		;; A = ent colour
   0016 CD 00 00      [17]   64 	call cpct_drawSolidBox_asm
                             65 
   0019 C9            [10]   66 	ret
                             67 
                             68 ;; ===================================
                             69 ;; Borra una entidad de la pantalla
                             70 ;; Entrada:
                             71 ;; 	IX => Pointer to entity data 
                             72 ;; Modifica AF, BC, DE, HL
                             73 ;; ===================================
   001A                      74 entityErase::
   001A 11 00 C0      [10]   75 	ld 	de, #0xC000 		;; Video memory  pointer
   001D DD 4E 00      [19]   76 	ld 	c, Ent_x_I(ix) 		;; C = ent_x_H
   0020 DD 46 02      [19]   77 	ld 	b, Ent_y_I(ix) 		;; B = ent_y_H
   0023 CD 00 00      [17]   78 	call cpct_getScreenPtr_asm 	;; HL = ent screen pointer
                             79 
   0026 EB            [ 4]   80 	ex 	de, hl 			;; DE = ent screen pointer
   0027 3E 00         [ 7]   81 	ld 	a, #0x00 		;; A = background color
   0029 DD 46 04      [19]   82 	ld 	b, Ent_h(ix) 		;; B = ent height
   002C DD 4E 05      [19]   83 	ld 	c, Ent_w(ix) 		;; C = ent width
   002F CD 00 00      [17]   84 	call cpct_drawSolidBox_asm
                             85 
   0032 C9            [10]   86 	ret
                             87 
                             88 ;; =========================================
                             89 ;; Actualiza el estado de las fÃ­sicas
                             90 ;; 	de una entidad
                             91 ;; Entrada:
                             92 ;; 	IX => Pointer to entity data
                             93 ;; Modifica F, DE, HL
                             94 ;; =========================================
   0033                      95 entityUpdatePhysics::
                             96 	;; vx' = vx + ax
   0033 DD 66 06      [19]   97 	ld 	h, Ent_vx_I(ix)
   0036 DD 6E 07      [19]   98 	ld 	l, Ent_vx_F(ix)		;; HL <= ent_vx
   0039 DD 56 0A      [19]   99 	ld 	d, Ent_ax_I(ix)
   003C DD 5E 0B      [19]  100 	ld 	e, Ent_ax_F(ix)		;; DE <= ent_ax
                            101 
   003F 19            [11]  102 	add 	hl, de 			;; HL <= HL + DE (ent_vx + ent_ax)
                            103 
   0040 7C            [ 4]  104 	ld 	a, h
   0041 FE 02         [ 7]  105 	cp 	#MAX_VEL_X
   0043 F2 51 00      [10]  106 	jp 	p, cant_accelerate_x
                            107 		;; vx' < MAX_VEL_X
   0046 FE FE         [ 7]  108 		cp 	#MIN_VEL_X
   0048 FA 51 00      [10]  109 		jp 	m, cant_accelerate_x
                            110 			;; vx' > MIN_VEL_X
                            111 			;; Can accelerate at X axis
   004B DD 74 06      [19]  112 			ld 	Ent_vx_I(ix), h
   004E DD 75 07      [19]  113 			ld 	Ent_vx_F(ix), l		;; Ent_vx <= HL
                            114 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 6.
Hexadecimal [16-Bits]



   0051                     115 	cant_accelerate_x:
                            116 	;; vx' > MAX_VEL_X || vx' < MIN_VEL_X
                            117 
                            118 
                            119 	;; vy = vy + ay
   0051 DD 66 08      [19]  120 	ld 	h, Ent_vy_I(ix)
   0054 DD 6E 09      [19]  121 	ld 	l, Ent_vy_F(ix)		;; HL <= ent_vy
   0057 DD 56 0C      [19]  122 	ld 	d, Ent_ay_I(ix)
   005A DD 5E 0D      [19]  123 	ld 	e, Ent_ay_F(ix)		;; DE <= ent_ay
                            124 
   005D 19            [11]  125 	add 	hl, de 			;; HL <= HL + DE (ent_vy + ent_ay)
   005E 7C            [ 4]  126 	ld 	a, h
   005F FE 04         [ 7]  127 	cp 	#MAX_VEL_Y
   0061 F2 6F 00      [10]  128 	jp 	p, cant_accelerate_y
                            129 		;; vy' < MIN_VEL_Y
   0064 FE FC         [ 7]  130 		cp 	#MIN_VEL_Y
   0066 FA 6F 00      [10]  131 		jp 	m, cant_accelerate_y
                            132 			;; vy' > MIN_VEL_Y
                            133 			;; Can accelerate at Y axis
   0069 DD 74 08      [19]  134 			ld 	Ent_vy_I(ix), h
   006C DD 75 09      [19]  135 			ld 	Ent_vy_F(ix), l		;; Ent_vy <= HL
                            136 
   006F                     137 	cant_accelerate_y:
                            138 
                            139 	;; Apply deceleration X axis
   006F DD 7E 06      [19]  140 	ld 	a, Ent_vx_I(ix)		;; A <= vx_I
   0072 FE 00         [ 7]  141 	cp 	#0
   0074 28 2A         [12]  142 	jr 	z, cant_decelerate_x	;; vx_I == 0?
                            143 		;; vx_I != 0
   0076 FA 8D 00      [10]  144 		jp	m, vx_negative
                            145 			;; vx positive
                            146 
   0079 DD 66 0E      [19]  147 			ld 	h, Ent_N_I(ix)
   007C DD 6E 0F      [19]  148 			ld 	l, Ent_N_F(ix)		;; HL <= ent_N
                            149 
   007F CD C1 01      [17]  150 			call 	negateHL		;; HL <= -ent_N
   0082 54            [ 4]  151 			ld 	d, h
   0083 5D            [ 4]  152 			ld 	e, l			;; DE <= -ent_N
                            153 
   0084 DD 66 06      [19]  154 			ld 	h, Ent_vx_I(ix)
   0087 DD 6E 07      [19]  155 			ld 	l, Ent_vx_F(ix)		;; HL <= ent_vx
                            156 
   008A 19            [11]  157 			add 	hl, de
                            158 
   008B 18 0D         [12]  159 			jr can_decelerate_x
                            160 
   008D                     161 		vx_negative:
   008D DD 66 06      [19]  162 			ld 	h, Ent_vx_I(ix)
   0090 DD 6E 07      [19]  163 			ld 	l, Ent_vx_F(ix)		;; HL <= ent_vx
   0093 DD 56 0E      [19]  164 			ld 	d, Ent_N_I(ix)
   0096 DD 5E 0F      [19]  165 			ld 	e, Ent_N_F(ix)		;; DE <= ent_N
                            166 
   0099 19            [11]  167 			add 	hl, de
                            168 
   009A                     169 			can_decelerate_x:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 7.
Hexadecimal [16-Bits]



   009A DD 74 06      [19]  170 				ld 	Ent_vx_I(ix), h
   009D DD 75 07      [19]  171 				ld 	Ent_vx_F(ix), l		;; Ent_vx <= HL
                            172 
   00A0                     173 	cant_decelerate_x:
                            174 
                            175 	;; Apply deceleration Y axis
   00A0 DD 7E 08      [19]  176 	ld 	a, Ent_vy_I(ix)		;; A <= vy_I
   00A3 FE 00         [ 7]  177 	cp 	#0
   00A5 28 2A         [12]  178 	jr 	z, cant_decelerate_y	;; vy_I == 0?
                            179 		;; vy_I != 0
   00A7 FA BE 00      [10]  180 		jp	m, vy_negative
                            181 			;; vy positive
                            182 
   00AA DD 66 0E      [19]  183 			ld 	h, Ent_N_I(ix)
   00AD DD 6E 0F      [19]  184 			ld 	l, Ent_N_F(ix)		;; HL <= ent_N
                            185 
   00B0 CD C1 01      [17]  186 			call 	negateHL		;; HL <= -ent_N
   00B3 54            [ 4]  187 			ld 	d, h
   00B4 5D            [ 4]  188 			ld 	e, l			;; DE <= -ent_N
                            189 
   00B5 DD 66 08      [19]  190 			ld 	h, Ent_vy_I(ix)
   00B8 DD 6E 09      [19]  191 			ld 	l, Ent_vy_F(ix)		;; HL <= ent_vy
                            192 
   00BB 19            [11]  193 			add 	hl, de
                            194 
   00BC 18 0D         [12]  195 			jr can_decelerate_y
                            196 
   00BE                     197 		vy_negative:
   00BE DD 66 08      [19]  198 			ld 	h, Ent_vy_I(ix)
   00C1 DD 6E 09      [19]  199 			ld 	l, Ent_vy_F(ix)		;; HL <= ent_vy
   00C4 DD 56 0E      [19]  200 			ld 	d, Ent_N_I(ix)
   00C7 DD 5E 0F      [19]  201 			ld 	e, Ent_N_F(ix)		;; DE <= ent_N
                            202 
   00CA 19            [11]  203 			add 	hl, de
                            204 
   00CB                     205 			can_decelerate_y:
   00CB DD 74 08      [19]  206 				ld 	Ent_vy_I(ix), h
   00CE DD 75 09      [19]  207 				ld 	Ent_vy_F(ix), l		;; Ent_vy <= HL
                            208 
   00D1                     209 	cant_decelerate_y:
                            210 
   00D1 DD 36 0A 00   [19]  211 	ld 	Ent_ax_I(ix), #0	;; 
   00D5 DD 36 0B 00   [19]  212 	ld 	Ent_ax_F(ix), #0	;; ax = 0
   00D9 DD 36 0C 00   [19]  213 	ld 	Ent_ay_I(ix), #0	;; 
   00DD DD 36 0D 00   [19]  214 	ld 	Ent_ay_F(ix), #0	;; ay = 0
                            215 
   00E1 C9            [10]  216 	ret
                            217 
                            218 ;; =========================================
                            219 ;; Comprueba si existe colision entre
                            220 ;; dos entidades.
                            221 ;; Entrada:
                            222 ;; 	IX => Pointer to entity 1 data
                            223 ;; 	HL => Pointer to entity 2 data
                            224 ;; Modifica AF, B, HL, IX
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 8.
Hexadecimal [16-Bits]



                            225 ;; Devuelve:
                            226 ;; 	A <==== 0 si no hay colisiÃ³n, y la
                            227 ;; 		diferencia absoluta entre
                            228 ;;		las x, en caso de colisiÃ³n
                            229 ;; =========================================
   00E2 00 00               230 ent1_ptr: .dw #0000
   00E4 00 00               231 ent2_ptr: .dw #0000
   00E6                     232 entityCheckCollision::
                            233 	;;
                            234 	;; If (ent1_x + ent1_w <= ent2_x) no collision
                            235 	;; ent1_x + ent1_w - ent2_x <= 0  no collision
                            236 	;;
   00E6 DD 22 E2 00   [20]  237 	ld 	(ent1_ptr), ix 		;; ent1_ptr <= IX
   00EA 22 E4 00      [16]  238 	ld 	(ent2_ptr), hl 		;; ent2_ptr <= HL
                            239 
   00ED DD 7E 00      [19]  240 	ld 	a, Ent_x_I(ix)		;; A <= ent1_x
   00F0 DD 86 05      [19]  241 	add 	Ent_w(ix)		;; A <= A + ent1_w
   00F3 DD 2A E4 00   [20]  242 	ld 	ix, (ent2_ptr)		;; IX <= ent 2
   00F7 DD 96 00      [19]  243 	sub 	Ent_x_I(ix)		;; A <= A - ent2_x
   00FA F2 FF 00      [10]  244 	jp 	p, collision_XR		;; A > 0? lo contrario a A <= 0
                            245 
   00FD 18 39         [12]  246 	jr 	no_collision
                            247 
                            248 	;; Puede haber colisiÃ³n en el eje X, ent2 estÃ¡ por la izda de ent1
   00FF                     249 	collision_XR:
                            250 		;; Guardar en b el resultado de la anterior operaciÃ³n (ent1_x + ent1_w - ent2_x)
   00FF 47            [ 4]  251 		ld 	b, a 		;; B <= A
                            252 		;;
                            253 		;; If (ent2_x + ent2_w <= ent1_x) no collision
                            254 		;; ent2_x + ent2_w - ent1_x <= 0
                            255 		;; 
   0100 DD 7E 00      [19]  256 		ld 	a, Ent_x_I(ix)		;; A <= ent2_x
   0103 DD 86 05      [19]  257 		add 	Ent_w(ix) 		;; A <= A + ent2_w
   0106 DD 2A E2 00   [20]  258 		ld 	ix, (ent1_ptr)		;; IX <= ent 1
   010A DD 96 00      [19]  259 		sub 	Ent_x_I(ix)		;; A <= A - ent1_x
   010D F2 12 01      [10]  260 		jp 	p, collision_XL		;; A > 0? lo contrario a A <= 0
                            261 
   0110 18 26         [12]  262 		jr 	no_collision
                            263 	;; Hay colisiÃ³n en el eje X e Y, ent2 estÃ¡ entre la izda y la dcha de ent1
   0112                     264 	collision_XL:
                            265 		;;
                            266 		;; If (ent1_y + ent1_h <= ent2_y) no collision
                            267 		;; ent1_y + ent1_h - ent2_y <= 0
                            268 		;;
   0112 DD 7E 02      [19]  269 		ld 	a, Ent_y_I(ix)		;; A <= ent1_x
   0115 DD 86 04      [19]  270 		add 	Ent_h(ix)		;; A <= A + ent1_w
   0118 DD 2A E4 00   [20]  271 		ld 	ix, (ent2_ptr)		;; IX <= ent 2
   011C DD 96 02      [19]  272 		sub 	Ent_y_I(ix)		;; A <= A - ent2_x
   011F F2 24 01      [10]  273 		jp 	p, collision_YB		;; A > 0? lo contrario a A <= 0
                            274 
   0122 18 14         [12]  275 		jr 	no_collision
                            276 
                            277 	;; Puede haber colisiÃ³n en el eje Y, ent2 estÃ¡ por arriba de ent1
   0124                     278 	collision_YB:
                            279 		;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 9.
Hexadecimal [16-Bits]



                            280 		;; If (ent2_y + ent2_h <= ent1_y) no collision
                            281 		;; ent2_y + ent2_h - ent1_y <= 0
                            282 		;; 
   0124 DD 7E 02      [19]  283 		ld 	a, Ent_y_I(ix)		;; A <= ent2_y
   0127 DD 86 04      [19]  284 		add 	Ent_h(ix) 		;; A <= A + ent2_h
   012A DD 2A E2 00   [20]  285 		ld 	ix, (ent1_ptr)		;; IX <= ent 1
   012E DD 96 02      [19]  286 		sub 	Ent_y_I(ix)		;; A <= A - ent1_y
   0131 F2 36 01      [10]  287 		jp 	p, collision_YT		;; A > 0? lo contrario a A <= 0
                            288 
   0134 18 02         [12]  289 		jr 	no_collision
                            290 
                            291 	;; Hay colisiÃ³n en el eje Y, ent2 estÃ¡ entre arriba y abajo de ent1
   0136                     292 	collision_YT:
                            293 
                            294 	;; A == ent1_x + ent1_w - ent2_x, A es mÃ­nimo 1
   0136 78            [ 4]  295 	ld 	a, b
                            296 
   0137 C9            [10]  297 	ret
                            298 
   0138                     299 	no_collision:
   0138 3E 00         [ 7]  300 	ld 	a, #0 	;; A == 0 si no hay colisiÃ³n
   013A C9            [10]  301 	ret
                            302 
                            303 
                            304 ;; =========================================
                            305 ;; Actualiza la posiciÃ³n de la entidad
                            306 ;; Entrada:
                            307 ;; 	IX => Pointer to entity data
                            308 ;; Modifica AF, B, DE, HL, IX
                            309 ;; =========================================
   013B                     310 entityUpdatePosition::
                            311 
                            312 	;; x' = x + vx_I
   013B DD 56 06      [19]  313 	ld 	d, Ent_vx_I(ix) 	
   013E DD 5E 07      [19]  314 	ld 	e, Ent_vx_F(ix)		;; DE <= ent_vx
                            315 
   0141 DD 66 00      [19]  316 	ld 	h, Ent_x_I(ix) 		;; 
   0144 DD 6E 01      [19]  317 	ld 	l, Ent_x_F(ix)		;; HL <= Ent_x
                            318 
   0147 19            [11]  319 	add 	hl, de 			;; HL <= HL + DE (x + vx)
                            320 
   0148 7C            [ 4]  321 	ld 	a, h 			;; B <= H (x_I + vx_I) integer part
   0149 FE 00         [ 7]  322 	cp 	#LEFT_LIMIT
   014B FA 5F 01      [10]  323 	jp 	m, check_left		;; LIMIT_LEFT > x_I + vx_I? can't move
                            324 		;; can move left
   014E DD 86 05      [19]  325 		add 	Ent_w(ix) 		;; A <= w + x_I + vx_I
   0151 47            [ 4]  326 		ld	b, a
   0152 3E 50         [ 7]  327 		ld 	a, #RIGHT_LIMIT
   0154 B8            [ 4]  328 		cp	b
   0155 38 12         [12]  329 		jr 	c, check_right	;; RIGHT_LIMIT < w + x_I + vx_I? can't move
                            330 			;; can move
   0157 DD 74 00      [19]  331 			ld 	Ent_x_I(ix), h
   015A DD 75 01      [19]  332 			ld 	Ent_x_F(ix), l 		;; Ent_x <= HL (x + vx)
                            333 
   015D 18 16         [12]  334 			jr check_y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 10.
Hexadecimal [16-Bits]



                            335 
   015F                     336 	check_left:
   015F DD 36 00 00   [19]  337 		ld 	Ent_x_I(ix), #LEFT_LIMIT
   0163 DD 36 01 00   [19]  338 		ld 	Ent_x_F(ix), #0 		;; Ent_x <= LEFT_LIMIT
   0167 18 0C         [12]  339 			jr check_y
                            340 
   0169                     341 	check_right:
   0169 3E 50         [ 7]  342 		ld 	a, #RIGHT_LIMIT
   016B DD 96 05      [19]  343 		sub	a, Ent_w(ix)
   016E DD 77 00      [19]  344 		ld 	Ent_x_I(ix), a
   0171 DD 36 01 00   [19]  345 		ld 	Ent_x_F(ix), #0 		;; Ent_x <= RIGHT_LIMIT
                            346 
   0175                     347 	check_y:
                            348 	;; y' = y + vy_I*2
   0175 DD 56 08      [19]  349 	ld 	d, Ent_vy_I(ix) 	
   0178 DD 5E 09      [19]  350 	ld 	e, Ent_vy_F(ix)		;; DE <= ent_vy
                            351 
   017B DD 66 02      [19]  352 	ld 	h, Ent_y_I(ix) 		;; 
   017E DD 6E 03      [19]  353 	ld 	l, Ent_y_F(ix)		;; HL <= Ent_y
                            354 
   0181 19            [11]  355 	add 	hl, de 			;; HL <= HL + DE (y + vy)
   0182 19            [11]  356 	add 	hl, de 			;; HL <= HL + DE (y + vy)
                            357 
   0183 7C            [ 4]  358 	ld 	a,h	 		;; A <= H (y_I + vy_I) integer part
   0184 FE 0A         [ 7]  359 	cp 	#TOP_LIMIT
   0186 DA 9B 01      [10]  360 	jp 	c, check_top		;; TOP_LIMIT > y_I + vy_I? can't move
                            361 	;;jp 	m, cant_move_y
                            362 		;; can move up
   0189 7C            [ 4]  363 		ld 	a, h
   018A DD 86 04      [19]  364 		add 	Ent_h(ix) 		;; A <= h + y_I + vy_I
   018D 47            [ 4]  365 		ld	b, a
   018E 3E C8         [ 7]  366 		ld 	a, #BOTTOM_LIMIT
   0190 B8            [ 4]  367 		cp	b
   0191 DA A5 01      [10]  368 		jp 	c, check_bot		;; BOTTOM_LIMIT < h + y_I + vy_I? can't move
                            369 			;; can move
   0194 DD 74 02      [19]  370 			ld 	Ent_y_I(ix), h
   0197 DD 75 03      [19]  371 			ld 	Ent_y_F(ix), l 		;; Ent_y <= HL (y + vy)
                            372 
   019A C9            [10]  373 			ret
                            374 
                            375 	;; CONTROL STRUCTURES: http://tutorials.eeems.ca/ASMin28Days/lesson/day07.html
                            376 
   019B                     377 	check_top:
   019B DD 36 02 0A   [19]  378 		ld 	Ent_y_I(ix), #TOP_LIMIT
   019F DD 36 03 00   [19]  379 		ld 	Ent_y_F(ix), #0 		;; Ent_y <= TOP_LIMIT
                            380 		;; ld	a, Ent_id(ix)
                            381 		;; cp 	#0
                            382 		;; jr 	nz, not_frisbee			;;Ent_id != 0?
   01A3 18 0C         [12]  383 			jr bounce
   01A5                     384 	check_bot:
   01A5 3E C8         [ 7]  385 		ld 	a, #BOTTOM_LIMIT
   01A7 DD 96 04      [19]  386 		sub	a, Ent_h(ix)
   01AA DD 77 02      [19]  387 		ld 	Ent_y_I(ix), a
   01AD DD 36 03 00   [19]  388 		ld 	Ent_y_F(ix), #0 		;; Ent_y <= BOTTOM_LIMIT
                            389 		;; ld	a, Ent_id(ix)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 11.
Hexadecimal [16-Bits]



                            390 		;; cp 	#0
                            391 		;; jr 	nz, not_frisbee			;;Ent_id != 0?
                            392 
   01B1                     393 	bounce:
   01B1 DD 66 08      [19]  394 			ld 	h, Ent_vy_I(ix)
   01B4 DD 6E 09      [19]  395 			ld 	l, Ent_vy_F(ix)		;; HL <= Ent_vy
                            396 
   01B7 CD C1 01      [17]  397 			call 	negateHL
                            398 
   01BA DD 74 08      [19]  399 			ld 	Ent_vy_I(ix), h
   01BD DD 75 09      [19]  400 			ld 	Ent_vy_F(ix), l		;; Ent_vy <= HL negated
                            401 
   01C0 C9            [10]  402 		ret
                            403 
                            404 ;; =========================================
                            405 ;; Inverts HL value
                            406 ;; Entrada:
                            407 ;; 	HL => value we are going to negate
                            408 ;; Modifica AF
                            409 ;; Devuelve:
                            410 ;; 	HL <= HL value negated
                            411 ;; =========================================
   01C1                     412 negateHL::
   01C1 3E 00         [ 7]  413 	ld 	a, #0			;;
   01C3 AF            [ 4]  414 	xor	a			;;
   01C4 95            [ 4]  415 	sub	l			;;
   01C5 6F            [ 4]  416 	ld	l,a			;;
   01C6 9F            [ 4]  417 	sbc	a,a			;;
   01C7 94            [ 4]  418 	sub	h			;;
   01C8 67            [ 4]  419 	ld	h,a			;; negate HL
                            420 
   01C9 C9            [10]  421 	ret
                            422 
                            423 ;; ====================================
                            424 ;; ====================================
                            425 ;; PRIVATE FUNCTIONS
                            426 ;; ====================================
                            427 ;; ====================================
                            428 
                            429 
