ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 1.
Hexadecimal [16-Bits]



                              1 .area _DATA
                              2 .area _CODE
                              3 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 2.
Hexadecimal [16-Bits]



                              4 .include "entity.h.s"
                              1 ;; ====================================
                              2 ;; ====================================
                              3 ;; ENTITY PUBLIC FUNCTIONS
                              4 ;; ====================================
                              5 ;; ====================================
                              6 .globl entityDraw
                              7 .globl entityErase
                              8 .globl entityCheckCollision
                              9 .globl entityUpdatePhysics
                             10 .globl entityUpdatePosition
                             11 
                             12 .macro defineEntity name, x,y, h, w, vx, vy, ax, ay, normal, state, clr, id
                             13 	name'_data::
                             14 		name'_x:	.dw x		;; X coordinate			(16 bits)
                             15 		name'_y:	.dw y		;; Y coordinate			(16 bits)
                             16 		name'_h:	.db h		;; Height			(8 bits)
                             17 		name'_w:	.db w		;; Width			(8 bits)
                             18 		name'_vx:	.dw vx		;; Velocity at X axis 		(16 bits)
                             19 		name'_vy:	.dw vy		;; Velocity at Y axis		(16 bits)
                             20 		name'_ax:	.dw ax		;; Acceleration at X axis	(16 bits)
                             21 		name'_ay:	.dw ay		;; Acceleration at Y axis	(16 bits)
                             22 		name'_normal:	.dw normal	;; Normal force			(16 bits)
                             23 		name'_state:	.db state	;; Entity enabled/disabled	(8 bits)
                             24 		name'_clr:	.db clr		;; Entity color pattern		(8 bits)
                             25 		name'_id:	.db id		;; Numeric ID			(8 bits)
                             26 .endm
                             27 
                             28 
                             29 ;; ====================================
                             30 ;; ====================================
                             31 ;; ENTITY PUBLIC DATA
                             32 ;; ====================================
                             33 ;; ====================================
                     0000    34 .equ Ent_x_I, 	0	;; X coordinate, integer part
                     0001    35 .equ Ent_x_F, 	1	;; X coordinate, fractional part
                     0002    36 .equ Ent_y_I, 	2	;; Y coordinate, integer part
                     0003    37 .equ Ent_y_F, 	3	;; Y coordinate, fractional part
                     0004    38 .equ Ent_h, 	4	;; Height
                     0005    39 .equ Ent_w, 	5	;; Width
                     0006    40 .equ Ent_vx_I,	6	;; Velocity at X axis, integer part
                     0007    41 .equ Ent_vx_F,	7	;; Velocity at X axis, fractional part
                     0008    42 .equ Ent_vy_I,	8	;; Velocity at Y axis, integer part
                     0009    43 .equ Ent_vy_F,	9	;; Velocity at Y axis, fractional part
                     000A    44 .equ Ent_ax_I,	10	;; Acceleration at X axis, integer part
                     000B    45 .equ Ent_ax_F,	11	;; Acceleration at X axis, fractional part
                     000C    46 .equ Ent_ay_I,	12	;; Acceleration at Y axis, integer part
                     000D    47 .equ Ent_ay_F,	13	;; Acceleration at Y axis, fractional part
                     000E    48 .equ Ent_N_I,	14	;; Normal force, integer part
                     000F    49 .equ Ent_N_F,	15	;; Normal force, fractional part
                     0010    50 .equ Ent_state,	16	;; Entity enabled/disabled
                     0011    51 .equ Ent_clr, 	17	;; Entity color pattern
                     0012    52 .equ Ent_id, 	18	;; Numeric ID
                             53 			;; Frisbee 	0
                             54 			;; Player1 	1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 3.
Hexadecimal [16-Bits]



                             55 			;; Enemy1	2
                             56 
                     0002    57 .equ MAX_VEL_X, 2 
                     FFFFFFFE    58 .equ MIN_VEL_X, -2
                     0004    59 .equ MAX_VEL_Y, 4
                     FFFFFFFC    60 .equ MIN_VEL_Y, -4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 4.
Hexadecimal [16-Bits]



                              5 .include "utility.h.s"
                              1 ;; ====================================
                              2 ;; ====================================
                              3 ;; INCLUDED CPCTELERA FUNCTIONS
                              4 ;; ====================================
                              5 ;; ====================================
                              6 .globl cpct_waitVSYNC_asm
                              7 .globl cpct_drawSolidBox_asm
                              8 .globl cpct_getScreenPtr_asm
                              9 .globl cpct_scanKeyboard_asm
                             10 .globl cpct_isKeyPressed_asm
                             11 .globl cpct_disableFirmware_asm
                             12 .globl cpct_setVideoMode_asm
                             13 .globl cpct_setPalette_asm
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 5.
Hexadecimal [16-Bits]



                              6 
                     0013     7 .equ Frisbee_effect_I, 19
                     0014     8 .equ Frisbee_effect_F, 20
                     0008     9 .equ std_eff, 08
                             10 ;; ====================================
                             11 ;; ====================================
                             12 ;; PUBLIC DATA
                             13 ;; ====================================
                             14 ;; ====================================
                             15 
                             16 ;; .macro defineEntity name, x,y, h, w, vx, vy, ax, ay, state, clr
                             17 
   0000                      18 defineEntity frisbee, #0x0050-0x0002, #0x0054, #8, #2, #0x10FF, #0000, #0000, #0000, #0x0100, #1, #0x0F, #0
   0000                       1 	frisbee_data::
   0000 4E 00                 2 		frisbee_x:	.dw #0x0050-0x0002		;; X coordinate			(16 bits)
   0002 54 00                 3 		frisbee_y:	.dw #0x0054		;; Y coordinate			(16 bits)
   0004 08                    4 		frisbee_h:	.db #8		;; Height			(8 bits)
   0005 02                    5 		frisbee_w:	.db #2		;; Width			(8 bits)
   0006 FF 10                 6 		frisbee_vx:	.dw #0x10FF		;; Velocity at X axis 		(16 bits)
   0008 00 00                 7 		frisbee_vy:	.dw #0000		;; Velocity at Y axis		(16 bits)
   000A 00 00                 8 		frisbee_ax:	.dw #0000		;; Acceleration at X axis	(16 bits)
   000C 00 00                 9 		frisbee_ay:	.dw #0000		;; Acceleration at Y axis	(16 bits)
   000E 00 01                10 		frisbee_normal:	.dw #0x0100	;; Normal force			(16 bits)
   0010 01                   11 		frisbee_state:	.db #1	;; Entity enabled/disabled	(8 bits)
   0011 0F                   12 		frisbee_clr:	.db #0x0F		;; Entity color pattern		(8 bits)
   0012 00                   13 		frisbee_id:	.db #0		;; Numeric ID			(8 bits)
   0013 00 08                19 	frisbee_effect: .dw #0x0800									;; effect
                             20 
                             21 
                             22 
                             23 ;; ====================================
                             24 ;; ====================================
                             25 ;; PRIVATE DATA
                             26 ;; ====================================
                             27 ;; ====================================
                             28 
                             29 
                             30 ;; ====================================
                             31 ;; ====================================
                             32 ;; PUBLIC FUNCTIONS
                             33 ;; ====================================
                             34 ;; ====================================
                             35 
                             36 ;; =========================================
                             37 ;; Desactiva el frisbee
                             38 ;; Modifica A
                             39 ;; =========================================
   0015                      40 frisbee_setOff::
   0015 3E 00         [ 7]   41 	ld 	a, #0
   0017 32 10 00      [13]   42 	ld 	(frisbee_state), a
   001A C9            [10]   43 	ret
                             44 
   001B                      45 frisbee_erase::
   001B DD 21 00 00   [14]   46 	ld 	ix, #frisbee_data
   001F CD 00 00      [17]   47 	call entityErase		;; Pintar cuadrado azul fondo
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 6.
Hexadecimal [16-Bits]



                             48 
   0022 C9            [10]   49 	ret
                             50 
                             51 
                             52 ;; ================================================
                             53 ;; Modifica el valor de la velocidad del frisbee
                             54 ;; 	en el eje X e Y, al recibido en HL y DE
                             55 ;; Recibe:
                             56 ;; 	HL <= X axis velocity
                             57 ;; 	DE <= Y axis velocity
                             58 ;; Modifica: HL, IX
                             59 ;; ================================================
   0023                      60 frisbee_setVelocities::
   0023 DD 21 00 00   [14]   61 	ld 	ix, #frisbee_data
   0027 DD 74 06      [19]   62 	ld 	Ent_vx_I(ix), h
   002A DD 75 07      [19]   63 	ld 	Ent_vx_F(ix), l
   002D DD 72 08      [19]   64 	ld 	Ent_vy_I(ix), d
   0030 DD 73 09      [19]   65 	ld 	Ent_vy_F(ix), e
   0033 C9            [10]   66 	ret
                             67 
                             68 
                             69 ;; ===========================================
                             70 ;; Modifica el valor del efecto del frisbee
                             71 ;; 	al recibido en HL
                             72 ;; Recibe:
                             73 ;; 	HL <= Effect value
                             74 ;; Modifica A
                             75 ;; ===========================================
   0034                      76 frisbee_setEffect::
   0034 22 13 00      [16]   77 	ld 	(frisbee_effect), hl
   0037 C9            [10]   78 	ret
                             79 
                             80 ;; =========================================
                             81 ;; Actualiza el estado del frisbee
                             82 ;; Modifica A
                             83 ;; =========================================
   0038                      84 frisbee_update::
                             85 
   0038 3A 10 00      [13]   86 	ld 	a, (frisbee_state)	;; A <= frisbee_state
   003B FE 01         [ 7]   87 	cp 	#1
   003D 20 0E         [12]   88 	jr 	nz, not_active		;; A != 1?
                             89 	
                             90 		;; Active
   003F DD 21 00 00   [14]   91 		ld 	ix, #frisbee_data
   0043 CD 5B 00      [17]   92 		call frisbee_applyEffect 	
   0046 CD 00 00      [17]   93 		call entityUpdatePhysics
   0049 CD 00 00      [17]   94 		call entityUpdatePosition
                             95 		;; call moveLeft
   004C C9            [10]   96 		ret
                             97 
   004D                      98 	not_active:
   004D 3E 01         [ 7]   99 		ld 	a, #1
   004F 32 10 00      [13]  100 		ld 	(frisbee_state), a
   0052 C9            [10]  101 	ret
                            102 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 7.
Hexadecimal [16-Bits]



   0053                     103 frisbee_draw::
                            104 
   0053 DD 21 00 00   [14]  105 	ld 	ix, #frisbee_data
   0057 CD 00 00      [17]  106 	call entityDraw 		;; Pintar cuadrado azul cian
                            107 
   005A C9            [10]  108 	ret
                            109 	
                            110 ;; ====================================
                            111 ;; ====================================
                            112 ;; PRIVATE FUNCTIONS
                            113 ;; ====================================
                            114 ;; ====================================
                            115 
                            116 
                            117 ;; ===========================================
                            118 ;; Mueve el frisbee a la izquierda un píxel
                            119 ;; Recibe:
                            120 ;; 	IX <= Pointer to entity data
                            121 ;; Modifica A
                            122 ;; ===========================================
   005B                     123 frisbee_applyEffect:
                            124 
                            125 	;; vy' = vy + ay
   005B DD 66 08      [19]  126 	ld 	h, Ent_vy_I(ix)
   005E DD 6E 09      [19]  127 	ld 	l, Ent_vy_F(ix)		;; HL <= ent_vy
   0061 DD 56 13      [19]  128 	ld 	d, Frisbee_effect_I(ix)
   0064 DD 5E 14      [19]  129 	ld 	e, Frisbee_effect_F(ix)	;; DE <= frisbee_effect
                            130 
   0067 19            [11]  131 	add 	hl, de 			;; HL <= HL + DE (ent_vy + frisbee_effect)
   0068 7C            [ 4]  132 	ld 	a, h
   0069 FE 04         [ 7]  133 	cp 	#MAX_VEL_Y
   006B F2 79 00      [10]  134 	jp 	p, cant_accelerate_y
                            135 		;; vy' < MIN_VEL_Y
   006E FE FC         [ 7]  136 		cp 	#MIN_VEL_Y
   0070 FA 79 00      [10]  137 		jp 	m, cant_accelerate_y
                            138 			;; vy' > MIN_VEL_Y
                            139 			;; Can accelerate at Y axis
   0073 DD 74 08      [19]  140 			ld 	Ent_vy_I(ix), h
   0076 DD 75 09      [19]  141 			ld 	Ent_vy_F(ix), l		;; Ent_vy <= HL
                            142 
   0079                     143 	cant_accelerate_y:
                            144 
   0079 C9            [10]  145 	ret
                            146 
                            147 ;; =========================================
                            148 ;; Mueve el frisbee a la derecha un píxel
                            149 ;; Modifica A
                            150 ;; =========================================
   007A                     151 moveRight:
   007A 3A 00 00      [13]  152 	ld 	a, (frisbee_x) 		;; A = frisbee_x
   007D FE 4D         [ 7]  153 	cp 	#80-3 			;; A == right_limit - frisbee_width?
   007F 28 04         [12]  154 	jr 	z, cant_move_right 		
   0081 3C            [ 4]  155 		inc 	a 		;; move right one pixel
   0082 32 00 00      [13]  156 		ld 	(frisbee_x), a
   0085                     157 	cant_move_right:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 8.
Hexadecimal [16-Bits]



   0085 C9            [10]  158 	ret
                            159 
                            160 ;; =========================================
                            161 ;; Mueve el frisbee abajo un píxel
                            162 ;; Modifica A
                            163 ;; =========================================
   0086                     164 moveDown:
   0086 3A 02 00      [13]  165 	ld 	a, (frisbee_y) 		;; A = frisbee_x
   0089 FE BC         [ 7]  166 	cp 	#200-12 		;; A == bottom_limit - frisbee_height?
   008B 28 04         [12]  167 	jr 	z, cant_move_down 		
   008D 3C            [ 4]  168 		inc 	a 		;; move down one pixel
   008E 32 02 00      [13]  169 		ld 	(frisbee_y), a
   0091                     170 	cant_move_down:
   0091 C9            [10]  171 	ret
                            172 
                            173 ;; ===========================================
                            174 ;; Mueve el frisbee a la izquierda un píxel
                            175 ;; Recibe:
                            176 ;; 	IX <= Pointer to entity data
                            177 ;; Modifica A
                            178 ;; ===========================================
   0092                     179 moveLeft:
   0092 DD 7E 00      [19]  180 	ld 	a, Ent_x_I(IX) 		;; A = frisbee_x
   0095 FE 00         [ 7]  181 	cp 	#0 			;; A == left_limit?
   0097 20 07         [12]  182 	jr 	nz, can_move_left 
   0099 3E 4E         [ 7]  183 		ld 	a, #80-2 	;; restore initial position
   009B DD 77 00      [19]  184 		ld 	Ent_x_I(IX), a
                            185 		;; ld 	a, #80
                            186 		;; ld 	(frisbee_y), a	
   009E 18 0C         [12]  187 		jr 	cant_move_left
   00A0                     188 	can_move_left:	
   00A0 DD 21 00 00   [14]  189 		ld	ix, #frisbee_data
   00A4 DD 36 0A FF   [19]  190 		ld 	Ent_ax_I(ix), #-1
   00A8 DD 36 0B 80   [19]  191 		ld 	Ent_ax_F(ix), #-128	;; Ent_ax <= FF(-1)80(-128) (-128)
                            192 
   00AC                     193 	cant_move_left:
   00AC C9            [10]  194 	ret
                            195 
                            196 ;; =========================================
                            197 ;; Mueve el frisbee arriba un píxel
                            198 ;; Modifica A
                            199 ;; =========================================
   00AD                     200 moveUp:
   00AD 3A 02 00      [13]  201 	ld 	a, (frisbee_y) 		;; A = frisbee_y
   00B0 FE 00         [ 7]  202 	cp 	#0 			;; A == top_limit?
   00B2 28 04         [12]  203 	jr 	z, cant_move_up 		
   00B4 3D            [ 4]  204 		dec 	a 		;; move up one pixel
   00B5 32 02 00      [13]  205 		ld 	(frisbee_y), a
   00B8                     206 	cant_move_up:
   00B8 C9            [10]  207 	ret
                            208 
                            209 ;; ================================================
                            210 ;; Pinta un cuadrado en pantalla del color elegido
                            211 ;; Entrada:
                            212 ;; 	A => Colour Pattern
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 9.
Hexadecimal [16-Bits]



                            213 ;; Modifica AF, BC, DE, HL
                            214 ;; ================================================
   00B9                     215 drawFrisbee:
   00B9 F5            [11]  216 	push 	af 
   00BA 11 00 C0      [10]  217 	ld 	de, #0xC000 		;; Video memory  pointer
   00BD 3A 00 00      [13]  218 	ld 	a, (frisbee_x) 
   00C0 4F            [ 4]  219 	ld 	c, a			;; C = frisbee_x
   00C1 3A 02 00      [13]  220 	ld 	a, (frisbee_y) 
   00C4 47            [ 4]  221 	ld 	b, a 			;; B = frisbee_y
   00C5 CD 00 00      [17]  222 	call cpct_getScreenPtr_asm 	;; HL = frisbee screen pointer
                            223 
   00C8 EB            [ 4]  224 	ex 	de, hl 			;; DE = frisbee screen pointer
   00C9 F1            [10]  225 	pop 	af 			;; A = User selected colour
   00CA 01 02 08      [10]  226 	ld 	bc, #0x0802		;; 8x8 píxeles
   00CD CD 00 00      [17]  227 	call cpct_drawSolidBox_asm
                            228 
   00D0 C9            [10]  229 	ret
