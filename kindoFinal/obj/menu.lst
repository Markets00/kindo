ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 1.
Hexadecimal [16-Bits]



                              1 .area _DATA
                              2 .area _CODE
                              3 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 2.
Hexadecimal [16-Bits]



                              4 .include "utility.h.s"
                              1 ;; ====================================
                              2 ;; ====================================
                              3 ;; INCLUDED CPCTELERA FUNCTIONS
                              4 ;; ====================================
                              5 ;; ====================================
                              6 .globl cpct_waitVSYNC_asm
                              7 .globl cpct_drawSolidBox_asm
                              8 .globl cpct_getScreenPtr_asm
                              9 .globl cpct_scanKeyboard_asm
                             10 .globl cpct_isKeyPressed_asm
                             11 .globl cpct_disableFirmware_asm
                             12 .globl cpct_setVideoMode_asm
                             13 .globl cpct_setPalette_asm
                             14 .globl cpct_memcpy_asm
                             15 .globl negateHL
                             16 .globl cpct_setVideoMemoryPage_asm
                             17 .globl cpct_akp_musicPlay_asm
                             18 .globl cpct_akp_stop_asm
                             19 .globl cpct_drawSprite_asm
                             20 .globl cpct_setInterruptHandler_asm
                             21 .globl cpct_setPALColour_asm
                             22 .globl cpct_drawStringM2_asm
                             23 .globl cpct_drawStringM1_f_asm
                             24 .globl cpct_akp_musicInit_asm
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 3.
Hexadecimal [16-Bits]



                              5 .include "game.h.s"
                              1 ;; ====================================
                              2 ;; ====================================
                              3 ;; GAME PUBLIC FUNCTIONS
                              4 ;; ====================================
                              5 ;; ====================================
                              6 .globl gameStart
                              7 .globl getVideoPtr
                              8 .globl incTeam1Points
                              9 .globl incTeam2Points
                             10 .globl player_data
                             11 .globl enemy_data
                             12 .globl player2_data
                             13 .globl enemy2_data
                             14 .globl game_data
                             15 .globl paletteM1
                             16 .globl paletteM2
                             17 ;;.globl paletteM0
                             18 .globl blackPaletteM1
                             19 
                             20 .globl game_type
                             21 .globl game_numPlayers
                             22 .globl game_WinCondition
                             23 
                             24 .globl game_maxScore
                             25 .globl game_t1Score
                             26 .globl game_t2Score
                             27 
                             28 .globl game_minute
                             29 .globl game_secLeft
                             30 .globl game_secRight
                             31 .globl game_maxTime
                             32 .globl game_map
                             33 
                             34 .globl game_musicOptions
                             35 .globl game_timeOptions
                             36 
                             37 .globl game_interrMusic
                             38 .globl game_interrTime
                             39 .globl game_musicPlayer
                             40 .globl game_musicEffects
                             41 
                             42 .globl game_enableMusic
                             43 
                             44 
                             45 ;; ====================================
                             46 ;; ====================================
                             47 ;; GAME PUBLIC DATA
                             48 ;; ====================================
                             49 ;; ====================================
                     0050    50 .equ RIGHT_LIMIT,	80
                     0000    51 .equ LEFT_LIMIT,	0
                     001E    52 .equ TOP_LIMIT,	 	30
                     00C8    53 .equ BOTTOM_LIMIT,	200
                     0028    54 .equ CENTER_LIMIT,	40
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 4.
Hexadecimal [16-Bits]



                              6 
                              7 ;; definici√≥n de las teclas que necesitaremos
                     0100     8   Key_CursorUp     = 0x0100
                     0101     9   Key_CursorLeft   = 0x0101
                     0400    10   Key_CursorDown   = 0x0400
                     0200    11   Key_CursorRight  = 0x0200
                     8005    12   Key_Space        = 0x8005
                     0402    13   Key_Return       = 0x0402
                             14 
                             15 ;; ====================================
                             16 ;; ====================================
                             17 ;; PRIVATE DATA
                             18 ;; ====================================
                             19 ;; ====================================
                             20 
                             21 ;; .equ mi_constante0, 0
                             22 ;; .equ mi_constante1, 1
   0000 4D 65 6E 75 00       23 menuString:				.asciz "Menu"
   0005 43 72 65 64 69 74    24 credString:				.asciz "Credits"
        73 00
   000D 50 6C 61 79 00       25 playString:				.asciz "Play"
   0012 50 6C 61 79 65 72    26 pvpString:				.asciz "Player vs Player"
        20 76 73 20 50 6C
        61 79 65 72 00
   0023 4F 70 74 69 6F 6E    27 optionsString:			.asciz "Options"
        73 00
   002B 43 72 65 64 69 74    28 creditsString:			.asciz "Credits"
        73 00
   0033 5E 0A 20 20 4D 6F    29 menuInstrucString:		.asciz "^\n  Move                    \r Select"
        76 65 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 0D 20
        53 65 6C 65 63 74
        00
   0058 5E 0A 20 20 4D 6F    30 menuOptInstrucString:	.asciz "^\n  Move     < > Select     \r Return"
        76 65 20 20 20 20
        20 3C 20 3E 20 53
        65 6C 65 63 74 20
        20 20 20 20 0D 20
        52 65 74 75 72 6E
        00
   007D 5E 20 20 20 20 20    31 CredotsInstrucString:	.asciz "^                            \r Return"
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20 0D
        20 52 65 74 75 72
        6E 00
                             32 
   00A3 3C 00                33 leftArrowCharacter: 	.asciz "<"
   00A5 3E 00                34 rightArrowCharacter:	.asciz ">"
   00A7 57 69 6E 20 43 6F    35 winCondString: 			.asciz "Win Condition"
        6E 64 69 74 69 6F
        6E 00
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 5.
Hexadecimal [16-Bits]



   00B5 54 69 6D 65 00       36 timeString: 			.asciz "Time"
   00BA 31 00                37 string_1:				.asciz "1"
   00BC 32 00                38 string_2:				.asciz "2"
   00BE 33 00                39 string_3:				.asciz "3"
                             40 
   00C0 53 63 6F 72 65 00    41 scoreString:			.asciz "Score"
   00C6 31 35 00             42 string_15:				.asciz "15"
   00C9 32 31 00             43 string_21:				.asciz "21"
   00CC 32 35 00             44 string_25:				.asciz "25"
   00CF 35 38 00             45 string_58:				.asciz "58"
                             46 
   00D2 4D 75 73 69 63 00    47 musicString:			.asciz "Music"
   00D8 4F 6E 00             48 onString:				.asciz "On"
   00DB 4F 66 66 00          49 offString:				.asciz "Off"
   00DF 00                   50 callingFromOpts: 		.db #0 ;; Are we calling from options?
                             51 
                             52 
                             53 ;; menuPos_X_sub 	-> For submenus, to the option menu
                             54 ;; menuPos_X 		-> Orignal position string (Strings on Menu, "<" on Options)
                             55 ;; menuPos_X_1 		-> String for options menu
                             56 ;; menuPos_X_2		-> ">" For Option menu
                             57 
                     C8F0    58 .equ txt_credits1, 0xC8F0
                     C990    59 .equ txt_credits3, 0xC990
                     C9E0    60 .equ txt_credits4, 0xC9E0
                     CA48    61 .equ txt_credits5, 0xCA48
                     CA80    62 .equ txt_credits6, 0xCA80
                     CAD0    63 .equ txt_credits7, 0xCAD0
                     CBC0    64 .equ txt_credits9, 0xCBC0
                     CC60    65 .equ txt_credits11, 0xCC60
                     CCB0    66 .equ txt_credits12, 0xCCB0
                     CDA0    67 .equ txt_credits14, 0xCDA0
                             68 
                     C000    69 .equ menuPos_1_sub, 0xC000
                     C850    70 .equ menuPos_1, 0xC850
                     C85B    71 .equ menuPos_1_1, 0xC85B
                     C870    72 .equ menuPos_1_2, 0xC870
                             73 
                     C0F0    74 .equ menuPos_2_sub, 0xC0F0
                     C940    75 .equ menuPos_2, 0xC940
                     C94B    76 .equ menuPos_2_1, 0xC94B
                     C960    77 .equ menuPos_2_2, 0xC960
                             78 
                     C1E0    79 .equ menuPos_3_sub, 0xC1E0
                     CA30    80 .equ menuPos_3, 0xCA30
                     CA3B    81 .equ menuPos_3_1, 0xCA3b
                     CA50    82 .equ menuPos_3_2, 0xCA50
                             83 
                     C2D0    84 .equ menuPos_4_sub, 0xC2D0
                     CB20    85 .equ menuPos_4, 0xCB20
                     CB2B    86 .equ menuPos_4_1, 0xCB2B
                     CB40    87 .equ menuPos_4_2, 0xCB40
                             88 
                     CC10    89 .equ menuPos_5, 0xCC10
                     CC1B    90 .equ menuPos_5_1, 0xCC1B
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 6.
Hexadecimal [16-Bits]



                     CC30    91 .equ menuPos_5_2, 0xCC30
                             92 
                     CD00    93 .equ menuPos_6, 0xCD00
                     CD0B    94 .equ menuPos_6_1, 0xCD0B
                     CD20    95 .equ menuPos_6_2, 0xCD20
                             96 
                     CDF0    97 .equ menuPos_7, 0xCDF0
                     CDFB    98 .equ menuPos_7_1, 0xCDFB
                     CE10    99 .equ menuPos_7_2, 0xCE10
                            100 
                     C88F   101 .equ cursorPosDef, 0xC88F
                            102 ;; .equ minCursorPos, 0xC88F	;; Saves the MIN position posible of the cursor.
                            103 ;; .equ maxCursorPos, 0xC97F	;; 2 ;; Saves the MIN position posible of the cursor.
                            104 ;;.equ maxCursorPos, 0xCA6F	;; 3 ;; Saves the MAX position posible of the cursor.
                            105 ;;.equ maxCursorPos, 0xCB5F	;; 4 ;; Saves the MAX position posible of the cursor.
                            106 
                     C6E0   107 .equ instrPos, 0xC6E0
                            108 
                            109 ;;_sprite_frisbeeMenu_0: .dw #34
   00E0 01                  110 nextSprite: .db #1
                            111 .globl _sprite_frisbeeMenu_0
                            112 .globl _sprite_frisbeeMenu_1 
                            113 
                     0002   114 cursor_W 	= 2
                     0008   115 cursor_H 	= 8
                     0004   116 max_index_value	= 4
                     00F0   117 addPosition	= 0xF0 			;; Sums to the next position (or substrct to the previous one)
                     FFFFFF10   118 subPosition	= #-240
   00E1 8F C8               119 cursorPos: 	.dw 0xC88F		;; Saves the cursor position
                            120 
                            121 ;; ====================================
                            122 ;; ====================================
                            123 ;; PUBLIC FUNCTIONS
                            124 ;; ====================================
                            125 ;; ====================================
   00E3                     126 menuStart::
                            127 
   00E3 2E 10         [ 7]  128 	ld l, #16					;; Select the border colour
   00E5 26 54         [ 7]  129 	ld h, #0x54					;; Set the Black Colour
   00E7 CD 00 00      [17]  130 	call cpct_setPALColour_asm
                            131 
   00EA CD 6C 05      [17]  132 	call cleanScreen		;;
   00ED CD 7A 05      [17]  133 	call initializeMenu 	;; 
                            134 
   00F0 3A 00 00      [13]  135  	ld	a, (game_type)			;; Initialize A to 0 as starting index for main menu
   00F3 CD FA 00      [17]  136 	call menu_loop 			;; Checks the state
   00F6 CD 64 02      [17]  137 	call setGameVariables	;; Sets the game variables.
   00F9 C9            [10]  138 	ret
                            139 
                            140 ;;
                            141 ;;
                            142 ;;
   00FA                     143 menu_loop::
                            144 
                            145 	;; Check 0.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 7.
Hexadecimal [16-Bits]



   00FA CD F7 03      [17]  146 	call 	checkSelection
                            147 	;; We have on A the option selected
   00FD FE 00         [ 7]  148 	cp #0 					;; a - 0
   00FF 20 06         [12]  149 	jr nz, menuStart_check1	;; if (a - 0) != 0
                            150 		;; else, a == 0 ;; Go Configure Match
   0101 3E 00         [ 7]  151 		ld a, #0
   0103 32 00 00      [13]  152 		ld (game_type), a
   0106 C9            [10]  153 		ret
                            154 
                            155 	;; Check 1: PvP
   0107                     156 	menuStart_check1:
   0107 FE 01         [ 7]  157 		cp #1					;; a - 1
   0109 20 06         [12]  158 		jr nz, menuStart_check2
   010B 3E 01         [ 7]  159 			ld a, #1
   010D 32 00 00      [13]  160 			ld (game_type), a
   0110 C9            [10]  161 			ret
                            162 
                            163 	;; Check 2: Options
   0111                     164 	menuStart_check2:
   0111 FE 02         [ 7]  165 	cp #2
   0113 20 12         [12]  166 	jr nz, menuStart_check3	;; if (a - 1) != 0
                            167 			;; else, a == 1 ;; Go options
   0115 F5            [11]  168 			push af
   0116 2A E1 00      [16]  169 			ld 	hl, (cursorPos)
   0119 E5            [11]  170 			push hl
   011A CD 3A 01      [17]  171 			call menuOptionsStart
   011D E1            [10]  172 			pop hl
   011E 22 E1 00      [16]  173 			ld (cursorPos), hl
   0121 CD 7A 05      [17]  174 			call initializeMenu
   0124 F1            [10]  175 			pop af
                            176 
   0125 18 D3         [12]  177 			jr menu_loop
                            178 	
                            179 	;; Check 3
   0127                     180 	menuStart_check3:
   0127 F5            [11]  181 		push af
   0128 2A E1 00      [16]  182 		ld 	hl, (cursorPos)
   012B E5            [11]  183 		push hl
   012C CD 80 06      [17]  184 		call printCredits
   012F E1            [10]  185 		pop hl
   0130 22 E1 00      [16]  186 		ld (cursorPos), hl
   0133 CD 7A 05      [17]  187 		call initializeMenu
   0136 F1            [10]  188 		pop af
   0137 18 C1         [12]  189 		jr menu_loop
                            190 
   0139 C9            [10]  191 	ret
                            192 
                            193 ;;
                            194 ;;
                            195 ;;
   013A                     196 menuOptionsStart::
   013A 21 8F C8      [10]  197 	ld hl, #cursorPosDef
   013D 22 E1 00      [16]  198 	ld (cursorPos), hl
   0140 CD C6 04      [17]  199 	call initializeOptionsMenu
                            200 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 8.
Hexadecimal [16-Bits]



   0143 3E 00         [ 7]  201 	ld a, #0
                            202 	;; Menu Options Loop
   0145 CD F7 03      [17]  203 	call checkSelection		;; Check Until hit enter.
                            204 
   0148 C9            [10]  205 	ret
                            206 
                            207 ;; ====================================
                            208 ;; Erase the draw on options
                            209 ;; HL <- what to print
                            210 ;; DE <- Where to print
                            211 ;; Modifies: BC
                            212 ;; ====================================
   0149                     213 eraseOptionsRefactor::
   0149 0E 03         [ 7]  214 	ld c, #3
   014B 06 03         [ 7]  215 	ld b, #3
   014D CD 00 00      [17]  216 	call cpct_drawStringM1_f_asm
                            217 
   0150 C9            [10]  218 	ret
                            219 
                            220 ;; ====================================
                            221 ;; Refactors the draw on options
                            222 ;; HL <- what to print
                            223 ;; DE <- Where to print
                            224 ;; Modifies: BC
                            225 ;; ====================================
   0151                     226 drawOptionsRefactor::
   0151 0E 02         [ 7]  227 	ld c, #2
   0153 06 03         [ 7]  228 	ld b, #3
   0155 CD 00 00      [17]  229 	call cpct_drawStringM1_f_asm
                            230 
   0158 C9            [10]  231 	ret
                            232 
                            233 ;; ====================================
                            234 ;; Gets the win condition string
                            235 ;; Modifies: A, HL, DE, BC
                            236 ;; ====================================
   0159                     237 getWinCondition::
   0159 3A 82 02      [13]  238 	ld a, (winIndex) 	;; a <- Win condition ; 0 -> Time, 1 -> Score
   015C FE 00         [ 7]  239 	cp #0						;; 
   015E 20 04         [12]  240 	jr nz, itsTime 				;; a != 0, then go time
   0160 21 C0 00      [10]  241 		ld hl, #scoreString		;; Charge score sprite
   0163 C9            [10]  242 		ret		;; Jump to draw
                            243 
   0164                     244 	itsTime:
   0164 21 B5 00      [10]  245 		ld hl, #timeString		;; Charge time sprite
                            246 
   0167 C9            [10]  247 	ret
                            248 
                            249 ;; ====================================
                            250 ;; Erases the win condition string
                            251 ;; Modifies: A, HL, DE, BC
                            252 ;; ====================================
   0168                     253 eraseWinCondition::
   0168 CD 59 01      [17]  254 	call getWinCondition
   016B 11 5B C8      [10]  255 	ld de, #menuPos_1_1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 9.
Hexadecimal [16-Bits]



   016E CD 49 01      [17]  256 	call eraseOptionsRefactor
                            257 
   0171 C9            [10]  258 	ret
                            259 
                            260 ;; ====================================
                            261 ;; Prints the win condition string
                            262 ;; Modifies: A, HL, DE, BC
                            263 ;; ====================================
   0172                     264 printWinCondition::
                            265 	;; Prints win condition options
   0172 CD 59 01      [17]  266 	call getWinCondition
   0175 11 5B C8      [10]  267 	ld de, #menuPos_1_1
   0178 CD 51 01      [17]  268 	call drawOptionsRefactor
                            269 
   017B C9            [10]  270 	ret
                            271 
                            272 ;; ====================================
                            273 ;; Gets the time string
                            274 ;; Modifies: A, HL, DE, BC
                            275 ;; ====================================
   017C                     276 getTimeOptions::
   017C 3A 0E 03      [13]  277 	ld a, (timIndex)		;; a <- game_minute
   017F FE 00         [ 7]  278 	cp #0					;;
   0181 20 04         [12]  279 	jr nz, itsTwoMinutes	;; a != 1, then go two minutes
   0183 21 BA 00      [10]  280 		ld hl, #string_1 	;; Charge the 1 string
   0186 C9            [10]  281 		ret	;; Jump to draw
                            282 
   0187                     283 	itsTwoMinutes:
   0187 FE 01         [ 7]  284 		cp #1					;;
   0189 20 04         [12]  285 		jr nz, itsThreeMinutes	;; a != 2, then go two minutes
   018B 21 BC 00      [10]  286 			ld hl, #string_2 	;; Charge the 2 string
   018E C9            [10]  287 			ret	;; Jump to draw
                            288 
   018F                     289 	itsThreeMinutes:
   018F 21 BE 00      [10]  290 		ld hl, #string_3 	;; Charge the 3 string
   0192 C9            [10]  291 	ret
                            292 
                            293 ;; ====================================
                            294 ;; Erases the win condition string
                            295 ;; Modifies: A, HL, DE, BC
                            296 ;; ====================================
   0193                     297 eraseTimeOptions::
   0193 CD 7C 01      [17]  298 	call getTimeOptions
   0196 11 4B C9      [10]  299 	ld de, #menuPos_2_1
   0199 CD 49 01      [17]  300 	call eraseOptionsRefactor
                            301 
   019C C9            [10]  302 	ret
                            303 
                            304 ;; ====================================
                            305 ;; Prints the time string
                            306 ;; Modifies: A, HL, DE, BC
                            307 ;; ====================================
   019D                     308 printTimeOptions::
                            309 	;; Print time options
   019D CD 7C 01      [17]  310 	call getTimeOptions
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 10.
Hexadecimal [16-Bits]



   01A0 11 4B C9      [10]  311 	ld de, #menuPos_2_1
   01A3 CD 51 01      [17]  312 	call drawOptionsRefactor
   01A6 C9            [10]  313 	ret
                            314 
                            315 ;; ====================================
                            316 ;; Gets the score string
                            317 ;; Modifies: A, HL, DE, BC
                            318 ;; ====================================
   01A7                     319 getScoreOptions::
   01A7 3A C8 02      [13]  320 	ld a, (scoIndex)		;; a <- game_maxScore
   01AA FE 00         [ 7]  321 	cp #0						;;
   01AC 20 04         [12]  322 	jr nz, itsTwentyOneGoals	;; a != 11, then go two minutes
   01AE 21 C6 00      [10]  323 		ld hl, #string_15 		;; Charge the 1 string
   01B1 C9            [10]  324 		ret						;; Jump to draw
                            325 
   01B2                     326 	itsTwentyOneGoals:
   01B2 FE 01         [ 7]  327 		cp #1						;;
   01B4 20 04         [12]  328 		jr nz, itsTwentyFiveGoals	;; a != 11, then go two minutes
   01B6 21 C9 00      [10]  329 			ld hl, #string_21 		;; Charge the 1 string
   01B9 C9            [10]  330 			ret						;; Jump to draw
                            331 
   01BA                     332 	itsTwentyFiveGoals:
   01BA FE 02         [ 7]  333 		cp #2						;;
   01BC 20 04         [12]  334 		jr nz, itsFiftyEightGoals	;; a != 11, then go two minutes
   01BE 21 CC 00      [10]  335 			ld hl, #string_25 		;; Charge the 1 string
   01C1 C9            [10]  336 			ret						;; Jump to draw
                            337 
   01C2                     338 	itsFiftyEightGoals:
   01C2 21 CF 00      [10]  339 			ld hl, #string_58 	;; Charge the 1 string
                            340 
   01C5 C9            [10]  341 	ret
                            342 
                            343 ;; ====================================
                            344 ;; Erases the win condition string
                            345 ;; Modifies: A, HL, DE, BC
                            346 ;; ====================================
   01C6                     347 eraseScoreOptions::
   01C6 CD A7 01      [17]  348 	call getScoreOptions
   01C9 11 3B CA      [10]  349 	ld de, #menuPos_3_1
   01CC CD 49 01      [17]  350 	call eraseOptionsRefactor
                            351 
   01CF C9            [10]  352 	ret
                            353 
                            354 ;; ====================================
                            355 ;; Prints the score string
                            356 ;; Modifies: A, HL, DE, BC
                            357 ;; ====================================
   01D0                     358 printScoreOptions::
                            359 	;; Print time options
   01D0 CD A7 01      [17]  360 	call getScoreOptions
   01D3 11 3B CA      [10]  361 	ld de, #menuPos_3_1
   01D6 CD 51 01      [17]  362 	call drawOptionsRefactor
   01D9 C9            [10]  363 	ret
                            364 
                            365 ;; ====================================
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 11.
Hexadecimal [16-Bits]



                            366 ;; Gets the music string
                            367 ;; Modifies: A, HL, DE, BC
                            368 ;; ====================================
   01DA                     369 getMusicOption::
   01DA 3A 54 03      [13]  370 	ld a, (musIndex) 	;;  a <- game_enableMusic
   01DD FE 00         [ 7]  371 	cp #0						;;
   01DF 28 04         [12]  372 	jr z, itsMusicOff
   01E1 21 D8 00      [10]  373 		ld hl, #onString
   01E4 C9            [10]  374 		ret
                            375 
   01E5                     376 	itsMusicOff:
   01E5 21 DB 00      [10]  377 		ld hl, #offString
                            378 
   01E8 C9            [10]  379 	ret
                            380 
                            381 ;; ====================================
                            382 ;; Erases the win condition string
                            383 ;; Modifies: A, HL, DE, BC
                            384 ;; ====================================
   01E9                     385 eraseMusicOptions::
   01E9 CD DA 01      [17]  386 	call getMusicOption
   01EC 11 2B CB      [10]  387 	ld de, #menuPos_4_1
   01EF CD 49 01      [17]  388 	call eraseOptionsRefactor
                            389 
   01F2 C9            [10]  390 	ret
                            391 
                            392 ;; ====================================
                            393 ;; Prints the music string
                            394 ;; Modifies: A, HL, DE, BC
                            395 ;; ====================================
   01F3                     396 printMusicOptions::
   01F3 CD DA 01      [17]  397 	call getMusicOption
   01F6 11 2B CB      [10]  398 	ld de, #menuPos_4_1
   01F9 CD 51 01      [17]  399 	call drawOptionsRefactor
                            400 
   01FC C9            [10]  401 	ret
                            402 
                            403 ;; ====================================
                            404 ;; Checks the options strings
                            405 ;; Modifies: A, HL, DE, BC
                            406 ;; ====================================
   01FD                     407 printOptions::
                            408 
   01FD CD 72 01      [17]  409 	call printWinCondition
   0200 CD 9D 01      [17]  410 	call printTimeOptions
   0203 CD D0 01      [17]  411 	call printScoreOptions
   0206 CD F3 01      [17]  412 	call printMusicOptions
                            413 
   0209 C9            [10]  414 	ret
                            415 
                            416 ;;
                            417 ;;
                            418 ;;
   020A                     419 setWinCondition::
   020A 3A 82 02      [13]  420 	ld a, (winIndex) ;; Charge the Win Index
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 12.
Hexadecimal [16-Bits]



   020D FE 00         [ 7]  421 	cp #0
   020F 20 04         [12]  422 	jr nz, winIndNotZero
                            423 		;; Its a Zero!
   0211 3E 01         [ 7]  424 		ld a, #1
   0213 18 02         [12]  425 		jr chargeWinCond
                            426 
   0215                     427 	winIndNotZero:
   0215 3E 00         [ 7]  428 		ld a, #0
                            429 
   0217                     430 	chargeWinCond:
   0217 32 00 00      [13]  431 		ld (game_WinCondition), a
                            432 
   021A C9            [10]  433 	ret
                            434 
                            435 ;;
                            436 ;;
                            437 ;;
   021B                     438 setTimeOptions::
   021B 3A 0E 03      [13]  439 	ld a, (timIndex) ;; Charge the Win Index
   021E FE 00         [ 7]  440 	cp #0
   0220 20 04         [12]  441 	jr nz, timIndNotZero
                            442 		;; Its a Zero!
   0222 3E 01         [ 7]  443 		ld a, #1
   0224 18 0A         [12]  444 		jr chargeTimeOpt
                            445 
   0226                     446 	timIndNotZero:
   0226 FE 01         [ 7]  447 	cp #1
   0228 20 04         [12]  448 	jr nz, timIndNotOne
                            449 		;; Its a One!
   022A 3E 02         [ 7]  450 		ld a, #2
   022C 18 02         [12]  451 		jr chargeTimeOpt
                            452 
   022E                     453 	timIndNotOne:
   022E 3E 03         [ 7]  454 		ld a, #3
                            455 
   0230                     456 	chargeTimeOpt:
   0230 32 00 00      [13]  457 		ld (game_minute), a
                            458 		
   0233 C9            [10]  459 	ret
                            460 
                            461 ;;
                            462 ;;
                            463 ;;
   0234                     464 setScoreOptions::
   0234 3A C8 02      [13]  465 	ld a, (scoIndex) ;; Charge the Win Index
   0237 FE 00         [ 7]  466 	cp #0
   0239 20 04         [12]  467 	jr nz, scoIndNotZero
                            468 		;; Its a Zero!
   023B 3E 0F         [ 7]  469 		ld a, #15
   023D 18 10         [12]  470 		jr chargeScoreOpt
                            471 
   023F                     472 	scoIndNotZero:
   023F FE 01         [ 7]  473 	cp #1
   0241 20 04         [12]  474 	jr nz, scoIndNotOne
                            475 		;; Its a One!
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 13.
Hexadecimal [16-Bits]



   0243 3E 15         [ 7]  476 		ld a, #21
   0245 18 08         [12]  477 		jr chargeScoreOpt
                            478 
   0247                     479 	scoIndNotOne:
   0247 FE 02         [ 7]  480 		cp #2
   0249 20 02         [12]  481 		jr nz, scoIndNotTwo
   024B 3E 19         [ 7]  482 		ld a, #25
                            483 
   024D                     484 	scoIndNotTwo:
   024D 3E 3A         [ 7]  485 		ld a, #58
                            486 
   024F                     487 	chargeScoreOpt:
   024F 32 00 00      [13]  488 		ld (game_maxScore), a
                            489 		
   0252 C9            [10]  490 	ret
                            491 
                            492 ;;
                            493 ;;
                            494 ;;
   0253                     495 setMusicOptions::
   0253 3A 54 03      [13]  496 	ld a, (musIndex) ;; Charge the Win Index
   0256 FE 00         [ 7]  497 	cp #0
   0258 20 04         [12]  498 	jr nz, musIndNotZero
                            499 		;; Its a Zero!
   025A 3E 00         [ 7]  500 		ld a, #0
   025C 18 02         [12]  501 		jr chargeMusicOpts
                            502 
   025E                     503 	musIndNotZero:
   025E 3E 01         [ 7]  504 		ld a, #1
                            505 
   0260                     506 	chargeMusicOpts:
   0260 32 00 00      [13]  507 		ld (game_enableMusic), a
                            508 
   0263 C9            [10]  509 	ret
                            510 
                            511 ;;
                            512 ;;
                            513 ;;
   0264                     514 setGameVariables::
   0264 CD 0A 02      [17]  515 	call setWinCondition
   0267 CD 1B 02      [17]  516 	call setTimeOptions
   026A CD 34 02      [17]  517 	call setScoreOptions
   026D CD 53 02      [17]  518 	call setMusicOptions
                            519 
   0270 C9            [10]  520 	ret
                            521 
                            522 ;;
                            523 ;;
                            524 ;;
   0271                     525 getMaxIterator::
   0271 F1            [10]  526 	pop af 		;; Get the iterator on A.
                            527 
   0272 FE 00         [ 7]  528 	cp #0
   0274 20 00         [12]  529 	jr nz, not_WinCondition
                            530 		;; Win Condition
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 14.
Hexadecimal [16-Bits]



   0276                     531 	not_WinCondition:
   0276 FE 01         [ 7]  532 		cp #1
   0278 20 00         [12]  533 		jr nz, not_Time
                            534 			;; Time
                            535 
   027A                     536 	not_Time:
   027A FE 02         [ 7]  537 		cp #2
   027C 20 00         [12]  538 		jr nz, not_Score
                            539 			;; Score
                            540 
   027E                     541 	not_Score:
                            542 		;; Music
                            543 
   027E C9            [10]  544 	ret
                            545 
                            546 ;; Max iterators
   027F 02                  547 maxOn2:		.db #2
   0280 03                  548 maxOn3:		.db #3
   0281 04                  549 maxOn4:		.db #4
                            550 
                            551 
                            552 ;; =======================================
                            553 ;; Win Condition Movements
                            554 ;; =======================================
   0282 01                  555 winIndex:	.db #1
                            556 
   0283                     557 moveLeftWinCond::
   0283 F5            [11]  558 	push af  				;; Save the Index on the stack
   0284 CD 68 01      [17]  559 	call eraseWinCondition	;; Erase the actual string
                            560 
                            561 	;; Move
   0287 3A 82 02      [13]  562 	ld a, (winIndex)
   028A 3D            [ 4]  563 	dec a
   028B FE FF         [ 7]  564 	cp #-1
   028D 28 05         [12]  565 	jr z, maxWinCond_left
                            566 		;; We can move to the left
   028F 32 82 02      [13]  567 		ld (winIndex), a
   0292 18 07         [12]  568 		jr printWinCond_left
                            569 
   0294                     570 	maxWinCond_left:
   0294 3A 7F 02      [13]  571 		ld a, (maxOn2)
   0297 3D            [ 4]  572 		dec a
   0298 32 82 02      [13]  573 		ld (winIndex), a
                            574 
                            575 	;; Print the new string
   029B                     576 	printWinCond_left:
   029B CD 72 01      [17]  577 		call printWinCondition
                            578 
   029E 3E 0C         [ 7]  579 		ld a, #12
   02A0 CD 9B 04      [17]  580 		call wait_X_halts
                            581 
   02A3 F1            [10]  582 	pop af  				;; Get the Index from the stack
   02A4 C9            [10]  583 	ret
                            584 
   02A5                     585 moveRightWinCond::
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 15.
Hexadecimal [16-Bits]



   02A5 F5            [11]  586 	push af  				;; Save the Index on the stack
   02A6 CD 68 01      [17]  587 	call eraseWinCondition	;; Erase the actual string
                            588 
   02A9 3A 7F 02      [13]  589 	ld a, (maxOn2)
   02AC 47            [ 4]  590 	ld b, a
   02AD 3A 82 02      [13]  591 	ld a, (winIndex)
   02B0 3C            [ 4]  592 	inc a
   02B1 B8            [ 4]  593 	cp b
   02B2 28 05         [12]  594 	jr z, minWinCond_right
                            595 		;; We can move to the right
   02B4 32 82 02      [13]  596 		ld (winIndex), a
   02B7 18 05         [12]  597 		jr printWinCond_right
                            598 
   02B9                     599 	minWinCond_right:
   02B9 3E 00         [ 7]  600 		ld a, #0
   02BB 32 82 02      [13]  601 		ld (winIndex), a
                            602 
   02BE                     603 	printWinCond_right:
   02BE CD 72 01      [17]  604 		call printWinCondition
                            605 
   02C1 3E 0C         [ 7]  606 		ld a, #12
   02C3 CD 9B 04      [17]  607 		call wait_X_halts
                            608 
   02C6 F1            [10]  609 	pop af  				;; Save the Index on the stack
   02C7 C9            [10]  610 	ret
                            611 
                            612 ;; =======================================
                            613 ;; Score Movements
                            614 ;; =======================================
   02C8 01                  615 scoIndex:	.db #1
                            616 
   02C9                     617 moveLeftScore::
   02C9 F5            [11]  618 	push af  				;; Save the Index on the stack
   02CA CD C6 01      [17]  619 	call eraseScoreOptions	;; Erase the actual string
                            620 
                            621 	;; Move
   02CD 3A C8 02      [13]  622 	ld a, (scoIndex)
   02D0 3D            [ 4]  623 	dec a
   02D1 FE FF         [ 7]  624 	cp #-1
   02D3 28 05         [12]  625 	jr z, maxScoOpt_left
                            626 		;; We can move to the left
   02D5 32 C8 02      [13]  627 		ld (scoIndex), a
   02D8 18 07         [12]  628 		jr printScoOpt_left
                            629 
   02DA                     630 	maxScoOpt_left:
   02DA 3A 81 02      [13]  631 		ld a, (maxOn4)
   02DD 3D            [ 4]  632 		dec a
   02DE 32 C8 02      [13]  633 		ld (scoIndex), a
                            634 
                            635 	;; Print the new string
   02E1                     636 	printScoOpt_left:
   02E1 CD D0 01      [17]  637 		call printScoreOptions
                            638 
   02E4 3E 0C         [ 7]  639 		ld a, #12
   02E6 CD 9B 04      [17]  640 		call wait_X_halts
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 16.
Hexadecimal [16-Bits]



                            641 		
   02E9 F1            [10]  642 	pop af  				;; Save the Index on the stack
                            643 
   02EA C9            [10]  644 	ret
                            645 
   02EB                     646 moveRightScore::
   02EB F5            [11]  647 	push af  				;; Save the Index on the stack
   02EC CD C6 01      [17]  648 	call eraseScoreOptions	;; Erase the actual string
                            649 
   02EF 3A 81 02      [13]  650 	ld a, (maxOn4)
   02F2 47            [ 4]  651 	ld b, a
   02F3 3A C8 02      [13]  652 	ld a, (scoIndex)
   02F6 3C            [ 4]  653 	inc a
   02F7 B8            [ 4]  654 	cp b
   02F8 28 05         [12]  655 	jr z, minScoreOptions_right
                            656 		;; We can move to the right
   02FA 32 C8 02      [13]  657 		ld (scoIndex), a
   02FD 18 05         [12]  658 		jr prinScoreOptions_right
                            659 
   02FF                     660 	minScoreOptions_right:
   02FF 3E 00         [ 7]  661 		ld a, #0
   0301 32 C8 02      [13]  662 		ld (scoIndex), a
                            663 
   0304                     664 	prinScoreOptions_right:
   0304 CD D0 01      [17]  665 		call printScoreOptions
                            666 
   0307 3E 0C         [ 7]  667 		ld a, #12
   0309 CD 9B 04      [17]  668 		call wait_X_halts
                            669 
   030C F1            [10]  670 	pop af  				;; Save the Index on the stack
                            671 
   030D C9            [10]  672 	ret
                            673 
                            674 ;; =======================================
                            675 ;; Time Movements
                            676 ;; =======================================
   030E 01                  677 timIndex:	.db #1
                            678 
   030F                     679 moveLeftTime::
   030F F5            [11]  680 	push af  				;; Save the Index on the stack
   0310 CD 93 01      [17]  681 	call eraseTimeOptions	;; Erase the actual string
                            682 
                            683 	;; Move
   0313 3A 0E 03      [13]  684 	ld a, (timIndex)
   0316 3D            [ 4]  685 	dec a
   0317 FE FF         [ 7]  686 	cp #-1
   0319 28 05         [12]  687 	jr z, maxTimeOpt_left
                            688 		;; We can move to the left
   031B 32 0E 03      [13]  689 		ld (timIndex), a
   031E 18 07         [12]  690 		jr printTimeOpt_left
                            691 
   0320                     692 	maxTimeOpt_left:
   0320 3A 80 02      [13]  693 		ld a, (maxOn3)
   0323 3D            [ 4]  694 		dec a
   0324 32 0E 03      [13]  695 		ld (timIndex), a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 17.
Hexadecimal [16-Bits]



                            696 
                            697 	;; Print the new string
   0327                     698 	printTimeOpt_left:
   0327 CD 9D 01      [17]  699 		call printTimeOptions
                            700 
   032A 3E 0C         [ 7]  701 		ld a, #12
   032C CD 9B 04      [17]  702 		call wait_X_halts
                            703 		
   032F F1            [10]  704 	pop af  				;; Save the Index on the stack
                            705 
   0330 C9            [10]  706 	ret
                            707 
   0331                     708 moveRightTime::
   0331 F5            [11]  709 	push af  				;; Save the Index on the stack
   0332 CD 93 01      [17]  710 	call eraseTimeOptions	;; Erase the actual string
                            711 
   0335 3A 80 02      [13]  712 	ld a, (maxOn3)
   0338 47            [ 4]  713 	ld b, a
   0339 3A 0E 03      [13]  714 	ld a, (timIndex)
   033C 3C            [ 4]  715 	inc a
   033D B8            [ 4]  716 	cp b
   033E 28 05         [12]  717 	jr z, minTimeOptions_right
                            718 		;; We can move to the right
   0340 32 0E 03      [13]  719 		ld (timIndex), a
   0343 18 05         [12]  720 		jr prinTimeOptions_right
                            721 
   0345                     722 	minTimeOptions_right:
   0345 3E 00         [ 7]  723 		ld a, #0
   0347 32 0E 03      [13]  724 		ld (timIndex), a
                            725 
   034A                     726 	prinTimeOptions_right:
   034A CD 9D 01      [17]  727 		call printTimeOptions
                            728 
   034D 3E 0C         [ 7]  729 		ld a, #12
   034F CD 9B 04      [17]  730 		call wait_X_halts
                            731 
   0352 F1            [10]  732 	pop af  				;; Save the Index on the stack
                            733 	
   0353 C9            [10]  734 	ret
                            735 
                            736 ;; =======================================
                            737 ;; Music Movements
                            738 ;; =======================================
   0354 01                  739 musIndex:	.db #1
                            740 
   0355                     741 moveLeftMusic::
   0355 F5            [11]  742 	push af  				;; Save the Index on the stack
   0356 CD E9 01      [17]  743 	call eraseMusicOptions	;; Erase the actual string
                            744 
                            745 	;; Move
   0359 3A 54 03      [13]  746 	ld a, (musIndex)
   035C 3D            [ 4]  747 	dec a
   035D FE FF         [ 7]  748 	cp #-1
   035F 28 05         [12]  749 	jr z, maxMusicOpt_left
                            750 		;; We can move to the left
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 18.
Hexadecimal [16-Bits]



   0361 32 54 03      [13]  751 		ld (musIndex), a
   0364 18 07         [12]  752 		jr printMusicOpt_left
                            753 
   0366                     754 	maxMusicOpt_left:
   0366 3A 7F 02      [13]  755 		ld a, (maxOn2)
   0369 3D            [ 4]  756 		dec a
   036A 32 54 03      [13]  757 		ld (musIndex), a
                            758 
                            759 	;; Print the new string
   036D                     760 	printMusicOpt_left:
   036D CD F3 01      [17]  761 		call printMusicOptions
                            762 
   0370 3E 0C         [ 7]  763 		ld a, #12
   0372 CD 9B 04      [17]  764 		call wait_X_halts
                            765 		
   0375 F1            [10]  766 	pop af  				;; Save the Index on the stack
                            767 
   0376 C9            [10]  768 	ret
                            769 
   0377                     770 moveRightMusic::
   0377 F5            [11]  771 	push af  				;; Save the Index on the stack
   0378 CD E9 01      [17]  772 	call eraseMusicOptions	;; Erase the actual string
                            773 
   037B 3A 7F 02      [13]  774 	ld a, (maxOn2)
   037E 47            [ 4]  775 	ld b, a
   037F 3A 54 03      [13]  776 	ld a, (musIndex)
   0382 3C            [ 4]  777 	inc a
   0383 B8            [ 4]  778 	cp b
   0384 28 05         [12]  779 	jr z, minMusicOptions_right
                            780 		;; We can move to the right
   0386 32 54 03      [13]  781 		ld (musIndex), a
   0389 18 05         [12]  782 		jr prinMusicOptions_right
                            783 
   038B                     784 	minMusicOptions_right:
   038B 3E 00         [ 7]  785 		ld a, #0
   038D 32 54 03      [13]  786 		ld (musIndex), a
                            787 
   0390                     788 	prinMusicOptions_right:
   0390 CD F3 01      [17]  789 		call printMusicOptions
                            790 
   0393 3E 0C         [ 7]  791 		ld a, #12
   0395 CD 9B 04      [17]  792 		call wait_X_halts
                            793 
   0398 F1            [10]  794 	pop af  				;; Save the Index on the stack
                            795 
   0399 C9            [10]  796 	ret
                            797 
                            798 ;; =======================================
                            799 ;; Check Lateral Moves
                            800 ;; =======================================
   039A                     801 checkLateral::
                            802 
   039A F5            [11]  803 	push af 				;; Stack <- A (Index)
                            804 
   039B 21 01 01      [10]  805 	ld 	hl, #Key_CursorLeft
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 19.
Hexadecimal [16-Bits]



   039E CD 00 00      [17]  806 	call cpct_isKeyPressed_asm	;; A <= True/False
   03A1 FE 00         [ 7]  807 	cp 	#0 
   03A3 28 23         [12]  808 	jr 	z, left_not_pressed			;; Is left key pressed?
                            809 		;; left pressed
   03A5 F1            [10]  810 		pop 	af 			;; A <- Index (Stack)
   03A6 FE 00         [ 7]  811 		cp #0
   03A8 20 06         [12]  812 		jr nz, not_WinCondition_left
                            813 			;; Call Win Condition left
   03AA CD 83 02      [17]  814 			call moveLeftWinCond
   03AD F5            [11]  815 			push	af
   03AE 18 18         [12]  816 			jr left_not_pressed
                            817 
   03B0                     818 		not_WinCondition_left:
   03B0 FE 01         [ 7]  819 			cp #1
   03B2 20 06         [12]  820 			jr nz, not_Time_left
                            821 				;; Time
   03B4 CD 0F 03      [17]  822 				call moveLeftTime
   03B7 F5            [11]  823 				push	af
   03B8 18 0E         [12]  824 				jr left_not_pressed
                            825 
   03BA                     826 		not_Time_left:
   03BA FE 02         [ 7]  827 			cp #2
   03BC 20 06         [12]  828 			jr nz, not_Score_left
                            829 				;; Score
   03BE CD C9 02      [17]  830 				call moveLeftScore
   03C1 F5            [11]  831 				push	af
   03C2 18 04         [12]  832 				jr left_not_pressed
                            833 
   03C4                     834 		not_Score_left:
                            835 			;; Music
   03C4 CD 55 03      [17]  836 			call moveLeftMusic
   03C7 F5            [11]  837 			push	af
                            838 
   03C8                     839 	left_not_pressed:
   03C8 21 00 02      [10]  840 		ld 	hl, #Key_CursorRight
   03CB CD 00 00      [17]  841 		call 	cpct_isKeyPressed_asm	;; A <= True/False
   03CE FE 00         [ 7]  842 		cp 	#0 
   03D0 28 23         [12]  843 		jr 	z, right_not_pressed			;; Is left key pressed?
                            844 			;; right pressed
   03D2 F1            [10]  845 			pop 	af
   03D3 FE 00         [ 7]  846 			cp #0
   03D5 20 06         [12]  847 			jr nz, not_WinCondition_right
                            848 				;; Call Win Condition left
   03D7 CD A5 02      [17]  849 				call moveRightWinCond
   03DA F5            [11]  850 				push	af
   03DB 18 18         [12]  851 				jr right_not_pressed
                            852 
   03DD                     853 			not_WinCondition_right:
   03DD FE 01         [ 7]  854 				cp #1
   03DF 20 06         [12]  855 				jr nz, not_Time_right
                            856 					;; Time
   03E1 CD 31 03      [17]  857 					call moveRightTime
   03E4 F5            [11]  858 					push	af
   03E5 18 0E         [12]  859 					jr right_not_pressed
                            860 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 20.
Hexadecimal [16-Bits]



   03E7                     861 			not_Time_right:
   03E7 FE 02         [ 7]  862 				cp #2
   03E9 20 06         [12]  863 				jr nz, not_Score_right
                            864 					;; Score
   03EB CD EB 02      [17]  865 					call moveRightScore
   03EE F5            [11]  866 					push	af
   03EF 18 04         [12]  867 					jr right_not_pressed
                            868 
   03F1                     869 			not_Score_right:
                            870 				;; Music
   03F1 CD 77 03      [17]  871 				call moveRightMusic
   03F4 F5            [11]  872 				push	af
                            873 
   03F5                     874 	right_not_pressed:
   03F5 F1            [10]  875 		pop af
   03F6 C9            [10]  876 	ret
                            877 
                            878 ;; =======================================
                            879 ;; Mueve el √≠ndice a la posici√≥n indicada
                            880 ;; Entrada A <- Index Actual
                            881 ;; Modifica: AF, BC, DE, HL
                            882 ;; Devuelve:
                            883 ;;	A -> Selected index [0 - 6]
                            884 ;; =======================================
   03F7                     885 checkSelection::
   03F7 F5            [11]  886 		push 	af ;; Saves on the stack the index (A).
                            887 
   03F8 CD 00 00      [17]  888 		call 	cpct_scanKeyboard_asm
                            889 
   03FB 21 02 04      [10]  890 		ld 	hl, #Key_Return
   03FE CD 00 00      [17]  891 		call 	cpct_isKeyPressed_asm	;; A <= True/False
   0401 FE 00         [ 7]  892 		cp 	#0 
   0403 28 02         [12]  893 		jr 	z, enter_not_pressed	;; Is enter key pressed?
   0405 F1            [10]  894 			pop af					;; A <= final index selected
   0406 C9            [10]  895 			ret
                            896 
   0407                     897 		enter_not_pressed:
   0407 F1            [10]  898 			pop af				;; A <= index value (stacked)
   0408 CD 50 04      [17]  899 			call checkCursor	;; Check cursor movement
   040B F5            [11]  900 			push af  			;; Stack <- A (Index)
                            901 
   040C 3A DF 00      [13]  902 			ld 	a, (callingFromOpts)
   040F FE 00         [ 7]  903 			cp 	#0
   0411 28 05         [12]  904 			jr 	z, not_options
   0413 F1            [10]  905 				pop af  			;; A <- Stack (Index)
   0414 CD 9A 03      [17]  906 				call checkLateral 	;; Check if we hitted left or right
   0417 F5            [11]  907 				push af 			;; Stack <- A (Index)
                            908 
   0418                     909 			not_options:
   0418 F1            [10]  910 			pop af
   0419 18 DC         [12]  911 			jr checkSelection
                            912 
   041B C9            [10]  913 	ret
                            914 
                            915 ;; =======================================
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 21.
Hexadecimal [16-Bits]



                            916 ;; Mueve el √≠ndice a la posici√≥n indicada
                            917 ;; Entrada:
                            918 ;;	HL <= pointer to new position
                            919 ;; Modifica: AF, BC, DE, HL
                            920 ;; =======================================
   041C                     921 reDrawCursor::
   041C E5            [11]  922 	push hl
                            923 
   041D ED 5B E1 00   [20]  924 	ld de, (cursorPos)		;; alomejor esto no compila
   0421 3E FF         [ 7]  925 	ld a, #0xFF
   0423 06 08         [ 7]  926 	ld b, #cursor_H
   0425 0E 02         [ 7]  927 	ld c, #cursor_W
   0427 CD 00 00      [17]  928 	call cpct_drawSolidBox_asm	;; Erase last index position
                            929 
   042A E1            [10]  930 	pop hl
   042B 22 E1 00      [16]  931 	ld (cursorPos), hl		;; Update cursorPos to the new position after erasing
                            932 
   042E EB            [ 4]  933 	ex 	de, hl			;; DE <= pointer to new position
   042F 3A E0 00      [13]  934 	ld a, (nextSprite)
   0432 FE 00         [ 7]  935 	cp #0
   0434 20 0A         [12]  936 	jr nz, spriteTo1
                            937 		;, Sprite to 0
   0436 21 00 00      [10]  938 		ld	hl, #_sprite_frisbeeMenu_1;; HL <= cursor sprite pointer
   0439 3E 01         [ 7]  939 		ld a, #1
   043B 32 E0 00      [13]  940 		ld (nextSprite), a
   043E 18 08         [12]  941 		jr printSpite
                            942 
   0440                     943 	spriteTo1:
   0440 21 00 00      [10]  944 		ld	hl, #_sprite_frisbeeMenu_0;; HL <= cursor sprite pointer
   0443 3E 00         [ 7]  945 		ld a, #0
   0445 32 E0 00      [13]  946 		ld (nextSprite), a
                            947 
   0448                     948 	printSpite:
   0448 06 08         [ 7]  949 		ld 	b, #cursor_H		;; B = height
   044A 0E 02         [ 7]  950 		ld 	c, #cursor_W		;; C = width
   044C CD 00 00      [17]  951 		call cpct_drawSprite_asm
                            952 
   044F C9            [10]  953 	ret
                            954 
                            955 ;; =================================
                            956 ;; Chequea si el √≠ndice debe moverse
                            957 ;; Entrada:
                            958 ;;	A <= starting index
                            959 ;; Modifica: AF, BC, DE, HL
                            960 ;; Devuelve:
                            961 ;; 	A => selected index
                            962 ;; =================================
   0450                     963 checkCursor::
   0450 F5            [11]  964 	push 	af						;; Stack <- A (Index)
   0451 21 00 01      [10]  965 	ld 	hl, #Key_CursorUp
   0454 CD 00 00      [17]  966 	call 	cpct_isKeyPressed_asm	;; A <= True/False
   0457 FE 00         [ 7]  967 	cp 	#0 
   0459 28 19         [12]  968 	jr 	z, up_not_pressed			;; Is up key pressed?
                            969 		;; Up pressed
   045B F1            [10]  970 		pop af 						;; A <- Index (Stack)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 22.
Hexadecimal [16-Bits]



   045C 3D            [ 4]  971 		dec a 						;; A--
   045D FA 72 04      [10]  972 		jp	m, cant_dec_index 		;; A < 0
                            973 			;; Decrement index
   0460 F5            [11]  974 			push af				;; Save the index
                            975 
   0461 2A E1 00      [16]  976 			ld 	hl, (cursorPos)		;; HL <= Cursor position
   0464 11 10 FF      [10]  977 			ld	de, #subPosition	;; DE <= Negative value to substract to cursor position
   0467 19            [11]  978 			add	hl, de				;; HL <= Cursor position - SubPosition
   0468 CD 1C 04      [17]  979 			call 	reDrawCursor
                            980 
   046B 3E 0A         [ 7]  981 			ld	a, #10
   046D CD 9B 04      [17]  982 			call 	wait_X_halts	;; Waits a amout of halts * 8.
                            983 
   0470 F1            [10]  984 			pop af					;; Restore the index before looping
   0471 C9            [10]  985 			ret
                            986 
   0472                     987 			cant_dec_index:
   0472 3C            [ 4]  988 				inc a 				;; A++. Restore index value
   0473 C9            [10]  989 				ret
                            990 
   0474                     991 	up_not_pressed:
   0474 21 00 04      [10]  992 		ld 	hl, #Key_CursorDown
   0477 CD 00 00      [17]  993 		call 	cpct_isKeyPressed_asm	;; A <= True/False
   047A FE 00         [ 7]  994 		cp 	#0 
   047C 28 1B         [12]  995 		jr 	z, down_not_pressed	;; Is down key pressed?
                            996 			;; Down pressed
   047E F1            [10]  997 			pop 	af
   047F 3C            [ 4]  998 			inc 	a
   0480 FE 04         [ 7]  999 			cp  	#max_index_value
   0482 F2 97 04      [10] 1000 			jp	p, cant_inc_index
                           1001 				;; increment index
   0485 F5            [11] 1002 				push af					;; Save the index
                           1003 
   0486 2A E1 00      [16] 1004 				ld 	hl, (cursorPos)		;; HL <= Cursor position
   0489 11 F0 00      [10] 1005 				ld	de, #addPosition	;; DE <= Positive value to add to cursor position
   048C 19            [11] 1006 				add	hl, de				;; HL <= Cursor position + AddPosition
   048D CD 1C 04      [17] 1007 				call 	reDrawCursor
                           1008 
   0490 3E 0A         [ 7] 1009 				ld	a, #10
   0492 CD 9B 04      [17] 1010 				call 	wait_X_halts
                           1011 
   0495 F1            [10] 1012 				pop af				;; Restore the index before looping
   0496 C9            [10] 1013 				ret
                           1014 
   0497                    1015 			cant_inc_index:
   0497 3D            [ 4] 1016 				dec a 				;; Restore index value
   0498 C9            [10] 1017 				ret
                           1018 
   0499                    1019 	down_not_pressed:
                           1020 		;; Any key pressed
   0499 F1            [10] 1021 		pop af
   049A C9            [10] 1022 	ret
                           1023 
                           1024 ;; =================================
                           1025 ;; Waits 8 halts, N times
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 23.
Hexadecimal [16-Bits]



                           1026 ;; In:
                           1027 ;;	A <= N times
                           1028 ;; Modifies: A
                           1029 ;; =================================
   049B                    1030 wait_X_halts::
   049B 3D            [ 4] 1031 	dec a
   049C 28 09         [12] 1032 	jr z, wait_halts_exit
   049E 76            [ 4] 1033 		halt
   049F 76            [ 4] 1034 		halt
   04A0 76            [ 4] 1035 		halt
   04A1 76            [ 4] 1036 		halt
   04A2 76            [ 4] 1037 		halt
   04A3 76            [ 4] 1038 		halt
   04A4 76            [ 4] 1039 		halt
   04A5 18 F4         [12] 1040 		jr wait_X_halts
   04A7                    1041 	wait_halts_exit:
   04A7 C9            [10] 1042 	ret
                           1043 
                           1044 ;; =======================================
                           1045 ;; Sets the palette to mode 0
                           1046 ;; Modifies: C, HL, DE
                           1047 ;; =======================================
                           1048 ;;setPaletteM0::
                           1049 ;;	ld c, #0					;; Mode 0
                           1050 ;;	call cpct_setVideoMode_asm
                           1051 ;;
                           1052 ;;	ld hl, #paletteM0			;; hl <- paletteM0
                           1053 ;;	ld de, #16 					;; 16 Colours
                           1054 ;;	call cpct_setPalette_asm
                           1055 ;;
                           1056 ;;	ret
                           1057 
                           1058 ;; =======================================
                           1059 ;; Sets the palette to mode 1
                           1060 ;; Modifies: C, HL, DE
                           1061 ;; =======================================
   04A8                    1062 setPaletteM1::
   04A8 0E 01         [ 7] 1063 	ld c, #1					;; Mode 1
   04AA CD 00 00      [17] 1064 	call cpct_setVideoMode_asm
                           1065 
   04AD 21 00 00      [10] 1066 	ld hl, #paletteM1			;; hl <- paletteM1
   04B0 11 04 00      [10] 1067 	ld de, #4 					;; 4 Colours
   04B3 CD 00 00      [17] 1068 	call cpct_setPalette_asm
                           1069 
   04B6 C9            [10] 1070 	ret
                           1071 
                           1072 ;; =======================================
                           1073 ;; Sets the palette to black on mode 1
                           1074 ;; Modifies: C, HL, DE
                           1075 ;; =======================================
   04B7                    1076 setPaletteBlackM1::
   04B7 0E 01         [ 7] 1077 	ld c, #1					;; Mode 1
   04B9 CD 00 00      [17] 1078 	call cpct_setVideoMode_asm
                           1079 
   04BC 21 00 00      [10] 1080 	ld hl, #blackPaletteM1		;; hl <- blackPaletteM1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 24.
Hexadecimal [16-Bits]



   04BF 11 04 00      [10] 1081 	ld de, #4 					;; 4 Colours
   04C2 CD 00 00      [17] 1082 	call cpct_setPalette_asm
                           1083 
   04C5 C9            [10] 1084 	ret
                           1085 
                           1086 ;; =======================================
                           1087 ;; Print the options menu
                           1088 ;; =======================================
   04C6                    1089 initializeOptionsMenu::
                           1090 
   04C6 3E 01         [ 7] 1091 	ld a, #1
   04C8 32 DF 00      [13] 1092 	ld (callingFromOpts), a
                           1093 
   04CB CD 6C 05      [17] 1094 	call cleanScreen
                           1095 
                           1096 	;; Print winCondString
   04CE 21 A7 00      [10] 1097 	ld hl, #winCondString
   04D1 11 00 C0      [10] 1098 	ld de, #menuPos_1_sub
   04D4 CD 51 01      [17] 1099 	call drawOptionsRefactor
                           1100 
                           1101 	;; Print scoreString
   04D7 21 B5 00      [10] 1102 	ld hl, #timeString
   04DA 11 F0 C0      [10] 1103 	ld de, #menuPos_2_sub
   04DD CD 51 01      [17] 1104 	call drawOptionsRefactor
                           1105 
                           1106 	;; Print timeString
   04E0 21 C0 00      [10] 1107 	ld hl, #scoreString
   04E3 11 E0 C1      [10] 1108 	ld de, #menuPos_3_sub
   04E6 CD 51 01      [17] 1109 	call drawOptionsRefactor
                           1110 
                           1111 	;; Print musicString
   04E9 21 D2 00      [10] 1112 	ld hl, #musicString
   04EC 11 D0 C2      [10] 1113 	ld de, #menuPos_4_sub
   04EF CD 51 01      [17] 1114 	call drawOptionsRefactor
                           1115 
                           1116 	;; Print left arrows string
   04F2 21 A3 00      [10] 1117 	ld hl, #leftArrowCharacter
   04F5 11 50 C8      [10] 1118 	ld de, #menuPos_1
   04F8 CD 51 01      [17] 1119 	call drawOptionsRefactor
                           1120 
   04FB 21 A3 00      [10] 1121 	ld hl, #leftArrowCharacter
   04FE 11 40 C9      [10] 1122 	ld de, #menuPos_2
   0501 CD 51 01      [17] 1123 	call drawOptionsRefactor
                           1124 
   0504 21 A3 00      [10] 1125 	ld hl, #leftArrowCharacter
   0507 11 30 CA      [10] 1126 	ld de, #menuPos_3
   050A CD 51 01      [17] 1127 	call drawOptionsRefactor
                           1128 
   050D 21 A3 00      [10] 1129 	ld hl, #leftArrowCharacter
   0510 11 20 CB      [10] 1130 	ld de, #menuPos_4
   0513 CD 51 01      [17] 1131 	call drawOptionsRefactor
                           1132 
                           1133 	;;	ld hl, #leftArrowCharacter
                           1134 	;;	ld de, #menuPos_5
                           1135 	;;	call drawOptionsRefactor
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 25.
Hexadecimal [16-Bits]



                           1136 	;;
                           1137 	;;	ld hl, #leftArrowCharacter
                           1138 	;;	ld de, #menuPos_6
                           1139 	;;	call drawOptionsRefactor
                           1140 	;;
                           1141 	;;	ld hl, #leftArrowCharacter
                           1142 	;;	ld de, #menuPos_7
                           1143 	;;	call drawOptionsRefactor
                           1144 
                           1145 	;; Print right arrows string
   0516 21 A5 00      [10] 1146 	ld hl, #rightArrowCharacter
   0519 11 70 C8      [10] 1147 	ld de, #menuPos_1_2
   051C CD 51 01      [17] 1148 	call drawOptionsRefactor
                           1149 
   051F 21 A5 00      [10] 1150 	ld hl, #rightArrowCharacter
   0522 11 60 C9      [10] 1151 	ld de, #menuPos_2_2
   0525 CD 51 01      [17] 1152 	call drawOptionsRefactor
                           1153 
   0528 21 A5 00      [10] 1154 	ld hl, #rightArrowCharacter
   052B 11 50 CA      [10] 1155 	ld de, #menuPos_3_2
   052E CD 51 01      [17] 1156 	call drawOptionsRefactor
                           1157 
   0531 21 A5 00      [10] 1158 	ld hl, #rightArrowCharacter
   0534 11 40 CB      [10] 1159 	ld de, #menuPos_4_2
   0537 CD 51 01      [17] 1160 	call drawOptionsRefactor
                           1161 
                           1162 	;;	ld hl, #rightArrowCharacter
                           1163 	;;	ld de, #menuPos_5_2
                           1164 	;;	call drawOptionsRefactor
                           1165 	;;
                           1166 	;;
                           1167 	;;	ld hl, #rightArrowCharacter
                           1168 	;;	ld de, #menuPos_6_2
                           1169 	;;	call drawOptionsRefactor
                           1170 	;;
                           1171 	;;	ld hl, #rightArrowCharacter
                           1172 	;;	ld de, #menuPos_7_2
                           1173 	;;	call drawOptionsRefactor
                           1174 
                           1175 	;; Print the instructions
   053A 21 58 00      [10] 1176 	ld hl, #menuOptInstrucString
   053D 11 E0 C6      [10] 1177 	ld de, #instrPos
   0540 CD 51 01      [17] 1178 	call drawOptionsRefactor
                           1179 
                           1180 	;; Print the cursor
   0543 3A E0 00      [13] 1181 		ld a, (nextSprite)
   0546 FE 00         [ 7] 1182 	cp #0
   0548 20 0A         [12] 1183 	jr nz, spriteTo1_Menu
                           1184 		;, Sprite to 0
   054A 21 00 00      [10] 1185 		ld	hl, #_sprite_frisbeeMenu_1;; HL <= cursor sprite pointer
   054D 3E 01         [ 7] 1186 		ld a, #1
   054F 32 E0 00      [13] 1187 		ld (nextSprite), a
   0552 18 08         [12] 1188 		jr printSpite_Menu
                           1189 
   0554                    1190 	spriteTo1_Menu:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 26.
Hexadecimal [16-Bits]



   0554 21 00 00      [10] 1191 		ld	hl, #_sprite_frisbeeMenu_0;; HL <= cursor sprite pointer
   0557 3E 00         [ 7] 1192 		ld a, #0
   0559 32 E0 00      [13] 1193 		ld (nextSprite), a
                           1194 
   055C                    1195 	printSpite_Menu:
   055C ED 5B E1 00   [20] 1196 	ld 	de, (cursorPos)
   0560 06 08         [ 7] 1197 	ld 	b, #cursor_H 		;; B = ent height
   0562 0E 02         [ 7] 1198 	ld 	c, #cursor_W		;; C = ent width
   0564 CD 00 00      [17] 1199 	call cpct_drawSprite_asm
                           1200 
   0567 CD FD 01      [17] 1201 	call printOptions
   056A C9            [10] 1202 	ret
                           1203 
                           1204 ;; ====================================
                           1205 ;; ====================================
                           1206 ;; PRIVATE FUNCTIONS
                           1207 ;; ====================================
                           1208 ;; ====================================
                           1209 
   056B                    1210 checkUserInput:
                           1211 	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                           1212 	;; Reading keyboard example
                           1213 	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                           1214 	;; 	call cpct_scanKeyboard_asm
                           1215 	;; 	ld 	hl, #Key_CursorUp	;; HL = CursorUp Keycode
                           1216 	;; 	call 	cpct_isKeyPressed_asm 	;; A = True/False
                           1217 	;; 	cp 	#0 			;; A == 0?
                           1218 	;; 	jr 	z, up_not_pressed
                           1219 	;; 		;; Up is pressed code
                           1220 	;; 		call 	moveUp	
                           1221 	;; 	up_not_pressed:
                           1222 	;; 		;; Up is not pressed code
                           1223 	;; 		ld 	hl, #Key_CursorDown		;; HL = CursorDown Keycode
                           1224 	;; 		call 	cpct_isKeyPressed_asm 		;; A = True/False
                           1225 	;; 		cp 	#0 				;; A == 0?
                           1226 	;; 		jr 	z, down_not_pressed
                           1227 	;; 			;; Down is pressed code
                           1228 	;; 			call 	moveDown	
                           1229 	;; 		down_not_pressed:
                           1230 	;; 		;; Down is not pressed code
                           1231 
   056B C9            [10] 1232 	ret
                           1233 
                           1234 ;; ====================================
                           1235 ;; Clears the cleanScreen
                           1236 ;; Modifies: HL, DE, BC
                           1237 ;; ====================================
   056C                    1238 cleanScreen::
                           1239 	;; Clean from C000 to EFFF
   056C 21 00 C0      [10] 1240 	ld	hl, #menuPos_1_sub			;; HL <= Copy pointer
   056F 11 01 C0      [10] 1241 	ld	de, #0xC001			;; DE <= Write pointer
   0572 36 FF         [10] 1242 	ld	(hl), #0xFF			;; Set to 0 where HL points
   0574 01 00 40      [10] 1243 	ld	bc, #0x4000			;; BC <= Times to repeat
   0577 ED B0         [21] 1244 	ldir					;; Copy from where HL points to where DE points, and inc HL and DE, BC times
                           1245 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 27.
Hexadecimal [16-Bits]



   0579 C9            [10] 1246 	ret
                           1247 
                           1248 ;; ====================================
                           1249 ;; Write the menu strings
                           1250 ;; Modifies: HL, DE, BC
                           1251 ;; ====================================
   057A                    1252 initializeMenu:
   057A CD A8 04      [17] 1253 	call setPaletteM1
   057D CD 6C 05      [17] 1254 	call cleanScreen
                           1255 
   0580 F5            [11] 1256 	push af
   0581 3E 00         [ 7] 1257 	ld a, #0
   0583 32 DF 00      [13] 1258 	ld (callingFromOpts), a
   0586 F1            [10] 1259 	pop af
                           1260 
                           1261 	;; Print Menu
   0587 21 00 00      [10] 1262 	ld hl, #menuString
   058A 11 00 C0      [10] 1263 	ld de, #menuPos_1_sub
   058D CD 51 01      [17] 1264 	call drawOptionsRefactor
                           1265 
                           1266 	;; Print Play
   0590 21 0D 00      [10] 1267 	ld hl, #playString
   0593 11 50 C8      [10] 1268 	ld de, #menuPos_1
   0596 CD 51 01      [17] 1269 	call drawOptionsRefactor
                           1270 
                           1271 	;; Print Options
                           1272 
   0599 21 12 00      [10] 1273 	ld hl, #pvpString
   059C 11 40 C9      [10] 1274 	ld de, #menuPos_2
   059F CD 51 01      [17] 1275 	call drawOptionsRefactor
                           1276 
                           1277 	;; Print Menu
   05A2 21 23 00      [10] 1278 	ld hl, #optionsString
   05A5 11 30 CA      [10] 1279 	ld de, #menuPos_3
   05A8 CD 51 01      [17] 1280 	call drawOptionsRefactor
                           1281 
                           1282 	;; Print Cretids
   05AB 21 05 00      [10] 1283 	ld hl, #credString
   05AE 11 20 CB      [10] 1284 	ld de, #menuPos_4
   05B1 CD 51 01      [17] 1285 	call drawOptionsRefactor
                           1286 
                           1287 	;;	ld hl, #optionsString
                           1288 	;;	ld de, #menuPos_5
                           1289 	;;	call drawOptionsRefactor
                           1290 	;;
                           1291 	;;	ld hl, #menuString
                           1292 	;;	ld de, #menuPos_6
                           1293 	;;	call drawOptionsRefactor
                           1294 	;;
                           1295 	;;	ld hl, #playString
                           1296 	;;	ld de, #menuPos_7
                           1297 	;;	call drawOptionsRefactor
                           1298 
   05B4 21 33 00      [10] 1299 	ld hl, #menuInstrucString
   05B7 11 E0 C6      [10] 1300 	ld de, #instrPos
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 28.
Hexadecimal [16-Bits]



   05BA CD 51 01      [17] 1301 	call drawOptionsRefactor
                           1302 
                           1303 	;; Print the cursor
   05BD F5            [11] 1304 	push af
   05BE 3A E0 00      [13] 1305 	ld a, (nextSprite)
   05C1 FE 00         [ 7] 1306 	cp #0
   05C3 20 0A         [12] 1307 	jr nz, spriteTo1_Opt
                           1308 		;, Sprite to 0
   05C5 21 00 00      [10] 1309 		ld	hl, #_sprite_frisbeeMenu_1;; HL <= cursor sprite pointer
   05C8 3E 01         [ 7] 1310 		ld a, #1
   05CA 32 E0 00      [13] 1311 		ld (nextSprite), a
   05CD 18 08         [12] 1312 		jr printSpite_Opt
                           1313 
   05CF                    1314 	spriteTo1_Opt:
   05CF 21 00 00      [10] 1315 		ld	hl, #_sprite_frisbeeMenu_0;; HL <= cursor sprite pointer
   05D2 3E 00         [ 7] 1316 		ld a, #0
   05D4 32 E0 00      [13] 1317 		ld (nextSprite), a
                           1318 
   05D7                    1319 	printSpite_Opt:
   05D7 ED 5B E1 00   [20] 1320 	ld 	de, (cursorPos)
   05DB 06 08         [ 7] 1321 	ld 	b, #cursor_H 		;; B = height
   05DD 0E 02         [ 7] 1322 	ld 	c, #cursor_W		;; C = width
   05DF CD 00 00      [17] 1323 	call cpct_drawSprite_asm
                           1324 
   05E2 F1            [10] 1325 	pop af
   05E3 C9            [10] 1326 	ret
                           1327 
                           1328 
   05E4 50 41 42 4C 4F 20  1329 PabloString: 	.asciz "PABLO REQUENA"
        52 45 51 55 45 4E
        41 00
   05F2 4D 41 52 43 4F 53  1330 MarcosString:	.asciz "MARCOS GONZALEZ"
        20 47 4F 4E 5A 41
        4C 45 5A 00
   0602 45 55 20 4C 4C 4F  1331 EuString:		.asciz "EU LLOPIS"
        50 49 53 00
   060C 47 45 4E 45 52 41  1332 ProgString:		.asciz "GENERAL PROGRAMING AND MANAGEMENT"
        4C 20 50 52 4F 47
        52 41 4D 49 4E 47
        20 41 4E 44 20 4D
        41 4E 41 47 45 4D
        45 4E 54 00
   062E 49 4E 54 45 52 46  1333 IfAndMecString:	.asciz "INTERFACE AND MECHANICS"
        41 43 45 20 41 4E
        44 20 4D 45 43 48
        41 4E 49 43 53 00
   0646 50 48 59 53 49 43  1334 PhysString:		.asciz "PHYSICS"
        53 00
   064E 41 52 54 20 45 58  1335 ArtString:		.asciz "ART EXPERT"
        50 45 52 54 00
   0659 4D 41 50 20 41 4E  1336 Art2String:		.asciz "MAP AND ART DESIGN"
        44 20 41 52 54 20
        44 45 53 49 47 4E
        00
   066C 4F 52 49 47 49 4E  1337 bsoString:		.asciz "ORIGINAL SOUNDTRACK"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 29.
Hexadecimal [16-Bits]



        41 4C 20 53 4F 55
        4E 44 54 52 41 43
        4B 00
                           1338 
                           1339 ;;
                           1340 ;;
                           1341 ;;
   0680                    1342 printCredits::
                           1343 
   0680 CD A8 04      [17] 1344 	call setPaletteM1
   0683 CD 6C 05      [17] 1345 	call cleanScreen
                           1346 
   0686 F5            [11] 1347 	push af
   0687 3E 00         [ 7] 1348 	ld a, #0
   0689 32 DF 00      [13] 1349 	ld (callingFromOpts), a
   068C F1            [10] 1350 	pop af
                           1351 	;; Pablo
   068D 21 E4 05      [10] 1352 		ld hl, #PabloString
   0690 11 F0 C8      [10] 1353 		ld de, #txt_credits1
   0693 CD 51 01      [17] 1354 		call drawOptionsRefactor
                           1355 
   0696 21 0C 06      [10] 1356 		ld hl, #ProgString
   0699 11 40 C9      [10] 1357 		ld de, #menuPos_2
   069C CD 51 01      [17] 1358 		call drawOptionsRefactor
                           1359 
   069F 21 2E 06      [10] 1360 		ld hl, #IfAndMecString
   06A2 11 90 C9      [10] 1361 		ld de, #txt_credits3
   06A5 CD 51 01      [17] 1362 		call drawOptionsRefactor
                           1363 
                           1364 		;; Credits 4?
                           1365 
                           1366 	;; Eu
   06A8 21 02 06      [10] 1367 		ld hl, #EuString
   06AB 11 80 CA      [10] 1368 		ld de, #txt_credits6
   06AE CD 51 01      [17] 1369 		call drawOptionsRefactor
                           1370 
   06B1 21 4E 06      [10] 1371 		ld hl, #ArtString
   06B4 11 D0 CA      [10] 1372 		ld de, #txt_credits7
   06B7 CD 51 01      [17] 1373 		call drawOptionsRefactor
                           1374 
   06BA 21 59 06      [10] 1375 		ld hl, #Art2String
   06BD 11 20 CB      [10] 1376 		ld de, #menuPos_4
   06C0 CD 51 01      [17] 1377 		call drawOptionsRefactor
                           1378 
                           1379 	;; Marcos
   06C3 21 F2 05      [10] 1380 		ld hl, #MarcosString
   06C6 11 C0 CB      [10] 1381 		ld de, #txt_credits9
   06C9 CD 51 01      [17] 1382 		call drawOptionsRefactor
                           1383 
   06CC 21 6C 06      [10] 1384 		ld hl, #bsoString
   06CF 11 10 CC      [10] 1385 		ld de, #menuPos_5
   06D2 CD 51 01      [17] 1386 		call drawOptionsRefactor
                           1387 
   06D5 21 0C 06      [10] 1388 		ld hl, #ProgString
   06D8 11 60 CC      [10] 1389 		ld de, #txt_credits11
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 30.
Hexadecimal [16-Bits]



   06DB CD 51 01      [17] 1390 		call drawOptionsRefactor
                           1391 
   06DE 21 2E 06      [10] 1392 		ld hl, #IfAndMecString
   06E1 11 B0 CC      [10] 1393 		ld de, #txt_credits12
   06E4 CD 51 01      [17] 1394 		call drawOptionsRefactor
                           1395 
   06E7 21 46 06      [10] 1396 		ld hl, #PhysString
   06EA 11 00 CD      [10] 1397 		ld de, #menuPos_6
   06ED CD 51 01      [17] 1398 		call drawOptionsRefactor
                           1399 
                           1400 ;;	ld hl, #
                           1401 ;;	ld de, #txt_credits9
                           1402 ;;	drawOptionsRefactor
                           1403 ;;
                           1404 ;;	ld hl, #
                           1405 ;;	ld de, #txt_credits10
                           1406 ;;	drawOptionsRefactor
                           1407 ;;
                           1408 ;;	ld hl, #
                           1409 ;;	ld de, #txt_credits11
                           1410 ;;	drawOptionsRefactor
                           1411 ;;
                           1412 ;;	ld hl, #
                           1413 ;;	ld de, #txt_credits12
                           1414 ;;	drawOptionsRefactor
                           1415 ;;
                           1416 ;;	ld hl, #
                           1417 ;;	ld de, #txt_credits13
                           1418 ;;	drawOptionsRefactor
                           1419 ;;
                           1420 ;;	ld hl, #
                           1421 ;;	ld de, #txt_credits14
                           1422 ;;	drawOptionsRefactor
                           1423 
   06F0                    1424 	loop_credits:
   06F0 CD 00 00      [17] 1425 		call 	cpct_scanKeyboard_asm
                           1426 
   06F3 21 02 04      [10] 1427 		ld 	hl, #Key_Return
   06F6 CD 00 00      [17] 1428 		call 	cpct_isKeyPressed_asm	;; A <= True/False
   06F9 FE 00         [ 7] 1429 		cp 	#0 
   06FB 28 F3         [12] 1430 		jr 	z, loop_credits	;; Is enter key pressed?
   06FD C9            [10] 1431 	ret
