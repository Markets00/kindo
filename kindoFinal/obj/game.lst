ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 1.
Hexadecimal [16-Bits]



                              1 .area _DATA
                              2 .area _CODE
                              3 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 2.
Hexadecimal [16-Bits]



                              4 .include "player.h.s"
                              1 ;; =========================
                              2 ;; =========================
                              3 ;; PLAYER PUBLIC FUNCTIONS
                              4 ;; =========================
                              5 ;; =========================
                              6 .globl player_update
                              7 .globl update_player_animation
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 3.
Hexadecimal [16-Bits]



                              5 .include "frisbee.h.s"
                              1 ;; =========================
                              2 ;; =========================
                              3 ;; FRISBEE PUBLIC FUNCTIONS
                              4 ;; =========================
                              5 ;; =========================
                              6 .globl frisbee_erase
                              7 .globl frisbee_update
                              8 .globl frisbee_draw
                              9 .globl frisbee_data
                             10 .globl frisbee_setEffect
                             11 .globl frisbee_setVelocities
                             12 .globl frisbee_checkGoal
                             13 .globl frisbee_setState
                             14 .globl update_frisbee_animation
                             15 	
                     001B    16 .equ Frisbee_effect_I, 27
                     001C    17 .equ Frisbee_effect_F, 28
                     0008    18 .equ std_eff, 0x0008
                     FFF8    19 .equ std_N_eff, 0xFFF8
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 4.
Hexadecimal [16-Bits]



                              6 .include "utility.h.s"
                              1 ;; ====================================
                              2 ;; ====================================
                              3 ;; INCLUDED CPCTELERA FUNCTIONS
                              4 ;; ====================================
                              5 ;; ====================================
                              6 .globl cpct_waitVSYNC_asm
                              7 .globl cpct_drawSolidBox_asm
                              8 .globl cpct_getScreenPtr_asm
                              9 .globl cpct_scanKeyboard_asm
                             10 .globl cpct_isKeyPressed_asm
                             11 .globl cpct_disableFirmware_asm
                             12 .globl cpct_setVideoMode_asm
                             13 .globl cpct_setPalette_asm
                             14 .globl cpct_memcpy_asm
                             15 .globl negateHL
                             16 .globl cpct_setVideoMemoryPage_asm
                             17 .globl cpct_akp_musicPlay_asm
                             18 .globl cpct_akp_stop_asm
                             19 .globl cpct_drawSprite_asm
                             20 .globl cpct_setInterruptHandler_asm
                             21 .globl cpct_setPALColour_asm
                             22 .globl cpct_drawStringM2_asm
                             23 .globl cpct_drawStringM1_asm
                             24 .globl cpct_etm_setTileset2x4_asm
                             25 .globl cpct_etm_drawTileBox2x4_asm
                             26 .globl cpct_etm_drawTilemap2x4_f_asm
                             27 .globl cpct_drawSpriteMaskedAlignedTable_asm
                             28 .globl cpct_drawSpriteMasked_asm
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 5.
Hexadecimal [16-Bits]



                              7 .include "entity.h.s"
                              1 ;; ====================================
                              2 ;; ====================================
                              3 ;; ENTITY PUBLIC FUNCTIONS
                              4 ;; ====================================
                              5 ;; ====================================
                              6 .globl entityDraw
                              7 .globl entityErase
                              8 .globl entityCheckCollision
                              9 .globl entityUpdatePhysics
                             10 .globl entityUpdatePosition
                             11 
                             12 
                             13 .macro defineEntity name, x,y, h, w, vx, vy, ax, ay, normal, sprites_ptr, id
                             14 	name'_data::
                             15 		name'_x:	.dw x		;; X coordinate			(16 bits)
                             16 		name'_y:	.dw y		;; Y coordinate			(16 bits)
                             17 		name'_h:	.db h		;; Height			(8 bits)
                             18 		name'_w:	.db w		;; Width			(8 bits)
                             19 		name'_vx:	.dw vx		;; Velocity at X axis 		(16 bits)
                             20 		name'_vy:	.dw vy		;; Velocity at Y axis		(16 bits)
                             21 		name'_ax:	.dw ax		;; Acceleration at X axis	(16 bits)
                             22 		name'_ay:	.dw ay		;; Acceleration at Y axis	(16 bits)
                             23 		name'_normal:	.dw normal	;; Normal force			(16 bits)
                             24 		name'_last_x:	.db #30		;; Last x rendered		(8 bits)
                             25 		name'_erase_x:	.db #30		;; x rendered at same buffer	(8 bits)
                             26 		name'_last_y:	.db #30		;; Last y rendered		(8 bits)
                             27 		name'_erase_y:	.db #30		;; y rendered at same buffer	(8 bits)
                             28 		name'_state:	.db #0		;; Entity animation state	(8 bits)
                             29 		name'_lastState:.db #0		;; Last entity animation state	(8 bits)
                             30 		name'_signal:	.db #-1		;; Signal recived for animations(8 bits)
                             31 		name'_sprite:	.db #0		;; Entity sprite index		(8 bits)
                             32 		name'_sprites_ptr: .dw sprites_ptr ;; Pointer to sprites	(16 bits)
                             33 		name'_id:	.db id		;; Numeric ID			(8 bits)
                             34 .endm
                             35 
                             36 
                             37 ;; ====================================
                             38 ;; ====================================
                             39 ;; ENTITY PUBLIC DATA
                             40 ;; ====================================
                             41 ;; ====================================
                             42 
                             43 .globl robot_1_sprites
                             44 .globl robot_2_sprites
                             45 .globl frisbee_sprites
                             46 
                     0000    47 .equ Ent_x_I, 		0	;; X coordinate, integer part
                     0001    48 .equ Ent_x_F, 		1	;; X coordinate, fractional part
                     0002    49 .equ Ent_y_I, 		2	;; Y coordinate, integer part
                     0003    50 .equ Ent_y_F, 		3	;; Y coordinate, fractional part
                     0004    51 .equ Ent_h, 		4	;; Height
                     0005    52 .equ Ent_w, 		5	;; Width
                     0006    53 .equ Ent_vx_I,		6	;; Velocity at X axis, integer part
                     0007    54 .equ Ent_vx_F,		7	;; Velocity at X axis, fractional part
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 6.
Hexadecimal [16-Bits]



                     0008    55 .equ Ent_vy_I,		8	;; Velocity at Y axis, integer part
                     0009    56 .equ Ent_vy_F,		9	;; Velocity at Y axis, fractional part
                     000A    57 .equ Ent_ax_I,		10	;; Acceleration at X axis, integer part
                     000B    58 .equ Ent_ax_F,		11	;; Acceleration at X axis, fractional part
                     000C    59 .equ Ent_ay_I,		12	;; Acceleration at Y axis, integer part
                     000D    60 .equ Ent_ay_F,		13	;; Acceleration at Y axis, fractional part
                     000E    61 .equ Ent_N_I,		14	;; Normal force, integer part
                     000F    62 .equ Ent_N_F,		15	;; Normal force, fractional part
                     0010    63 .equ Ent_last_x,	16	;; Last x rendered
                     0011    64 .equ Ent_erase_x,	17	;; x rendered at same buffer
                     0012    65 .equ Ent_last_y,	18	;; Last y rendered
                     0013    66 .equ Ent_erase_y,	19	;; y rendered at same buffer
                     0014    67 .equ Ent_state,		20	;; Entity animation state
                     0015    68 .equ Ent_lastState,	21	;; Last entity animation state
                     0016    69 .equ Ent_signal,	22	;; Signar for animations
                     0017    70 .equ Ent_sprite, 	23	;; Entity sprite index
                     0018    71 .equ Ent_sprites_ptr_H, 24	;; Pointer to sprite, high part
                     0019    72 .equ Ent_sprites_ptr_L, 25	;; Pointer to sprite, high part
                     001A    73 .equ Ent_id, 		26	;; Numeric ID
                             74 				;; Frisbee 	0
                             75 				;; Player1 	1
                             76 				;; Enemy1	2
                             77 
                     0003    78 .equ MAX_VEL_X, 3 
                     FFFFFFFD    79 .equ MIN_VEL_X, -3
                     0003    80 .equ MAX_VEL_Y, 3
                     FFFFFFFD    81 .equ MIN_VEL_Y, -3
                             82 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 7.
Hexadecimal [16-Bits]



                              8 .include "sprites.h.s"
                              1 .globl _sprite_palette
                              2 
                              3 .globl _sprite_robot_1_0
                              4 .globl _sprite_robot_1_1
                              5 
                              6 .globl _sprite_robot_2_0
                              7 .globl _sprite_robot_2_1
                              8 
                              9 .globl _sprite_frisbee_1_0
                             10 .globl _sprite_frisbee_1_1
                             11 
                             12 ;; MAP
                             13 .globl _map_tileset
                             14 .globl _tilemap
                             15 	
                             16 ;; ":"
                             17 .globl _sprite_points
                             18 ;; "0, 1, 2, 3, 4, 5, 6, 7, 8, 9"
                             19 .globl _sprite_numbers_09
                             20 .globl _sprite_numbers_08
                             21 .globl _sprite_numbers_07
                             22 .globl _sprite_numbers_06
                             23 .globl _sprite_numbers_05
                             24 .globl _sprite_numbers_04
                             25 .globl _sprite_numbers_03
                             26 .globl _sprite_numbers_02
                             27 .globl _sprite_numbers_01
                             28 .globl _sprite_numbers_00
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 8.
Hexadecimal [16-Bits]



                              9 	
                             10 ;; ====================================
                             11 ;; ====================================
                             12 ;; PUBLIC DATA
                             13 ;; ====================================
                             14 ;; ====================================
                             15 
   0000 4B                   16 paletteM2::	.db #0x4B	;; White
   0001 54                   17 			.db #0x54	;; Black
                             18 
   0002 4C                   19 paletteM1::	.db #0x4C	;; Red
   0003 40                   20 			.db #0x40	;; Grey
   0004 4B                   21 			.db #0x4B	;; White
   0005 54                   22 			.db #0x54	;; Black
                             23 
   0006 54                   24 blackPaletteM1::	.db #0x54	;; Black
   0007 54                   25 					.db #0x54	;; Black
   0008 54                   26 					.db #0x54	;; Black
   0009 54                   27 					.db #0x54	;; Black
                             28 
                             29 ;;paletteM0::	.db # ;; 
                             30 ;;			.db # ;; 
                             31 ;;			.db # ;; 
                             32 ;;			.db # ;; 
                             33 ;;			.db # ;; 
                             34 ;;			.db # ;; 
                             35 ;;			.db # ;; 
                             36 ;;			.db # ;; 
                             37 ;;			.db # ;; 
                             38 ;;			.db # ;; 
                             39 ;;			.db # ;; 
                             40 ;;			.db # ;; 
                             41 ;;			.db # ;; 
                             42 ;;			.db # ;;  
                             43 ;;			.db #0x4B ;; White
                             44 ;;			.db #0x54 ;; Black 
                             45 
                             46 
                     0003    47 number_w = 3
                     0007    48 number_h = 7
                             49 
                             50 ;;defineEntity name, 	x,	y,	 h, w, 	vx, 	vy, 	ax, 	ay, normal, 	sprites_ptr, 		id
   000A                      51 defineEntity player, #0x0010, #0x0050, #20, #5, #0000, #0000, #0000, #0000, #0x1800, #robot_1_sprites, 		#1
   000A                       1 	player_data::
   000A 10 00                 2 		player_x:	.dw #0x0010		;; X coordinate			(16 bits)
   000C 50 00                 3 		player_y:	.dw #0x0050		;; Y coordinate			(16 bits)
   000E 14                    4 		player_h:	.db #20		;; Height			(8 bits)
   000F 05                    5 		player_w:	.db #5		;; Width			(8 bits)
   0010 00 00                 6 		player_vx:	.dw #0000		;; Velocity at X axis 		(16 bits)
   0012 00 00                 7 		player_vy:	.dw #0000		;; Velocity at Y axis		(16 bits)
   0014 00 00                 8 		player_ax:	.dw #0000		;; Acceleration at X axis	(16 bits)
   0016 00 00                 9 		player_ay:	.dw #0000		;; Acceleration at Y axis	(16 bits)
   0018 00 18                10 		player_normal:	.dw #0x1800	;; Normal force			(16 bits)
   001A 1E                   11 		player_last_x:	.db #30		;; Last x rendered		(8 bits)
   001B 1E                   12 		player_erase_x:	.db #30		;; x rendered at same buffer	(8 bits)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 9.
Hexadecimal [16-Bits]



   001C 1E                   13 		player_last_y:	.db #30		;; Last y rendered		(8 bits)
   001D 1E                   14 		player_erase_y:	.db #30		;; y rendered at same buffer	(8 bits)
   001E 00                   15 		player_state:	.db #0		;; Entity animation state	(8 bits)
   001F 00                   16 		player_lastState:.db #0		;; Last entity animation state	(8 bits)
   0020 FF                   17 		player_signal:	.db #-1		;; Signal recived for animations(8 bits)
   0021 00                   18 		player_sprite:	.db #0		;; Entity sprite index		(8 bits)
   0022 00 00                19 		player_sprites_ptr: .dw #robot_1_sprites ;; Pointer to sprites	(16 bits)
   0024 01                   20 		player_id:	.db #1		;; Numeric ID			(8 bits)
   0025                      52 defineEntity enemy, #0x0050-0x000A, #0x0064, #20, #5, #0000, #0000, #0000, #0000, #0x1800, #robot_2_sprites, 	#2
   0025                       1 	enemy_data::
   0025 46 00                 2 		enemy_x:	.dw #0x0050-0x000A		;; X coordinate			(16 bits)
   0027 64 00                 3 		enemy_y:	.dw #0x0064		;; Y coordinate			(16 bits)
   0029 14                    4 		enemy_h:	.db #20		;; Height			(8 bits)
   002A 05                    5 		enemy_w:	.db #5		;; Width			(8 bits)
   002B 00 00                 6 		enemy_vx:	.dw #0000		;; Velocity at X axis 		(16 bits)
   002D 00 00                 7 		enemy_vy:	.dw #0000		;; Velocity at Y axis		(16 bits)
   002F 00 00                 8 		enemy_ax:	.dw #0000		;; Acceleration at X axis	(16 bits)
   0031 00 00                 9 		enemy_ay:	.dw #0000		;; Acceleration at Y axis	(16 bits)
   0033 00 18                10 		enemy_normal:	.dw #0x1800	;; Normal force			(16 bits)
   0035 1E                   11 		enemy_last_x:	.db #30		;; Last x rendered		(8 bits)
   0036 1E                   12 		enemy_erase_x:	.db #30		;; x rendered at same buffer	(8 bits)
   0037 1E                   13 		enemy_last_y:	.db #30		;; Last y rendered		(8 bits)
   0038 1E                   14 		enemy_erase_y:	.db #30		;; y rendered at same buffer	(8 bits)
   0039 00                   15 		enemy_state:	.db #0		;; Entity animation state	(8 bits)
   003A 00                   16 		enemy_lastState:.db #0		;; Last entity animation state	(8 bits)
   003B FF                   17 		enemy_signal:	.db #-1		;; Signal recived for animations(8 bits)
   003C 00                   18 		enemy_sprite:	.db #0		;; Entity sprite index		(8 bits)
   003D 00 00                19 		enemy_sprites_ptr: .dw #robot_2_sprites ;; Pointer to sprites	(16 bits)
   003F 02                   20 		enemy_id:	.db #2		;; Numeric ID			(8 bits)
                             53 
   0040                      54 defineEntity player2, #0x0010, #0x0050, #20, #5, #0000, #0000, #0000, #0000, #0x1800, #robot_1_sprites, 	#3
   0040                       1 	player2_data::
   0040 10 00                 2 		player2_x:	.dw #0x0010		;; X coordinate			(16 bits)
   0042 50 00                 3 		player2_y:	.dw #0x0050		;; Y coordinate			(16 bits)
   0044 14                    4 		player2_h:	.db #20		;; Height			(8 bits)
   0045 05                    5 		player2_w:	.db #5		;; Width			(8 bits)
   0046 00 00                 6 		player2_vx:	.dw #0000		;; Velocity at X axis 		(16 bits)
   0048 00 00                 7 		player2_vy:	.dw #0000		;; Velocity at Y axis		(16 bits)
   004A 00 00                 8 		player2_ax:	.dw #0000		;; Acceleration at X axis	(16 bits)
   004C 00 00                 9 		player2_ay:	.dw #0000		;; Acceleration at Y axis	(16 bits)
   004E 00 18                10 		player2_normal:	.dw #0x1800	;; Normal force			(16 bits)
   0050 1E                   11 		player2_last_x:	.db #30		;; Last x rendered		(8 bits)
   0051 1E                   12 		player2_erase_x:	.db #30		;; x rendered at same buffer	(8 bits)
   0052 1E                   13 		player2_last_y:	.db #30		;; Last y rendered		(8 bits)
   0053 1E                   14 		player2_erase_y:	.db #30		;; y rendered at same buffer	(8 bits)
   0054 00                   15 		player2_state:	.db #0		;; Entity animation state	(8 bits)
   0055 00                   16 		player2_lastState:.db #0		;; Last entity animation state	(8 bits)
   0056 FF                   17 		player2_signal:	.db #-1		;; Signal recived for animations(8 bits)
   0057 00                   18 		player2_sprite:	.db #0		;; Entity sprite index		(8 bits)
   0058 00 00                19 		player2_sprites_ptr: .dw #robot_1_sprites ;; Pointer to sprites	(16 bits)
   005A 03                   20 		player2_id:	.db #3		;; Numeric ID			(8 bits)
   005B                      55 defineEntity enemy2, #0x0050-0x0004, #0x0064, #20, #5, #0000, #0000, #0000, #0000, #0x1800, #robot_2_sprites, 	#4
   005B                       1 	enemy2_data::
   005B 4C 00                 2 		enemy2_x:	.dw #0x0050-0x0004		;; X coordinate			(16 bits)
   005D 64 00                 3 		enemy2_y:	.dw #0x0064		;; Y coordinate			(16 bits)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 10.
Hexadecimal [16-Bits]



   005F 14                    4 		enemy2_h:	.db #20		;; Height			(8 bits)
   0060 05                    5 		enemy2_w:	.db #5		;; Width			(8 bits)
   0061 00 00                 6 		enemy2_vx:	.dw #0000		;; Velocity at X axis 		(16 bits)
   0063 00 00                 7 		enemy2_vy:	.dw #0000		;; Velocity at Y axis		(16 bits)
   0065 00 00                 8 		enemy2_ax:	.dw #0000		;; Acceleration at X axis	(16 bits)
   0067 00 00                 9 		enemy2_ay:	.dw #0000		;; Acceleration at Y axis	(16 bits)
   0069 00 18                10 		enemy2_normal:	.dw #0x1800	;; Normal force			(16 bits)
   006B 1E                   11 		enemy2_last_x:	.db #30		;; Last x rendered		(8 bits)
   006C 1E                   12 		enemy2_erase_x:	.db #30		;; x rendered at same buffer	(8 bits)
   006D 1E                   13 		enemy2_last_y:	.db #30		;; Last y rendered		(8 bits)
   006E 1E                   14 		enemy2_erase_y:	.db #30		;; y rendered at same buffer	(8 bits)
   006F 00                   15 		enemy2_state:	.db #0		;; Entity animation state	(8 bits)
   0070 00                   16 		enemy2_lastState:.db #0		;; Last entity animation state	(8 bits)
   0071 FF                   17 		enemy2_signal:	.db #-1		;; Signal recived for animations(8 bits)
   0072 00                   18 		enemy2_sprite:	.db #0		;; Entity sprite index		(8 bits)
   0073 00 00                19 		enemy2_sprites_ptr: .dw #robot_2_sprites ;; Pointer to sprites	(16 bits)
   0075 04                   20 		enemy2_id:	.db #4		;; Numeric ID			(8 bits)
                             56 
   0076                      57 game_data::
   0076 00                   58 	game_type::         .db #0 ;; Game Mode (8 bits)
   0077 00                   59    	game_numPlayers:    .db #0 ;; Players who are going to play
   0078 00                   60    	game_WinCondition:  .db #0 ;; Win condition 0-> Time, 1 -> Score
                             61 
   0079 0A                   62 	game_maxScore:      .db #10 ;; Max score of a match (to win)
   007A 00                   63 	game_t1Score:       .db #0 ;; Points of team 1		(8 bits)
   007B 00                   64 	game_t2Score:       .db #0 ;; Points of team 2		(8 bits)
                             65 
   007C 02                   66 	game_minute:		.db #2 ;; Actual minute. Also Controles if we whant to play with time
   007D 00                   67 	game_secLeft:		.db #0 ;; Both variables to control the seconds
   007E 00                   68 	game_secRight:		.db #0 ;; Both variables to control the seconds
   007F 00 00                69 	game_maxTime:       .dw #0x0000 ;; Max time of a match
   0081 00 00                70 	game_map:           .dw #0x0000 ;; Pointer to map of tiles	(16 bits little endian)
                             71 
   0083 00                   72 	game_musicOptions:  .db #0 ;; Controles if we whant to play music on options
   0084 00                   73 	game_timeOptions:   .db #0 ;; Controles if we whant to play with time on options
                             74 
   0085 00 00                75 	game_interrMusic:   .dw #0 ;; Interruption counter for music handler	(16 bits)
   0087 2C 01                76 	game_interrTime:	.dw #0x012C ;; Interruption counter for time handler	(16 bits)
   0089 00                   77 	game_musicPlayer:   .db #0 ;; Controles the music player
   008A 00                   78 	game_musicEffects:  .db #0 ;; Controles the effects on the match
                             79 
   008B 00                   80 	game_enableMusic:	.db #0 ;; Controles if we whant some music
                             81 
                             82 	;; ÑORDBUGER 0f89
                             83 
                             84 	;;game_map:		.dw #0x0000	;; Pointer to map of tiles	(16 bits little endian)
                             85 	;;game_fTime:		.dw #0x0000	;; Final duration of each match	(16 bits)
                             86 	;;game_t1Score: 		.db #0 		;; Points of team 1		(8 bits)
                             87 	;;game_t2Score: 		.db #0 		;; Points of team 2		(8 bits)
                             88 ;; 
                             89 
                             90 
                             91 ;; ====================================
                             92 ;; ====================================
                             93 ;; PRIVATE DATA
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 11.
Hexadecimal [16-Bits]



                             94 ;; ====================================
                             95 ;; ====================================
                             96 
                     0050    97 .equ RIGHT_LIMIT,	80
                     0000    98 .equ LEFT_LIMIT,	0
                     0020    99 .equ TOP_LIMIT,	 	32
                     00C8   100 .equ BOTTOM_LIMIT,	200
                     0028   101 .equ CENTER_LIMIT,	40
                            102 
                     E025   103 .equ minSpPointer, 0xE025		;; Pointer to know where to print the score, on both videopointers.
                     A025   104 .equ minSpPointer2, 0xA025
                     E029   105 .equ secLeftSpPointer, 0xE029
                     A029   106 .equ secLeftSpPointer2, 0xA029
                     E02C   107 .equ secRightSpPointer, 0xE02C
                     A02C   108 .equ secRightSpPointer2, 0xA02C
                            109 
   008C 00 80               110 videoPtr:	.dw 0x8000
                            111 
                     002A   112 .equ map_tH, 42
                     0028   113 .equ map_tW, 40
                            114 
                            115 ;; ====================================
                            116 ;; ====================================
                            117 ;; PUBLIC FUNCTIONS
                            118 ;; ====================================
                            119 ;; ====================================
                            120 
                            121 
                            122 ;; ===================================
                            123 ;; Inicia una partida dependiendo
                            124 ;; 	de los atributos de game
                            125 ;; ===================================
   008E                     126 gameStart::
                            127 	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            128 	;; Reading game data example
                            129 	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            130 	;;	ld 	h, Game_type(ix)	;; H <= Game_type
                            131 	;;
                            132 	;;	ld 	h, Game_map_L(ix)
                            133 	;;	ld 	l, Game_map_H(ix) 	;; HL <= Game_map pointer (little endian)
                            134 	;;
                            135 	;;	ld 	h, Game_time_H(ix)
                            136 	;;	ld 	l, Game_time_L(ix)	;; HL <= Game_time
                            137 	
                            138 	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                            139 	;; Modifying game data example
                            140 	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            141 	;;	ld 	Game_type(ix), #0	;; Game_type <= 0
                            142 	;;
                            143 	;;	ld 	Game_map_L(ix), #0
                            144 	;;	ld 	Game_map_H(ix), #0 	;; Game_map <= 0x0000 (little endian)
                            145 	;;
                            146 	;;	ld 	Game_time_H(ix), #0
                            147 	;;	ld 	Game_time_L(ix), #0	;; Game_time <= 0x0000
                            148 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 12.
Hexadecimal [16-Bits]



                            149 
   008E CD 13 02      [17]  150 	call 	initializeGame
                            151 	;; Configuration staff...
                            152 	;; Configuration staff...
                            153 	;; Configuration staff...
                            154 	;; Configurating the handler
                            155 	;; Prepartida
   0091 CD EF 01      [17]  156 	call 	configureMatch
   0094 CD 7B 02      [17]  157 	call 	game_loop_Player_IA
                            158 
   0097 3A 7B 00      [13]  159 	ld 	a, (game_t2Score)
   009A 47            [ 4]  160 	ld 	b, a
                            161 
   009B 3A 7A 00      [13]  162 	ld 	a, (game_t1Score)
   009E B8            [ 4]  163 	cp 	b
   009F FA A2 00      [10]  164 	jp 	m, t2_win
                            165 		;; t1 win
                            166 
   00A2                     167 	t2_win:
                            168 
                            169 
   00A2 C9            [10]  170 	ret
                            171 
                            172 ;; ==================================
                            173 ;; Devuelve el puntero a video en HL
                            174 ;; Devuelve:
                            175 ;;	HL => Pointer to video memory
                            176 ;; ==================================
   00A3                     177 getVideoPtr::
   00A3 2A 8C 00      [16]  178 	ld	hl, (videoPtr)
   00A6 C9            [10]  179 	ret
                            180 
                            181 ;; ==================================
                            182 ;; Incrementa los puntos del equipo 1
                            183 ;; Modifica: A, B
                            184 ;; ==================================
   00A7                     185 incTeam1Points::
   00A7 3A 79 00      [13]  186 	ld	a, (game_maxScore)
   00AA 47            [ 4]  187 	ld 	b, a				;; B <= Max points
                            188 
   00AB 3A 7A 00      [13]  189 	ld	a, (game_t1Score)
   00AE 3C            [ 4]  190 	inc	a				;; A <= Team 1 points + 1
                            191 
   00AF 32 7A 00      [13]  192 	ld	(game_t1Score), a	;; Inc team 1 points
                            193 
   00B2 C9            [10]  194 		ret
                            195 
                            196 ;; ================================== 
                            197 ;; Incrementa los puntos del equipo 2
                            198 ;; Modifica: A, B
                            199 ;; ==================================
   00B3                     200 incTeam2Points::
   00B3 3A 79 00      [13]  201 	ld	a, (game_maxScore)
   00B6 47            [ 4]  202 	ld 	b, a				;; B <= Max points
                            203 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 13.
Hexadecimal [16-Bits]



   00B7 3A 7B 00      [13]  204 	ld	a, (game_t2Score)
   00BA 3C            [ 4]  205 	inc	a				;; A <= Team 2 points + 1
                            206 
   00BB 32 7B 00      [13]  207 	ld	(game_t2Score), a	;; Inc team 2 points
                            208 
                            209 	;;cp 	b
                            210 	;;jr	z, max_t2_points		;; t2Points+1 == max_points? 
                            211 	;;	ld	(game_t2Score), a	;; Inc team 2 points
                            212 
   00BE C9            [10]  213 		ret
                            214 
                            215 ;; alomejor es una función privada
   00BF                     216 play_music:
   00BF D9            [ 4]  217 	exx
   00C0 08            [ 4]  218 	ex af', af
   00C1 F5            [11]  219 	push af
   00C2 C5            [11]  220 	push bc
   00C3 D5            [11]  221 	push de
   00C4 E5            [11]  222 	push hl
                            223 
   00C5 CD 00 00      [17]  224 	call cpct_akp_musicPlay_asm
                            225 
   00C8 E1            [10]  226 	pop hl
   00C9 D1            [10]  227 	pop de
   00CA C1            [10]  228 	pop bc
   00CB F1            [10]  229 	pop af
   00CC 08            [ 4]  230 	ex af', af
   00CD D9            [ 4]  231 	exx
                            232 
   00CE C9            [10]  233 	ret
                            234 
                            235 ;; alomejor es una función privada
   00CF                     236 stop_music:
   00CF D9            [ 4]  237 	exx
   00D0 08            [ 4]  238 	ex af', af
   00D1 F5            [11]  239 	push af
   00D2 C5            [11]  240 	push bc
   00D3 D5            [11]  241 	push de
   00D4 E5            [11]  242 	push hl
                            243 
   00D5 CD 00 00      [17]  244 	call cpct_akp_stop_asm
                            245 
   00D8 E1            [10]  246 	pop hl
   00D9 D1            [10]  247 	pop de
   00DA C1            [10]  248 	pop bc
   00DB F1            [10]  249 	pop af
   00DC 08            [ 4]  250 	ex af', af
   00DD D9            [ 4]  251 	exx
                            252 
   00DE C9            [10]  253 	ret
                            254 
                            255 
                            256 ;; ====================================
                            257 ;; ====================================
                            258 ;; PRIVATE FUNCTIONS
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 14.
Hexadecimal [16-Bits]



                            259 ;; ====================================
                            260 ;; ====================================
                            261 
                            262 ;; ====================================
                            263 ;; ====================================
                            264 ;; Decide what number must charge
                            265 ;; a -> Number
                            266 ;; hl <- Sprite to print
                            267 ;; ====================================
                            268 ;; ====================================
   00DF                     269 decideNumber::
   00DF FE 00         [ 7]  270 	cp #0
   00E1 20 04         [12]  271 	jr nz, is_One
                            272 		;; if
   00E3 21 00 00      [10]  273 		ld hl, #_sprite_numbers_00
   00E6 C9            [10]  274 		ret
                            275 
   00E7                     276 	is_One:
   00E7 FE 01         [ 7]  277 	cp #1
   00E9 20 04         [12]  278 	jr nz, is_Two
   00EB 21 00 00      [10]  279 		ld hl, #_sprite_numbers_01
   00EE C9            [10]  280 		ret
                            281 
   00EF                     282 	is_Two:
   00EF FE 02         [ 7]  283 	cp #2
   00F1 20 04         [12]  284 	jr nz, is_Tree
   00F3 21 00 00      [10]  285 		ld hl, #_sprite_numbers_02
   00F6 C9            [10]  286 		ret
                            287 
   00F7                     288 	is_Tree:
   00F7 FE 03         [ 7]  289 	cp #3
   00F9 20 04         [12]  290 	jr nz, is_Four
   00FB 21 00 00      [10]  291 		ld hl, #_sprite_numbers_03
   00FE C9            [10]  292 		ret
                            293 
   00FF                     294 	is_Four:
   00FF FE 04         [ 7]  295 	cp #4
   0101 20 04         [12]  296 	jr nz, is_Five
   0103 21 00 00      [10]  297 		ld hl, #_sprite_numbers_04
   0106 C9            [10]  298 		ret
                            299 
   0107                     300 	is_Five:
   0107 FE 05         [ 7]  301 	cp #5
   0109 20 04         [12]  302 	jr nz, is_Six
   010B 21 00 00      [10]  303 		ld hl, #_sprite_numbers_05
   010E C9            [10]  304 		ret
                            305 
   010F                     306 	is_Six:
   010F FE 06         [ 7]  307 	cp #6
   0111 20 04         [12]  308 	jr nz, is_Seven
   0113 21 00 00      [10]  309 		ld hl, #_sprite_numbers_06
   0116 C9            [10]  310 		ret
                            311 
   0117                     312 	is_Seven:
   0117 FE 07         [ 7]  313 	cp #7
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 15.
Hexadecimal [16-Bits]



   0119 20 04         [12]  314 	jr nz, is_Eight
   011B 21 00 00      [10]  315 		ld hl, #_sprite_numbers_07
   011E C9            [10]  316 		ret
                            317 
   011F                     318 	is_Eight:
   011F FE 08         [ 7]  319 	cp #8
   0121 20 04         [12]  320 	jr nz, is_Nine
   0123 21 00 00      [10]  321 		ld hl, #_sprite_numbers_08
   0126 C9            [10]  322 		ret
                            323 
   0127                     324 	is_Nine:
   0127 21 00 00      [10]  325 		ld hl, #_sprite_numbers_09
   012A C9            [10]  326 		ret
                            327 
   012B C9            [10]  328 	ret
                            329 
                            330 ;; ===================================
                            331 ;; Draws a number
                            332 ;; Entrada:
                            333 ;;	HL <= Pointer to number sprite
                            334 ;;	DE <= Pointer to video memory
                            335 ;; Modifica AF, BC, DE, HL
                            336 ;; ===================================
   012C                     337 drawNumber::
   012C 06 07         [ 7]  338 	ld 	b, #number_h 		;; B = ent height
   012E 0E 03         [ 7]  339 	ld 	c, #number_w 		;; C = ent width
   0130 CD 00 00      [17]  340 	call cpct_drawSprite_asm
                            341 
   0133 C9            [10]  342 	ret
                            343 
   0134                     344 drawTimeCounters:
   0134 3A 8D 00      [13]  345 		ld a, (videoPtr + 1)
   0137 FE 80         [ 7]  346 		cp #0x80
   0139 28 26         [12]  347 		jr z, paintOn8000
                            348 			;; Painting on C000
   013B 3A 7C 00      [13]  349 			ld a, (game_minute)
   013E CD DF 00      [17]  350 			call decideNumber	;; HL <= sprite pointer
   0141 11 25 E0      [10]  351 			ld de,	#minSpPointer
   0144 CD 2C 01      [17]  352 			call drawNumber
                            353 
   0147 3A 7D 00      [13]  354 			ld a, (game_secLeft)
   014A CD DF 00      [17]  355 			call decideNumber	;; HL <= sprite pointer
   014D 11 29 E0      [10]  356 			ld de,	#secLeftSpPointer
   0150 CD 2C 01      [17]  357 			call drawNumber
                            358 
   0153 3A 7E 00      [13]  359 			ld a, (game_secRight)
   0156 CD DF 00      [17]  360 			call decideNumber	;; HL <= sprite pointer
   0159 11 2C E0      [10]  361 			ld de,	#secRightSpPointer
   015C CD 2C 01      [17]  362 			call drawNumber
                            363 
   015F 18 24         [12]  364 		jr drawTimeCounters_exit
                            365 
   0161                     366 		paintOn8000:
   0161 3A 7C 00      [13]  367 			ld a, (game_minute)
   0164 CD DF 00      [17]  368 			call decideNumber	;; HL <= sprite pointer
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 16.
Hexadecimal [16-Bits]



   0167 11 25 A0      [10]  369 			ld de,	#minSpPointer2
   016A CD 2C 01      [17]  370 			call drawNumber
                            371 
   016D 3A 7D 00      [13]  372 			ld a, (game_secLeft)
   0170 CD DF 00      [17]  373 			call decideNumber	;; HL <= sprite pointer
   0173 11 29 A0      [10]  374 			ld de,	#secLeftSpPointer2
   0176 CD 2C 01      [17]  375 			call drawNumber
                            376 
   0179 3A 7E 00      [13]  377 			ld a, (game_secRight)
   017C CD DF 00      [17]  378 			call decideNumber	;; HL <= sprite pointer
   017F 11 2C A0      [10]  379 			ld de,	#secRightSpPointer2
   0182 CD 2C 01      [17]  380 			call drawNumber
                            381 
   0185                     382 		drawTimeCounters_exit:
   0185 C9            [10]  383 		ret
                            384 
   0186                     385 updateTime::
   0186 3A 7D 00      [13]  386 	ld a, (game_secLeft)
   0189 FE 00         [ 7]  387 	cp #0
   018B 20 1A         [12]  388 	jr nz, checkRightsec
                            389 
   018D 3A 7E 00      [13]  390 	ld a, (game_secRight)
   0190 FE 00         [ 7]  391 	cp #0
   0192 20 28         [12]  392 	jr nz, decRightsec
   0194 3A 7C 00      [13]  393 		ld a, (game_minute) 
   0197 3D            [ 4]  394 		dec a ;; min--
   0198 32 7C 00      [13]  395 		ld (game_minute), a
                            396 
   019B 3E 05         [ 7]  397 		ld a, #5
   019D 32 7D 00      [13]  398 		ld (game_secLeft), a ;; secLeft = 5
                            399 
   01A0 3E 09         [ 7]  400 		ld a, #9
   01A2 32 7E 00      [13]  401 		ld (game_secRight), a ;; secRight = 9;
                            402 
   01A5 18 1C         [12]  403 		jr continue
   01A7                     404 	checkRightsec:
   01A7 3A 7E 00      [13]  405 		ld a, (game_secRight)
   01AA FE 00         [ 7]  406 		cp #0
   01AC 20 0E         [12]  407 		jr nz, decRightsec
   01AE 3A 7D 00      [13]  408 			ld a, (game_secLeft) 
   01B1 3D            [ 4]  409 			dec a ;; secLeft--
   01B2 32 7D 00      [13]  410 			ld (game_secLeft), a
                            411 
   01B5 3E 09         [ 7]  412 			ld a, #9 ;; secRight = 9;
   01B7 32 7E 00      [13]  413 			ld (game_secRight), a
   01BA 18 07         [12]  414 			jr continue
   01BC                     415 	decRightsec:
   01BC 3A 7E 00      [13]  416 		ld a, (game_secRight)
   01BF 3D            [ 4]  417 		dec a ;; secRight--
   01C0 32 7E 00      [13]  418 		ld (game_secRight), a
                            419 
   01C3                     420 	continue:
   01C3 C9            [10]  421 	ret
                            422 
   01C4                     423 emptyHandler:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 17.
Hexadecimal [16-Bits]



   01C4 C9            [10]  424 	ret
                            425 
   01C5                     426 handlerTime::
   01C5 F5            [11]  427 	push af
   01C6 E5            [11]  428 	push hl
   01C7 D9            [ 4]  429 	exx
   01C8 F5            [11]  430 	push af
   01C9 E5            [11]  431 	push hl
                            432 
                            433 
                            434 
                            435 
   01CA 2A 87 00      [16]  436 	ld 	hl, (game_interrTime)
   01CD 2B            [ 6]  437 	dec 	hl
   01CE 7C            [ 4]  438 	ld 	a, h
   01CF FE 00         [ 7]  439 	cp 	#0
   01D1 20 0B         [12]  440 	jr 	nz, time_iterate
   01D3 7D            [ 4]  441 	ld 	a, l
   01D4 FE 00         [ 7]  442 	cp 	#0
   01D6 20 06         [12]  443 	jr 	nz, time_iterate
                            444 		;; interrTime == 0
   01D8 21 2C 01      [10]  445 		ld hl, #0x012C		;; HL <= 300
   01DB CD 86 01      [17]  446 		call updateTime
                            447 
   01DE                     448 	time_iterate:
   01DE 22 87 00      [16]  449 		ld (game_interrTime), hl
                            450 
   01E1 E1            [10]  451 	pop hl
   01E2 F1            [10]  452 	pop af
   01E3 D9            [ 4]  453 	exx
   01E4 E1            [10]  454 	pop hl
   01E5 F1            [10]  455 	pop af
                            456 
   01E6 C9            [10]  457 	ret
                            458 
   01E7                     459 handlerMusic:
   01E7 C9            [10]  460 	ret
                            461 
   01E8                     462 handlerTimeMusic:
   01E8 CD C5 01      [17]  463 	call handlerTime
   01EB CD E7 01      [17]  464 	call handlerMusic
   01EE C9            [10]  465 	ret
                            466 
   01EF                     467 configureMatch:
   01EF 3A 7C 00      [13]  468 	ld a, (game_minute) 		;; a <- game_minute
   01F2 FE 00         [ 7]  469 	cp #0						;; a - 0
   01F4 20 0F         [12]  470 	jr nz, ISR_timeOn			;; if (game_enableTime - 0) == 1, then jump ISR_timeOn
                            471 	;; Time Off
   01F6 3A 8B 00      [13]  472 	ld a, (game_enableMusic) 	;; a <- game_enableMusic
   01F9 FE 00         [ 7]  473 	cp #0						;; a - 0
   01FB 20 15         [12]  474 	jr nz, ISR_timeOff_musicOn	;; if (game_enableMusic - 0) == 1, then jump ISR_timeOff_musicOn
                            475 	;; Time Off, Music Off
   01FD 21 C4 01      [10]  476 	ld hl, #emptyHandler
   0200 CD 00 00      [17]  477 	call cpct_setInterruptHandler_asm
                            478 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 18.
Hexadecimal [16-Bits]



   0203 18 0D         [12]  479 	jr configureMatch_exit
                            480 
   0205                     481 	ISR_timeOn:
                            482 		;; Time On
   0205 3A 8B 00      [13]  483 		ld a, (game_enableMusic)	;; a <- game_enableMusic
   0208 FE 00         [ 7]  484 		cp #0
   020A 20 06         [12]  485 		jr nz, ISR_timeOn_musicOn
                            486 		;; Time On, Music Off
   020C 21 C5 01      [10]  487 		ld hl, #handlerTime
   020F CD 00 00      [17]  488 		call cpct_setInterruptHandler_asm
                            489 
   0212                     490 	ISR_timeOff_musicOn:
                            491 
   0212                     492 	ISR_timeOn_musicOn:
                            493 
   0212                     494 	configureMatch_exit:
   0212 C9            [10]  495 	ret
                            496 
                            497 ;; ========================
                            498 ;; Initialize game
                            499 ;; ========================
   0213                     500 initializeGame::
                            501 
                            502 	;; Set video mode
   0213 0E 00         [ 7]  503 	ld 	c, #0
   0215 CD 00 00      [17]  504 	call cpct_setVideoMode_asm
                            505 
                            506 	;; Set palette
   0218 21 00 00      [10]  507 	ld 	hl, #_sprite_palette
   021B 11 10 00      [10]  508 	ld 	de, #16
   021E CD 00 00      [17]  509 	call cpct_setPalette_asm
                            510 
                            511 	;; Clean from 8000 to FFFF
   0221 21 00 80      [10]  512 	ld	hl, #0x8000			;; HL <= Copy pointer
   0224 11 01 80      [10]  513 	ld	de, #0x8001			;; DE <= Write pointer
   0227 36 00         [10]  514 	ld	(hl), #00			;; Set to 0 where HL points
   0229 01 00 80      [10]  515 	ld	bc, #0x8000			;; BC <= Times to repeat
   022C ED B0         [21]  516 	ldir					;; Copy from where HL points to where DE points, and inc HL and DE, BC times
                            517 
   022E 21 7A 00      [10]  518 	ld	hl, #game_t1Score
   0231 36 00         [10]  519 	ld 	(hl), #0
   0233 21 7B 00      [10]  520 	ld	hl, #game_t2Score
   0236 36 00         [10]  521 	ld 	(hl), #0		;; Initialize points to 0
                            522 
   0238 21 00 00      [10]  523 	ld	hl, #_map_tileset
   023B CD 00 00      [17]  524 	call cpct_etm_setTileset2x4_asm
                            525 
                            526 ;;	;; Print map at second video buffer
                            527 ;;	ld	a, #map_tW
                            528 ;;	ld	c, #map_tH
                            529 ;;	ld	de, #0x8140
                            530 ;;	ld	hl, #_tilemap
                            531 ;;	call cpct_etm_drawTilemap2x4_f_asm
                            532 ;;	;; Print map at first video buffer
                            533 ;;	ld	a, #map_tW
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 19.
Hexadecimal [16-Bits]



                            534 ;;	ld	c, #map_tH
                            535 ;;	ld	de, #0xC140
                            536 ;;	ld	hl, #_tilemap
                            537 ;;	call cpct_etm_drawTilemap2x4_f_asm
                            538 
                            539 ;;	ld	a, Ent_erase_x(ix)	;; A <= ent_erase_x
                            540 ;;	sra 	a			;; A <= A/2
                            541 ;;	ld	c, a 			;; C <= ent_erase_x/2
                            542 ;;
                            543 ;;	ld	a, Ent_erase_y(ix)	;; A <= ent_erase_y
                            544 ;;	sra 	a			;;
                            545 ;;	sra 	a			;; A <= A/4
                            546 ;;	ld	b, a 			;; B <= ent_erase_y/4
                            547 ;;
                            548 ;;
                            549 ;;	ld	hl, #_tilemap	;; Pointer to tilemap
                            550 ;;	push 	hl
                            551 ;;	call 	getVideoPtr	;; HL <= Video memory pointer
                            552 ;;	push	hl		;; Videomem pointer to draw
                            553 ;;	ld	e, #5
                            554 ;;	ld	d, #5
                            555 ;;	ld	a, #map_tW
                            556 ;;	call cpct_etm_drawTileBox2x4_asm
                            557 
                            558 
                            559 
                            560 	;; Print map at second video buffer
   023E 21 00 00      [10]  561 	ld	hl, #_tilemap	;; Pointer to tilemap
   0241 E5            [11]  562 	push 	hl
   0242 21 00 80      [10]  563 	ld	hl, #0x8000	;; Videomem pointer
   0245 E5            [11]  564 	push 	hl
   0246 01 00 00      [10]  565 	ld	bc, #0x0000	;; Starting tile of the tilemap
   0249 1E 28         [ 7]  566 	ld	e, #map_tW
   024B 16 2A         [ 7]  567 	ld	d, #map_tH
   024D 3E 28         [ 7]  568 	ld	a, #map_tW
   024F CD 00 00      [17]  569 	call 	cpct_etm_drawTileBox2x4_asm
                            570 
                            571 	;; Print map at first video buffer
   0252 21 00 00      [10]  572 	ld	hl, #_tilemap	;; Pointer to tilemap
   0255 E5            [11]  573 	push 	hl
   0256 21 00 C0      [10]  574 	ld	hl, #0xC000	;; Videomem pointer
   0259 E5            [11]  575 	push 	hl
   025A 01 00 00      [10]  576 	ld	bc, #0x0000	;; Starting tile of the tilemap
   025D 1E 28         [ 7]  577 	ld	e, #map_tW
   025F 16 2A         [ 7]  578 	ld	d, #map_tH
   0261 3E 28         [ 7]  579 	ld	a, #map_tW
   0263 CD 00 00      [17]  580 	call 	cpct_etm_drawTileBox2x4_asm
                            581 
                            582 
                            583 	;; Initialize music
                            584 ;;	ld	de, #_song_pointer
                            585 ;;	call	cpct_akp_musicInit_asm
                            586 	
                            587 
   0266 C9            [10]  588 	ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 20.
Hexadecimal [16-Bits]



                            589 
                            590 
                            591 ;; ========================
                            592 ;; Switch Buffers
                            593 ;; ========================
   0267                     594 switchBuffers:
                     0268   595 	mem_page = .+1
   0267 2E 20         [ 7]  596 	ld 	l, #0x20
   0269 CD 00 00      [17]  597 	call 	cpct_setVideoMemoryPage_asm
   026C 21 68 02      [10]  598 	ld 	hl, #mem_page
   026F 3E 10         [ 7]  599 	ld	a, #0x10
   0271 AE            [ 7]  600 	xor	(hl)
   0272 77            [ 7]  601 	ld	(hl), a
                            602 
   0273 21 8D 00      [10]  603 	ld	hl, #videoPtr+1
   0276 3E 40         [ 7]  604 	ld	a, #0x40
   0278 AE            [ 7]  605 	xor	(hl)
   0279 77            [ 7]  606 	ld	(hl), a
                            607 
                            608 
   027A C9            [10]  609 	ret
                            610 
                            611 ;; ============================
                            612 ;; Game loop until end of game
                            613 ;; ============================
   027B                     614 game_loop_Player_IA:
                            615 
                            616 	;; Erase
   027B DD 21 0A 00   [14]  617 	ld ix, #player_data
   027F CD 00 00      [17]  618 	call entityErase
                            619 
   0282 DD 21 25 00   [14]  620 	ld ix, #enemy_data
   0286 CD 00 00      [17]  621 	call entityErase
                            622 
   0289 DD 21 00 00   [14]  623 	ld ix, #frisbee_data
   028D CD 00 00      [17]  624 	call entityErase
                            625 
                            626 	;; Update
   0290 DD 21 0A 00   [14]  627 	ld ix, #player_data
   0294 CD 00 00      [17]  628 	call player_update
                            629 
   0297 DD 21 25 00   [14]  630 	ld ix, #enemy_data
   029B CD 00 00      [17]  631 	call player_update
                            632 
   029E DD 21 00 00   [14]  633 	ld ix, #frisbee_data
   02A2 CD 00 00      [17]  634 	call frisbee_update
                            635 
                            636 	;; Draw
   02A5 DD 21 0A 00   [14]  637 	ld ix, #player_data
   02A9 CD 00 00      [17]  638 	call entityDraw
                            639 
   02AC DD 21 25 00   [14]  640 	ld ix, #enemy_data
   02B0 CD 00 00      [17]  641 	call entityDraw
                            642 
   02B3 DD 21 00 00   [14]  643 	ld ix, #frisbee_data
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 21.
Hexadecimal [16-Bits]



   02B7 CD 00 00      [17]  644 	call entityDraw
                            645 
   02BA CD 34 01      [17]  646 	call drawTimeCounters
                            647 
                            648 	;; Check goal
   02BD DD 21 00 00   [14]  649 	ld	ix, #frisbee_data
   02C1 CD 00 00      [17]  650 	call frisbee_checkGoal
                            651 
                            652 	;; Wait VSYNC to modify VMEM without blinking
   02C4 CD 00 00      [17]  653 	call cpct_waitVSYNC_asm
   02C7 CD 67 02      [17]  654 	call switchBuffers
                            655 
   02CA 3A 78 00      [13]  656 	ld a, (game_WinCondition) ;; a <- WinCondition (0-> Time, 1 -> Score)
   02CD FE 00         [ 7]  657 	cp #0  				      ;; a - 0
   02CF 28 02         [12]  658 	jr z, timeWinning         ;; if (a - 0) == 0, then jump timeWinning
   02D1 18 17         [12]  659 		jr scoreEnd 		  ;; else, jump ScoreWinning.
                            660 
   02D3                     661 	timeWinning:
   02D3 3A 7C 00      [13]  662 		ld a, (game_minute) ;; a <- game_minute
   02D6 FE 00         [ 7]  663 		cp #0 				;; a - 0
   02D8 20 A1         [12]  664 		jr nz, game_loop_Player_IA 	;; if (a - 0) != 0, then jump game_loop_Player_IA
                            665 
   02DA 3A 7D 00      [13]  666 		ld a, (game_secLeft)	;; a <- game_secLeft
   02DD FE 00         [ 7]  667 		cp #0 				  	;; a - 0
   02DF 20 9A         [12]  668 		jr nz, game_loop_Player_IA	;; if (a - 0) != 0, then jump game_loop_Player_IA
                            669 
   02E1 3A 7E 00      [13]  670 		ld a, (game_secRight)	;; a <- game_secRight
   02E4 FE 00         [ 7]  671 		cp #0 				  	;; a - 0
   02E6 20 93         [12]  672 		jr nz, game_loop_Player_IA	;; if (a - 0) != 0, then jump game_loop_Player_IA
   02E8 18 16         [12]  673 		jr game_loop_Player_IA_exit
                            674 
   02EA                     675 	scoreEnd:
   02EA 3A 7A 00      [13]  676 		ld a, (game_t1Score) 
   02ED 47            [ 4]  677 		ld b, a               ;; b <- LocalScore
   02EE 3A 79 00      [13]  678 		ld a, (game_maxScore) ;; a <- maxScore
   02F1 B8            [ 4]  679 		cp b             	  ;; a - b 
   02F2 28 0C         [12]  680 		jr z, game_loop_Player_IA_exit 		      ;; if (maxScore - LocalScore) == 0, then jump localWin
                            681 
   02F4 4F            [ 4]  682 		ld c, a      	      ;; c <- maxScore
   02F5 3A 7B 00      [13]  683 		ld a, (game_t2Score)
   02F8 47            [ 4]  684 		ld b, a               ;; b <- VisitantScore
   02F9 79            [ 4]  685 		ld a, c 			  ;; a <- c
   02FA B8            [ 4]  686 		cp b             	  ;; a - b 
   02FB 28 03         [12]  687 		jr z, game_loop_Player_IA_exit            ;; if (maxScore - VisitantScore) == 0, then jump visitantWin
   02FD C3 7B 02      [10]  688 			jp game_loop_Player_IA ;; Keep Playing
                            689 
   0300                     690 game_loop_Player_IA_exit:
   0300 C9            [10]  691 	ret
